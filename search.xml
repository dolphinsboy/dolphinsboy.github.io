<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL-Insert-操作加锁分析</title>
      <link href="/2019-01-11-MySQL-Insert-%E6%93%8D%E4%BD%9C%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/"/>
      <url>/2019-01-11-MySQL-Insert-%E6%93%8D%E4%BD%9C%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>看微博上丁奇大牛转发的<a href="https://weibo.com/3515375313/HaT3kClQ8?type=comment#_rnd1547179052804" target="_blank" rel="external">一条微博</a>，看作者分析的过程有疑问，Insert操作会有插入意向锁的判断，文中没有提到， 故查看源码试着分析一下。<br><a id="more"></a></p><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`z`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`b`</span> (<span class="string">`b`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> z (<span class="keyword">id</span>, b)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="number">8</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* session A */</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> z <span class="keyword">where</span> b=<span class="number">6</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* session B*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">values</span>(<span class="number">0</span>,<span class="number">4</span>); <span class="comment">/*blocked*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">values</span>(<span class="number">-1</span>,<span class="number">4</span>); <span class="comment">/*success*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">values</span>(<span class="number">4</span>,<span class="number">8</span>); <span class="comment">/*blocked*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">values</span>(<span class="number">8</span>,<span class="number">8</span>); <span class="comment">/*success*/</span></span><br></pre></td></tr></table></figure><p><a href="https://weibo.com/3515375313/HaT3kClQ8?type=comment#_rnd1547179052804" target="_blank" rel="external">文中</a>提到的(id=5,b=6)前面有Gap Lock这点觉得有疑问。</p><h4 id="Innodb打印出的锁信息"><a href="#Innodb打印出的锁信息" class="headerlink" title="Innodb打印出的锁信息"></a>Innodb打印出的锁信息</h4><h5 id="设置参数开启Innodb打印SQL加锁详情"><a href="#设置参数开启Innodb打印SQL加锁详情" class="headerlink" title="设置参数开启Innodb打印SQL加锁详情"></a>设置参数开启Innodb打印SQL加锁详情</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global innodb_status_output_locks=1;</span><br><span class="line">set global innodb_status_output=1;</span><br></pre></td></tr></table></figure><h5 id="在RR模式下运行session-A"><a href="#在RR模式下运行session-A" class="headerlink" title="在RR模式下运行session A"></a>在RR模式下运行session A</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">##  select * from z where b=6 for update</span><br><span class="line"></span><br><span class="line">4 lock struct(s), heap size 1248, 3 row lock(s)</span><br><span class="line">MySQL thread id 1, OS thread handle 0x7fff65ce9700, query id 15 localhost root cleaning up</span><br><span class="line">TABLE LOCK table `test`.`z` trx id 102152 lock mode IX</span><br><span class="line">### 索引b上的记录锁</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102152 lock_mode X</span><br><span class="line">Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000006; asc     ;; ### b字段，值为6</span><br><span class="line"> 1: len 4; hex 80000005; asc     ;; ### 主键id字段，值为5</span><br><span class="line"></span><br><span class="line">### 主键索引上记录锁</span><br><span class="line">RECORD LOCKS space id 57 page no 3 n bits 80 index `PRIMARY` of table `test`.`z` trx id 102152 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 4 PHYSICAL RECORD: n_fields 4; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000005; asc     ;; ### 主键id字段，值为5</span><br><span class="line"> 1: len 6; hex 00000001890b; asc       ;; ### 事务id，此行最近一次被更新的事务id，占6个字节</span><br><span class="line"> 2: len 7; hex 8b0000013d0128; asc     = (;; ### 回滚段指针DB_ROLL_PTR，用于MVCC</span><br><span class="line"> 3: len 4; hex 80000006; asc     ;; ### b字段，值为6</span><br><span class="line"></span><br><span class="line">### 索引b上的GAP锁</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102152 lock_mode X locks gap before rec</span><br><span class="line">Record lock, heap no 5 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000008; asc     ;; ## b字段，值为8</span><br><span class="line"> 1: len 4; hex 80000007; asc     ;; ## 主键id，值为7</span><br></pre></td></tr></table></figure><p>可以看出此SQL语句加锁为索引b上的[6,8)，主键上[5]，没有看出索引b上(4,6)的GAP锁。<br><strong>这里就是疑问点。</strong></p><h5 id="在RR模式下运行session-B"><a href="#在RR模式下运行session-B" class="headerlink" title="在RR模式下运行session B"></a>在RR模式下运行session B</h5><h5 id="插入-0-4"><a href="#插入-0-4" class="headerlink" title="插入(0,4)"></a>插入(0,4)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---TRANSACTION 102153, ACTIVE 689 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 376, 1 row lock(s), undo log entries 1</span><br><span class="line">MySQL thread id 2, OS thread handle 0x7fff65ca8700, query id 26 localhost root update</span><br><span class="line">insert into z values(0,4)</span><br><span class="line">------- TRX HAS BEEN WAITING 7 SEC FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102153 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000006; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000005; asc     ;;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">TABLE LOCK table `test`.`z` trx id 102153 lock mode IX</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102153 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000006; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000005; asc     ;;</span><br></pre></td></tr></table></figure><p>可以看出sessionB阻塞的原因是插入意向锁，等待行锁记录是(b=6,id=5)。</p><h5 id="插入-2-8"><a href="#插入-2-8" class="headerlink" title="插入(2,8)"></a>插入(2,8)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert into z values(2,8)</span><br><span class="line">------- TRX HAS BEEN WAITING 7 SEC FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102698 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 5 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000008; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000007; asc     ;;</span><br></pre></td></tr></table></figure><h3 id="Insert-Debug调试"><a href="#Insert-Debug调试" class="headerlink" title="Insert Debug调试"></a>Insert Debug调试</h3><h4 id="Insert操作的锁判断"><a href="#Insert操作的锁判断" class="headerlink" title="Insert操作的锁判断"></a>Insert操作的锁判断</h4><p>给lock_rec_insert_check_and_lock函数添加断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************/</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">Checks if locks of other transactions prevent an immediate insert of</span></span><br><span class="line"><span class="comment">a record. If they do, first tests if the query thread should anyway                                                                                                                        </span></span><br><span class="line"><span class="comment">be suspended for some reason; if not, then puts the transaction and</span></span><br><span class="line"><span class="comment">the query thread to the lock wait state and inserts a waiting request</span></span><br><span class="line"><span class="comment">for a gap x-lock to the lock queue.</span></span><br><span class="line"><span class="comment">@return DB_SUCCESS, DB_LOCK_WAIT, DB_DEADLOCK, or DB_QUE_THR_SUSPENDED */</span></span><br><span class="line">UNIV_INTERN</span><br><span class="line"><span class="keyword">dberr_t</span></span><br><span class="line">lock_rec_insert_check_and_lock(</span><br><span class="line"><span class="comment">/*===========================*/</span></span><br><span class="line">    ulint       flags,  <span class="comment">/*!&lt; in: if BTR_NO_LOCKING_FLAG bit is</span></span><br><span class="line"><span class="comment">                set, does nothing */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">rec_t</span>*    rec,    <span class="comment">/*!&lt; in: record after which to insert */</span></span><br><span class="line">    <span class="keyword">buf_block_t</span>*    block,  <span class="comment">/*!&lt; in/out: buffer block of rec */</span></span><br><span class="line">    <span class="keyword">dict_index_t</span>*   index,  <span class="comment">/*!&lt; in: index */</span></span><br><span class="line">    <span class="keyword">que_thr_t</span>*  thr,    <span class="comment">/*!&lt; in: query thread */</span></span><br><span class="line">    <span class="keyword">mtr_t</span>*      mtr,    <span class="comment">/*!&lt; in/out: mini-transaction */</span></span><br><span class="line">    ibool*      inherit)<span class="comment">/*!&lt; out: set to TRUE if the new</span></span><br><span class="line"><span class="comment">                inserted record maybe should inherit</span></span><br><span class="line"><span class="comment">                LOCK_GAP type locks from the successor</span></span><br><span class="line"><span class="comment">                record */</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//当前insert记录的逻辑下一条记录</span></span><br><span class="line">    next_rec = page_rec_get_next_const(rec);</span><br><span class="line">    next_rec_heap_no = page_rec_get_heap_no(next_rec);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前记录的下一条逻辑记录值上是否存在GAP锁或者插入意向锁</span></span><br><span class="line"><span class="comment">//如果存在，返回DB_LOCK_WAIT，当前insert进行等待队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If another transaction has an explicit lock request which locks</span></span><br><span class="line"><span class="comment">    the gap, waiting or granted, on the successor, the insert has to wait.</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    An exception is the case where the lock by the another transaction</span></span><br><span class="line"><span class="comment">    is a gap type lock which it placed to wait for its turn to insert. We</span></span><br><span class="line"><span class="comment">    do not consider that kind of a lock conflicting with our insert. This</span></span><br><span class="line"><span class="comment">    eliminates an unnecessary deadlock which resulted when 2 transactions</span></span><br><span class="line"><span class="comment">    had to wait for their insert. Both had waiting gap type lock requests</span></span><br><span class="line"><span class="comment">    on the successor, which produced an unnecessary deadlock. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lock_rec_other_has_conflicting(</span><br><span class="line">          ¦ <span class="keyword">static_cast</span>&lt;<span class="keyword">enum</span> lock_mode&gt;(</span><br><span class="line">             ¦  LOCK_X | LOCK_GAP | LOCK_INSERT_INTENTION),</span><br><span class="line">          ¦ block, next_rec_heap_no, trx)) &#123;</span><br><span class="line">             </span><br><span class="line">        <span class="comment">/* Note that we may get DB_SUCCESS also here! */</span></span><br><span class="line">        trx_mutex_enter(trx);</span><br><span class="line">        </span><br><span class="line">        err = lock_rec_enqueue_waiting(</span><br><span class="line">            LOCK_X | LOCK_GAP | LOCK_INSERT_INTENTION,</span><br><span class="line">            block, next_rec_heap_no, index, thr);</span><br><span class="line"></span><br><span class="line">        trx_mutex_exit(trx);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err = DB_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="两条Insert操作对应的下一条记录情况"><a href="#两条Insert操作对应的下一条记录情况" class="headerlink" title="两条Insert操作对应的下一条记录情况"></a>两条Insert操作对应的下一条记录情况</h4><h5 id="insert-into-z-values-0-4"><a href="#insert-into-z-values-0-4" class="headerlink" title="insert into z values(0,4)"></a>insert into z values(0,4)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p *next_rec</span><br><span class="line">$5 = 128 &apos;\200&apos;</span><br><span class="line">(gdb) p next_rec_heap_no</span><br><span class="line">$6 = 4</span><br><span class="line"></span><br><span class="line">TABLE LOCK table `test`.`z` trx id 102153 lock mode IX</span><br><span class="line">RECORD LOCKS space id 57 page no 4 n bits 80 index `b` of table `test`.`z` trx id 102153 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000006; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000005; asc     ;;</span><br></pre></td></tr></table></figure><p>打印这个下一行其加锁信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb)p lock-&gt;un_member-&gt;rec_lock</span><br><span class="line">$<span class="number">21</span> = &#123;space = <span class="number">57</span>, page_no = <span class="number">4</span>, n_bits = <span class="number">80</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>在没有加锁的情况，此语句插入的记录是(id=10,b=4)，而不是(id=0,b=4)。这是因为主键是Auto_Increment。</strong></p><h5 id="insert-into-z-values-1-4"><a href="#insert-into-z-values-1-4" class="headerlink" title="insert into z values(-1,4)"></a>insert into z values(-1,4)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> (gdb) p next_rec</span><br><span class="line">$7 = (const rec_t *) 0x7fff6e00808c &quot;\200&quot;</span><br><span class="line">(gdb) p *next_rec</span><br><span class="line">$8 = 128 &apos;\200&apos;</span><br><span class="line">(gdb) p next_rec_heap_no</span><br><span class="line">$9 = 3</span><br></pre></td></tr></table></figure><p>这里就是为啥插入(-1,4)记录不会阻塞，而(0,4)会阻塞的根本原因。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>插入意向锁作用是啥？</li><li>insert的时候为啥需要判断逻辑的下一条记录加锁情况呢？</li><li>插入意向锁是针对主键，还是二级索引？</li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python调用Golang-rpc服务</title>
      <link href="/2018-12-18-Python%E8%B0%83%E7%94%A8Golang-rpc%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018-12-18-Python%E8%B0%83%E7%94%A8Golang-rpc%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>看open-falcon的transfer部分代码，发现有个python测试脚本，使用python调用golang的rpc服务。<br>故对这个点进行整理一下。<br>python调用golang rpc服务，前提是使用json rpc机制。</p><a id="more"></a><h3 id="Golang-Rpc-Server代码"><a href="#Golang-Rpc-Server代码" class="headerlink" title="Golang Rpc Server代码"></a>Golang Rpc Server代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line">myserver <span class="string">"TestRpc/server"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/rpc/jsonrpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">addr := <span class="string">":1234"</span></span><br><span class="line">server := rpc.NewServer()</span><br><span class="line">server.Register(<span class="built_in">new</span>(myserver.Arith))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l, e := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">"listen error:"</span>, e)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">log.Println(<span class="string">"rpc listening "</span>, addr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> l.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := l.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(<span class="string">"rpc.Serve: accept:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> server.ServeCodec(jsonrpc.NewServerCodec(conn))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rpc方法和函数"><a href="#Rpc方法和函数" class="headerlink" title="Rpc方法和函数"></a>Rpc方法和函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/pkg/errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Arith <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">A,B <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//商和余数</span></span><br><span class="line"><span class="keyword">type</span> Quotient <span class="keyword">struct</span> &#123;</span><br><span class="line">Quo, Rem <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q Quotient)</span><span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Quo:%d, Rem:%d"</span>, q.Quo, q.Rem)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Arith)</span><span class="title">Mulitply</span><span class="params">(args *Args, reply *<span class="keyword">int</span>)</span> <span class="title">error</span></span>  &#123;</span><br><span class="line">*reply = args.A *args.B</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Arith)</span><span class="title">Divide</span><span class="params">(args *Args, quo *Quotient)</span> <span class="title">error</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> args.B == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"Divide by zero"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quo.Quo = args.A/args.B</span><br><span class="line">quo.Rem = args.A%args.B</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python调用代码"><a href="#Python调用代码" class="headerlink" title="Python调用代码"></a>Python调用代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCClient</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, codec=json)</span>:</span></span><br><span class="line">        self._socket = socket.create_connection(addr)</span><br><span class="line">        self._id_iter = itertools.count()</span><br><span class="line">        self._codec = codec</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_message</span><span class="params">(self, name, *params)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dict(id=self._id_iter.next(),</span><br><span class="line">                    params=list(params),</span><br><span class="line">                    method=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, name, *params)</span>:</span></span><br><span class="line">        req = self._message(name, *params)</span><br><span class="line">        id = req.get(<span class="string">'id'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">        Golang Rpc 返回的Json格式</span></span><br><span class="line"><span class="string">        type serverResponse struct &#123;</span></span><br><span class="line"><span class="string">        Id     *json.RawMessage `json:"id"`</span></span><br><span class="line"><span class="string">        Result interface&#123;&#125;      `json:"result"`</span></span><br><span class="line"><span class="string">        Error  interface&#123;&#125;      `json:"error"`</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        mesg = self._codec.dumps(req)</span><br><span class="line">        self._socket.sendall(mesg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># This will actually have to loop if resp is bigger</span></span><br><span class="line">        resp = self._socket.recv(<span class="number">4096</span>)</span><br><span class="line">        resp = self._codec.loads(resp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> resp.get(<span class="string">'id'</span>) != id:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"expected id=%s, received id=%s: %s"</span></span><br><span class="line">                            %(id, resp.get(<span class="string">'id'</span>), resp.get(<span class="string">'error'</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> resp.get(<span class="string">'error'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(resp.get(<span class="string">'error'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resp.get(<span class="string">'result'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rpc = RPCClient((<span class="string">"127.0.0.1"</span>, <span class="number">1234</span>))</span><br><span class="line">    args = &#123;<span class="string">'A'</span>:<span class="number">2</span>, <span class="string">'B'</span>:<span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">print</span> rpc.call(<span class="string">"Arith.Mulitply"</span>,args)</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>Rpc提供http方式 <a href="https://haisum.github.io/2015/10/13/rpc-jsonrpc-gorilla-example-in-golang/" target="_blank" rel="external">https://haisum.github.io/2015/10/13/rpc-jsonrpc-gorilla-example-in-golang/</a></li><li>相似的例子 <a href="https://gist.github.com/stevvooe/1164621" target="_blank" rel="external">https://gist.github.com/stevvooe/1164621</a></li></ul>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Go使用defer机制记录</title>
      <link href="/2018-12-13-Go%E4%BD%BF%E7%94%A8defer%E5%AE%9E%E7%8E%B0python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8A%9F%E8%83%BD/"/>
      <url>/2018-12-13-Go%E4%BD%BF%E7%94%A8defer%E5%AE%9E%E7%8E%B0python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><ul><li>多个defer执行顺序如何</li><li>如何使用defer机制记录何时进入和退出函数</li><li>defer和return返回值</li><li>循环体使用defer注意点</li></ul><a id="more"></a><h3 id="多个defer执行顺序"><a href="#多个defer执行顺序" class="headerlink" title="多个defer执行顺序"></a>多个defer执行顺序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> A()</span><br><span class="line"><span class="keyword">defer</span> B()</span><br><span class="line"><span class="keyword">defer</span> C()</span><br><span class="line">fmt.Println(<span class="string">"Main"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Executed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">B</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Executed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">C</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"C Executed"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main</span><br><span class="line">C Executed</span><br><span class="line">B Executed</span><br><span class="line">A Executed</span><br></pre></td></tr></table></figure><p>可以看到最先声明的defer，最后被执行，类似栈的操作FILO。</p><h3 id="defer实现python装饰器的功能"><a href="#defer实现python装饰器的功能" class="headerlink" title="defer实现python装饰器的功能"></a>defer实现python装饰器的功能</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bigSlowOperation</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//相当于先初始化trace(XXX)，其他返回值为一个函数f</span></span><br><span class="line"><span class="comment">//然后在本函数退出之前执行f()</span></span><br><span class="line"><span class="comment">//f := trace("bigSlowOperation")</span></span><br><span class="line"><span class="comment">//defer f()</span></span><br><span class="line"><span class="keyword">defer</span> trace(<span class="string">"bigSlowOperation"</span>)()</span><br><span class="line">log.Println(<span class="string">"A"</span>)</span><br><span class="line">time.Sleep(time.Duration(<span class="number">5</span>)*time.Second)</span><br><span class="line">log.Println(<span class="string">"B"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">log.Printf(<span class="string">"Enter %s"</span>, msg)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"Exit %s, (%s)"</span>, msg, time.Since(start))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">bigSlowOperation()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="defer和return返回值"><a href="#defer和return返回值" class="headerlink" title="defer和return返回值"></a>defer和return返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func double(x,y float64) (ret float64) &#123;</span><br><span class="line">defer func() &#123;ret+=100.0;fmt.Printf(&quot;%.1f+%.1f=%.1f&quot;, x, y, ret)&#125;()</span><br><span class="line">ret = x+y</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">double(1.5, 2.5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defer函数中可以访问函数本身的变量也可以修改返回值。</p><h3 id="循环体中使用defer注意点"><a href="#循环体中使用defer注意点" class="headerlink" title="循环体中使用defer注意点"></a>循环体中使用defer注意点</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _,filename := <span class="keyword">range</span> filenames&#123;</span><br><span class="line">f, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">descriptors</span><br><span class="line"><span class="comment">//...process f...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环体中的defer语句需要特别注意，因为只有在函数执行完毕后，这些被延迟的函数才会被执行。<br>上面的循环可能导致文件描述符耗尽，因为在所有文件都被处理之前，没有文件会被关闭。<br>改进访问是改成调用函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _,filename := <span class="keyword">range</span> filenames&#123;</span><br><span class="line">OpenFile(filename)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="title">error</span></span>  &#123;</span><br><span class="line">f, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">descriptors</span><br><span class="line"><span class="comment">//...process f...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Go基准测试</title>
      <link href="/2018-12-05-Go%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
      <url>/2018-12-05-Go%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="Go基准测试"><a href="#Go基准测试" class="headerlink" title="Go基准测试"></a>Go基准测试</h2><p>记录Go如下编写基准测试用例。</p><a id="more"></a><h4 id="echo-go中定义两个函数"><a href="#echo-go中定义两个函数" class="headerlink" title="echo.go中定义两个函数"></a>echo.go中定义两个函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Echo1</span><span class="params">(args []<span class="keyword">string</span>, step <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">s:=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> _,arg := <span class="keyword">range</span> args&#123;</span><br><span class="line">s += arg + step</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Echo2</span><span class="params">(args []<span class="keyword">string</span>, step <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> strings.Join(args, step)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基准测试用例-echo-test-go"><a href="#基准测试用例-echo-test-go" class="headerlink" title="基准测试用例 echo_test.go"></a>基准测试用例 echo_test.go</h4><p><strong> 基础测试必须以Benchmark开头，功能测试以Test开头</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkEcho1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">args := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++&#123;</span><br><span class="line">Echo1(args, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkEcho2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">args := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++&#123;</span><br><span class="line">Echo2(args, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">guosong$ go test -bench=.</span><br><span class="line"></span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: Test</span><br><span class="line">BenchmarkEcho1-4        10000000               186 ns/op</span><br><span class="line">BenchmarkEcho2-4        20000000                92.7 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      Test    4.044s</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li><strong>可以看出strings.join效率明显高</strong></li><li><strong>文件命名规范，源文件echo.go, 测试文件名称echo_test.go，文件必须以_test结尾</strong></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://jimmysong.io/go-practice/docs/go_unit_test.html" target="_blank" rel="external">https://jimmysong.io/go-practice/docs/go_unit_test.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>L14  Longest Common Prefix</title>
      <link href="/2018-11-13-L14-Longest-Common-Prefix/"/>
      <url>/2018-11-13-L14-Longest-Common-Prefix/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">题目描述</a></h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br></pre></td></tr></table></figure></p><p>Explanation: There is no common prefix among the input strings.<br>Note:All given inputs are in lowercase letters a-z.</p><a id="more"></a><h3 id="解题思路1-两两逐个比较"><a href="#解题思路1-两两逐个比较" class="headerlink" title="解题思路1-两两逐个比较"></a>解题思路1-两两逐个比较</h3><h4 id="思路说明"><a href="#思路说明" class="headerlink" title="思路说明"></a>思路说明</h4><ul><li><p>两个比较，将比较的结果再和第三个比较，然后遍历全部</p></li><li><p>思路说明图</p></li></ul><p><img src="https://leetcode.com/media/original_images/14_basic.png" alt="获取数据组中最长公共前缀的思路1"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>C++  8ms beats 31.62%</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">if</span>(strs.size()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        ret = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;strs.size();i++)&#123;</span><br><span class="line">            ret = longestCommonTwoString(strs[i], ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonTwoString</span><span class="params">(<span class="built_in">string</span> str1, <span class="built_in">string</span> str2)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> l1 = str1.length();</span><br><span class="line">        <span class="keyword">int</span> l2 = str2.length();</span><br><span class="line">        <span class="keyword">int</span> lmin = l1&gt;l2?l2:l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;lmin; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i] != str2[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ret += str1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Golang 实现</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret := strs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k:=<span class="number">1</span>; k&lt;<span class="built_in">len</span>(strs);k++&#123;</span><br><span class="line">str := strs[k]</span><br><span class="line">idx:=<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(ret) &amp;&amp; i&lt;<span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(str, ret[<span class="number">0</span>:i+<span class="number">1</span>])&#123;</span><br><span class="line">idx = i+<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">-1</span> &#123;</span><br><span class="line">ret = <span class="string">""</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ret = ret[<span class="number">0</span>:idx]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据前缀获取的str[0:1]=”a”, str[0:0]为空</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: astr=<span class="string">"a"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: astr[<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: astr[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: astr[<span class="number">0</span>:len(astr)] == astr</span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>Golang和Python支持切片，故使用切片进行判断。</p><h3 id="解题思路2-分支思想"><a href="#解题思路2-分支思想" class="headerlink" title="解题思路2 - 分支思想"></a>解题思路2 - 分支思想</h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_diviso_et_lmpera.png" alt="分支思想"></p><h4 id="Golang-代码实现"><a href="#Golang-代码实现" class="headerlink" title="Golang 代码实现"></a>Golang 代码实现</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> longestCommonPrefixDiv(strs, <span class="number">0</span>, <span class="built_in">len</span>(strs)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefixDiv</span><span class="params">(strs[]<span class="keyword">string</span>, left <span class="keyword">int</span>, right <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left == right&#123;</span><br><span class="line"><span class="keyword">return</span> strs[left]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">mid := (left+right)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">lstr := longestCommonPrefixDiv(strs, left, mid)</span><br><span class="line">rstr := longestCommonPrefixDiv(strs, mid+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">ret := twoWordLCP(lstr, rstr)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoWordLCP</span><span class="params">(lstr <span class="keyword">string</span>, rstr <span class="keyword">string</span>)</span><span class="title">string</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lstr)&gt;<span class="built_in">len</span>(rstr) &#123;</span><br><span class="line">lstr, rstr = rstr, lstr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret := lstr</span><br><span class="line">idx := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(lstr) ;i++  &#123;</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(rstr, ret[<span class="number">0</span>:i+<span class="number">1</span>]) &#123;</span><br><span class="line">idx = i+<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ret[<span class="number">0</span>:idx]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-版本递归"><a href="#C-版本递归" class="headerlink" title="C++ 版本递归"></a>C++ 版本递归</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">if</span>(strs.size()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longestCommonPrefixDiv(strs, <span class="number">0</span>, strs.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefixDiv</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp;strs, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">            <span class="keyword">return</span> strs[left];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> lstr,rstr;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            lstr = longestCommonPrefixDiv(strs,left, mid);</span><br><span class="line">            rstr = longestCommonPrefixDiv(strs,mid+<span class="number">1</span>, right);</span><br><span class="line">            <span class="keyword">return</span> longestCommonTwoString(lstr, rstr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonTwoString</span><span class="params">(<span class="built_in">string</span> str1, <span class="built_in">string</span> str2)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> l1 = str1.length();</span><br><span class="line">        <span class="keyword">int</span> l2 = str2.length();</span><br><span class="line">        <span class="keyword">int</span> lmin = l1&gt;l2?l2:l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;lmin; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i] != str2[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ret += str1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4ms beats 98%</strong></p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L13 Roman to Integer</title>
      <link href="/2018-11-02-L13-Roman-to-Integer/"/>
      <url>/2018-11-02-L13-Roman-to-Integer/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span><br><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br><span class="line">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span><br><span class="line"></span><br><span class="line">通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</span><br><span class="line"></span><br><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br><span class="line">示例 5:</span><br><span class="line"></span><br><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>遍历字符串，比较当前字符和后一个字符，判断是否加减当前值</li><li>主要问题是如何优化时间？</li></ul><h3 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h3><ul><li>Go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line">m[<span class="string">'I'</span>] = <span class="number">1</span></span><br><span class="line">m[<span class="string">'V'</span>] = <span class="number">5</span></span><br><span class="line">m[<span class="string">'X'</span>] = <span class="number">10</span></span><br><span class="line">m[<span class="string">'L'</span>] = <span class="number">50</span></span><br><span class="line">m[<span class="string">'C'</span>] = <span class="number">100</span></span><br><span class="line">m[<span class="string">'D'</span>] = <span class="number">500</span></span><br><span class="line">m[<span class="string">'M'</span>] = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">l := <span class="built_in">len</span>(s)</span><br><span class="line">r := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;l<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> m[s[i]] &gt;= m[s[i+<span class="number">1</span>]]&#123;</span><br><span class="line">r += m[s[i]]</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">r -= m[s[i]]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r += m[s[l<span class="number">-1</span>]]</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        adict=&#123;<span class="string">'I'</span>:<span class="number">1</span>, <span class="string">'V'</span>:<span class="number">5</span>, <span class="string">'X'</span>:<span class="number">10</span>, <span class="string">'L'</span>:<span class="number">50</span>, <span class="string">'C'</span>:<span class="number">100</span>, <span class="string">'D'</span>:<span class="number">500</span>, <span class="string">'M'</span>:<span class="number">1000</span>&#125;</span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        l = len(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> adict[s[i]]&gt;=adict[s[i+<span class="number">1</span>]]:</span><br><span class="line">                r+=adict[s[i]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r-=adict[s[i]]</span><br><span class="line">        r+=adict[s[l<span class="number">-1</span>]]</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; rn_map;</span><br><span class="line"></span><br><span class="line">        rn_map[<span class="string">'I'</span>] = <span class="number">1</span>;</span><br><span class="line">        rn_map[<span class="string">'V'</span>] = <span class="number">5</span>;</span><br><span class="line">        rn_map[<span class="string">'X'</span>] = <span class="number">10</span>;</span><br><span class="line">        rn_map[<span class="string">'L'</span>] = <span class="number">50</span>;</span><br><span class="line">        rn_map[<span class="string">'C'</span>] = <span class="number">100</span>;</span><br><span class="line">        rn_map[<span class="string">'D'</span>] = <span class="number">500</span>;</span><br><span class="line">        rn_map[<span class="string">'M'</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (rn_map[s[i]]&gt;=rn_map[s[i+<span class="number">1</span>]])</span><br><span class="line">                ret += rn_map[s[i]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ret -= rn_map[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        ret += rn_map[s[len<span class="number">-1</span>]];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>golang时间在30ms，cpp时间在100ms左右， python最慢时间在170ms。</p><h3 id="使用hash-map"><a href="#使用hash-map" class="headerlink" title="使用hash map"></a>使用hash map</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; rn_map = &#123;&#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;,&#123;<span class="string">'V'</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;,&#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (rn_map[s[i]]&gt;=rn_map[s[i+<span class="number">1</span>]])</span><br><span class="line">                ret += rn_map[s[i]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ret -= rn_map[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        ret += rn_map[s[len<span class="number">-1</span>]];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用unordered_map时间在52ms，比map时间缩短快一倍。</p><p>对比golang的执行时间，可以看出<a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/02.3.html" target="_blank" rel="external">golang中map也是hash实现</a>。</p><p><strong><a href="https://www.sczyh30.com/posts/C-C/cpp-stl-hashmap/" target="_blank" rel="external">两者区别</a></strong></p><p>STL中，map 对应的数据结构是 红黑树。红黑树是一种近似于平衡的二叉查找树，里面的数据是有序的。在红黑树上做查找操作的时间复杂度为<strong> O(logN)</strong>。而 unordered_map 对应 哈希表，哈希表的特点就是查找效率高，时间复杂度为常数级别 <strong>O(1)</strong>， 而额外空间复杂度则要高出许多。所以对于需要高效率查询的情况，使用 unordered_map 容器。而如果对内存大小比较敏感或者数据存储要求有序的话，则可以用 map 容器。</p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hadoop编写MapReduce程序测试记录</title>
      <link href="/2018-10-16-Hadoop%E7%BC%96%E5%86%99MapReduce%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2018-10-16-Hadoop%E7%BC%96%E5%86%99MapReduce%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>阅读《Hadoop权威指南》第二章有MaxTemperature的MapReduce演示代码说明。<br>本文主要记录自己测试的过程以及遇到的问题：</p><ul><li>如何使用IntelliJ IDEA编写Java版本的MapReduce程序打包以及测试</li><li>如何编写MapReduce任务的Python版本代码以及测试</li><li>如何在Hadoop集群中运行Python和Java两个MapReduce任务</li></ul><a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="源数据"><a href="#源数据" class="headerlink" title="源数据"></a>源数据</h4><p>存放在/user/hadoop/input/inputs.txt中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@qbj3-op-hadoop-001 ~]$ hdfs dfs -cat /user/hadoop/input/inputs.txt</span><br><span class="line">0067011990999991950051507004...9999999N9+00001+99999999999...</span><br><span class="line">0043011990999991950051512004...9999999N9+00221+99999999999...</span><br><span class="line">0043011990999991950051518004...9999999N9-00111+99999999999...</span><br><span class="line">0043012650999991949032412004...0500001N9+01111+99999999999...</span><br><span class="line">0043012650999991949032418004...0500001N9+00781+99999999999...</span><br></pre></td></tr></table></figure><h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h4><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> match</span><br><span class="line"></span><br><span class="line">separator = <span class="string">' '</span></span><br><span class="line">MISSING = <span class="string">"9999"</span></span><br><span class="line"><span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> stdin:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    year = line[<span class="number">15</span>:<span class="number">19</span>]</span><br><span class="line">    airTemperature = line[<span class="number">40</span>:<span class="number">45</span>]</span><br><span class="line">    quality = line[<span class="number">45</span>:<span class="number">46</span>]</span><br><span class="line">    <span class="keyword">if</span> airTemperature != MISSING <span class="keyword">and</span> match(<span class="string">"[01459]"</span>, quality):</span><br><span class="line">        print(year + separator + airTemperature)</span><br></pre></td></tr></table></figure><p>使用本地数据进行Mapper测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@qbj3-op-hadoop-001 20181015]$ cat inputs.txt |python MaxTemperatureMapper.py </span><br><span class="line">1950 +0000</span><br><span class="line">1950 +0022</span><br><span class="line">1950 -0011</span><br><span class="line">1949 +0111</span><br><span class="line">1949 +0078</span><br></pre></td></tr></table></figure><h5 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"></span><br><span class="line">separator = <span class="string">' '</span></span><br><span class="line">previous_key = <span class="keyword">None</span></span><br><span class="line">maxValue = <span class="number">-9999999999999999</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> stdin:</span><br><span class="line">    (key, value) = line.strip().split(separator)</span><br><span class="line">    <span class="keyword">if</span> previous_key <span class="keyword">and</span> previous_key != key:</span><br><span class="line">        print(previous_key + separator + maxValue)</span><br><span class="line">        maxValue = value</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#initial branch</span></span><br><span class="line">        maxValue = str(max(int(maxValue), int(value)))</span><br><span class="line">    previous_key = key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> previous_key:</span><br><span class="line">    print(previous_key + separator + maxValue)</span><br></pre></td></tr></table></figure><p>使用本地数据进行Reducer测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@qbj3-op-hadoop-001 20181015]$ cat inputs.txt |python MaxTemperatureMapper.py |sort|python MaxTemperatureReducer.py </span><br><span class="line">1949 111</span><br><span class="line">1950 22</span><br></pre></td></tr></table></figure><h5 id="在hadoop集群中运行"><a href="#在hadoop集群中运行" class="headerlink" title="在hadoop集群中运行"></a>在hadoop集群中运行</h5><p>需要将Mapper和Reducer的代码发送DataNode节点上,然后在NameNode中运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar /home/hadoop/hadoop-2.9.1/share/hadoop/tools/lib/hadoop-streaming-2.9.1.jar </span><br><span class="line">   -mapper /home/hadoop/opdir/20181015/MaxTemperatureMapper.py </span><br><span class="line">       -reducer /home/hadoop/opdir/20181015/MaxTemperatureReducer.py </span><br><span class="line">       -input /user/hadoop/input/inputs.txt </span><br><span class="line">       -output /user/hadoop/output</span><br></pre></td></tr></table></figure><p><strong>Hadoop提供MapReduce的API接口Hadoop Streaming，运行使用非Java的其他语言实现自己的map和reduce函数。</strong></p><h4 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h4><h5 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h5><ul><li>1、创建Maven Project</li></ul><p><img src="/images/mapreduce/1-maven_create_project.png" alt="maven_project"></p><ul><li>2、设置groupid和artifactsid</li></ul><p><img src="/images/mapreduce/2-setid.png" alt="setid"></p><ul><li>3、maven配置确认</li></ul><p><img src="/images/mapreduce/3-maven-verify.png" alt="3-maven-verify"></p><p>如果修改maven仓库地址，需要修改settings.xml进行更新。</p><ul><li>4、选择构建目录</li></ul><p><img src="/images/mapreduce/4-set_project.png" alt="4-set_project"></p><ul><li>5、创建代码目录结构</li></ul><p><img src="/images/mapreduce/5-mkdir.png" alt="5-mkdir"></p><ul><li>6、选择java目录设置source root</li></ul><p><img src="/images/mapreduce/6-set_source_root.png" alt="6-set_source_root"></p><ul><li>7、创建package</li></ul><p><img src="/images/mapreduce/7-create_package.png" alt="7-create_package"></p><ul><li>8、创建class</li></ul><p><img src="/images/mapreduce/8-create_class.png" alt="8-create_class"></p><ul><li>9、创建input目录</li></ul><p><img src="/images/mapreduce/9-create_input.png" alt="9-create_input"></p><ul><li>10、创建三个类文件</li></ul><p><img src="/images/mapreduce/9-directory_structure.png" alt="9-directory_structure"></p><ul><li>11、执行main设置</li></ul><p><img src="/images/mapreduce/10-set_main_arguments.png" alt="10-set_main_arguments"></p><ul><li>12、本地执行结果</li></ul><p><img src="/images/mapreduce/11-output.png" alt="11-output"></p><h5 id="Java源代码"><a href="#Java源代码" class="headerlink" title="Java源代码"></a>Java源代码</h5><ul><li>MaxTemperatureMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.culiu.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureMapper</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISSING = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String year = line.substring(<span class="number">15</span>,<span class="number">19</span>);</span><br><span class="line">        <span class="keyword">int</span> airTemperature;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(line.charAt(<span class="number">40</span>) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            airTemperature = Integer.parseInt(line.substring(<span class="number">41</span>,<span class="number">45</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            airTemperature = Integer.parseInt(line.substring(<span class="number">40</span>,<span class="number">45</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String quality = line.substring(<span class="number">45</span>, <span class="number">46</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (airTemperature != MISSING &amp;&amp; quality.matches(<span class="string">"[01459]"</span>))&#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(year), <span class="keyword">new</span> IntWritable(airTemperature));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MaxTemperatureReducer.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.culiu.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureReducer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values)&#123;</span><br><span class="line">            maxValue = Math.max(maxValue, value.get());</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> IntWritable(maxValue));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MaxTemperature.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.culiu.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperature</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"Max Temperature"</span>);</span><br><span class="line">        job.setJarByClass(MaxTemperature.class);</span><br><span class="line"></span><br><span class="line">        job.setMapperClass(MaxTemperatureMapper.class);</span><br><span class="line">        job.setReducerClass(MaxTemperatureReducer.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>)? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成jar包"><a href="#生成jar包" class="headerlink" title="生成jar包"></a>生成jar包</h5><ul><li>1、选择Main class</li></ul><p><img src="/images/mapreduce/13-choose-class.png" alt="class_file"></p><ul><li>生成class的目录</li></ul><p><img src="/images/mapreduce/14-class.png" alt="class_directory"></p><ul><li>2、创建jar包</li></ul><p>选择Build-&gt;Build Artifacts</p><p><img src="/images/mapreduce/15-build-jar.png" alt="build_jar"></p><ul><li>3、jar目录结构</li></ul><p><img src="/images/mapreduce/16-jar-package.png" alt="jar"></p><h5 id="在hadoop集群中运行-1"><a href="#在hadoop集群中运行-1" class="headerlink" title="在hadoop集群中运行"></a>在hadoop集群中运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@qbj3-op-hadoop-001 20181016]$ hdfs dfs -rm -r output</span><br><span class="line">Deleted output</span><br><span class="line">[hadoop@qbj3-op-hadoop-001 20181016]$ </span><br><span class="line"></span><br><span class="line">hadoop jar /home/hadoop/opdir/20181016/maxtempature.jar org.culiu.data.MaxTemperature \</span><br><span class="line">                                      ./input/inputs.txt output</span><br><span class="line"></span><br><span class="line">[hadoop@qbj3-op-hadoop-001 20181016]$ hdfs dfs -ls output</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   2 hadoop supergroup          0 2018-10-16 15:21 output/_SUCCESS</span><br><span class="line">-rw-r--r--   2 hadoop supergroup         17 2018-10-16 15:21 output/part-r-00000</span><br><span class="line">[hadoop@qbj3-op-hadoop-001 20181016]$ hdfs dfs -cat output/part-r-00000</span><br><span class="line">1949    111</span><br><span class="line">1950    22</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/qdm12/courses/tree/master/Real%20time%20big%20data%20analytics" target="_blank" rel="external">Real time big data analytics</a></li><li><a href="https://www.cnblogs.com/huxinga/p/6868074.html" target="_blank" rel="external">https://www.cnblogs.com/huxinga/p/6868074.html</a></li><li><a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/" target="_blank" rel="external">Python执行MapReduce任务</a></li></ul>]]></content>
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL set variable的源码实现分析</title>
      <link href="/2018-09-04-MySQL-set-variables%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/"/>
      <url>/2018-09-04-MySQL-set-variables%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>项目在使用Inception的时候，对于大表需要考虑对延迟的控制，会使用到pt-online-schema-change的<a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html#cmdoption-pt-online-schema-change-recursion-method" target="_blank" rel="external">–recursion-method</a>。<br>公司在使用RDS数据库，故对于osc只能使用–recursion-method=dsn这种方式。目前inception不支持这种方式，故研究其代码。<br>同时也是对MySQL set variable这个SQL对应的背后知识有源码层次的了解。<br>本篇目前在RDS数据库情况，使用Inception对于大表alter的操作保护方案，支持指定从库IP列表的dsn方式。</p><a id="more"></a><h3 id="MySQL-gdb调试"><a href="#MySQL-gdb调试" class="headerlink" title="MySQL gdb调试"></a>MySQL gdb调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args /usr/local/mysql/bin/Inception --defaults-file=/usr/local/mysql/etc/inception.cnf</span><br></pre></td></tr></table></figure><p>针对gdb过程中遇到的 optimized out，参照<a href="https://unix.stackexchange.com/questions/187455/how-to-compile-without-optimizations-o0-using-cmake" target="_blank" rel="external">How to compile without optimizations -O0 using CMake</a>进行处理。<br>选择方式在CMakeLists.txt中加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET(CMAKE_CXX_FLAGS &quot;-O0 -g3 -gdwarf-2&quot;)</span><br><span class="line">SET(CMAKE_C_FLAGS &quot;-O0 -g3 -gdwarf-2&quot;)</span><br></pre></td></tr></table></figure><h3 id="以枚举变量为例"><a href="#以枚举变量为例" class="headerlink" title="以枚举变量为例"></a>以枚举变量为例</h3><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><table><thead><tr><th>作用域</th><th>类型</th><th>存储地方</th><th>涉及文件</th></tr></thead><tbody><tr><td>Session</td><td>SESSION_VAR</td><td>struct system_variables</td><td>sql/sql_class.h</td></tr><tr><td>Global</td><td>GLOBAL_VAR</td><td>按照类型存储</td><td>sql/mysqld.cc和sql/mysqld.h</td></tr></tbody></table><h4 id="set-variable调用关系"><a href="#set-variable调用关系" class="headerlink" title="set variable调用关系"></a>set variable调用关系</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  find_type (lib=<span class="number">0xfdf370</span> &lt;Sys_inception_osc_recursion_method+<span class="number">208</span>&gt;, find=<span class="number">0x7ffff0004c00</span> <span class="string">"processlist"</span>, length=<span class="number">11</span>, part_match=<span class="literal">false</span>)</span><br><span class="line">    at /opt/source/inception/sql/strfunc.cc:<span class="number">123</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x0000000000707d0f</span> in Sys_var_typelib::do_check (<span class="keyword">this</span>=<span class="number">0xfdf2a0</span> &lt;Sys_inception_osc_recursion_method&gt;, thd=<span class="number">0x1005f40</span>, var=<span class="number">0x7ffff0004cc0</span>)</span><br><span class="line">    at /opt/source/inception/sql/sys_vars.h:<span class="number">288</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x00000000006299b4</span> in sys_var::check (<span class="keyword">this</span>=<span class="number">0xfdf2a0</span> &lt;Sys_inception_osc_recursion_method&gt;, thd=<span class="number">0x1005f40</span>, var=<span class="number">0x7ffff0004cc0</span>) at /opt/source/inception/sql/set_var.cc:<span class="number">213</span></span><br><span class="line">#<span class="number">3</span>  <span class="number">0x000000000062a742</span> in set_var::check (<span class="keyword">this</span>=<span class="number">0x7ffff0004cc0</span>, thd=<span class="number">0x1005f40</span>) at /opt/source/inception/sql/set_var.cc:<span class="number">624</span></span><br><span class="line">#4  0x00000000006a2fe1 in mysql_execute_inception_set_command (thd=0x1005f40) at /opt/source/inception/sql/sql_parse.cc:4219</span><br><span class="line">#5  0x00000000006a31a7 in mysql_execute_inception_command (thd=0x1005f40) at /opt/source/inception/sql/sql_parse.cc:4255</span><br><span class="line">#6  0x00000000006add22 in mysql_check_command (thd=0x1005f40) at /opt/source/inception/sql/sql_parse.cc:7794</span><br><span class="line">#7  0x00000000006b91e4 in mysql_process_command (thd=0x1005f40, parser_state=0x7ffff7fe8c80) at /opt/source/inception/sql/sql_parse.cc:11636</span><br><span class="line">#8  0x00000000006b9261 in mysql_parse (thd=0x1005f40, length=66, parser_state=0x7ffff7fe8c80) at /opt/source/inception/sql/sql_parse.cc:11664</span><br><span class="line">#<span class="number">9</span>  <span class="number">0x000000000069ad11</span> <span class="function">in <span class="title">dispatch_command</span> <span class="params">(command=COM_QUERY, thd=<span class="number">0x1005f40</span>, packet=<span class="number">0x100a4d1</span> <span class="string">"inception set session inception_osc_recursion_method='processlist'"</span>, </span></span></span><br><span class="line">    packet_length=66) at /opt/source/inception/sql/sql_parse.cc:1059</span><br><span class="line">#10 0x0000000000698a30 in do_command (thd=0x1005f40) at /opt/source/inception/sql/sql_parse.cc:489</span><br><span class="line">#11 0x0000000000673dd0 in do_handle_one_connection (thd_arg=0x1005f40) at /opt/source/inception/sql/sql_connect.cc:926</span><br><span class="line">#12 0x0000000000673b9a in handle_one_connection (arg=0x1005f40) at /opt/source/inception/sql/sql_connect.cc:842</span><br><span class="line">#13 0x00007ffff7bc6e25 in start_thread () from /lib64/libpthread.so.0</span><br><span class="line">#14 0x00007ffff6c96bad in clone () from /lib64/libc.so.6</span><br></pre></td></tr></table></figure><p>在find_type中会对参数进行比较进行比较，判断字符串是否和符合预期，不符合预期报语法错误。</p><h3 id="支持recursion-method"><a href="#支持recursion-method" class="headerlink" title="支持recursion_method"></a>支持recursion_method</h3><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>在Inception中使用Sys_var_enum类型支持recursion_method的设置。<br>这是一个枚举类型，只支持固定的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *osc_recursion_method[]= &#123;<span class="string">"processlist"</span>, <span class="string">"hosts"</span>, <span class="string">"none"</span>, <span class="string">"dsn"</span>, NullS&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Sys_var_enum <span class="title">Sys_inception_osc_recursion_method</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"inception_osc_recursion_method"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"Preferred recursion method used to find slaves."</span>,</span></span></span><br><span class="line">    SESSION_VAR(inception_osc_recursion_method), CMD_LINE(REQUIRED_ARG),</span><br><span class="line">    osc_recursion_method, DEFAULT(recursion_method_processlist), </span><br><span class="line">    NO_MUTEX_GUARD, NOT_IN_BINLOG);</span><br></pre></td></tr></table></figure><p>对osc_recursion_method加dsn之后，可以设置inception_osc_recursion_method为dsn，否则报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; inception set inception_osc_recursion_method='dsn';</span><br><span class="line">Query OK, 0 rows affected (2.88 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; inception get variables 'inception_osc_recursion_method';</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br><span class="line">| inception_osc_recursion_method | dsn   |</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>但是实际pt-osc在设置dsn为如下模式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsn=h=192.40.120.26,P=4500,D=dpadmin,t=dsns_5627</span><br></pre></td></tr></table></figure><p>这个不是一个固定的值，而是随着操作端口的不同，t的值是可以变化的，例如dsns_4300。<br>所以这里无法使用enum类型的，如果支持这种的话，需要使用Sys_var_charptr类型。</p><h4 id="将enum修改为string类型"><a href="#将enum修改为string类型" class="headerlink" title="将enum修改为string类型"></a>将enum修改为string类型</h4><h5 id="两者变量继承关系"><a href="#两者变量继承关系" class="headerlink" title="两者变量继承关系"></a>两者变量继承关系</h5><ul><li>Sys_var_charptr</li></ul><p><img src="/images/inception/Sys_var_charptr.png" alt="Sys_var_charptr"></p><ul><li>Sys_var_enum<br><img src="/images/inception/Sys_var_enum.png" alt="Sys_var_enum"></li></ul><p><strong>Sys_var_charptr只支持Global变量</strong></p><h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><ul><li>修改sql/mysqld.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>* inception_osc_recursion_method;</span><br></pre></td></tr></table></figure><ul><li>修改sql/mysqld.cc<br>Global变量需要修改sql/mysqld.cc，Session级别变量在sql/sql_class.h中定义即可。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Added by Guosong 20180905 START</span></span><br><span class="line"><span class="keyword">char</span>* inception_osc_recursion_method= <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//Added by Guosong 20180905 END</span></span><br></pre></td></tr></table></figure><ul><li>sql/sys_var.cc</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Modified by Guosong START 20180905</span></span><br><span class="line"><span class="comment">/*const char *osc_recursion_method[]= &#123;"processlist", "hosts", "none", "dsn", NullS&#125;;</span></span><br><span class="line"><span class="comment">static Sys_var_charptr Sys_inception_osc_recursion_method(</span></span><br><span class="line"><span class="comment">    "inception_osc_recursion_method",</span></span><br><span class="line"><span class="comment">    "Preferred recursion method used to find slaves.",</span></span><br><span class="line"><span class="comment">    SESSION_VAR(inception_osc_recursion_method), CMD_LINE(REQUIRED_ARG),</span></span><br><span class="line"><span class="comment">    osc_recursion_method, DEFAULT("none"), </span></span><br><span class="line"><span class="comment">    NO_MUTEX_GUARD, NOT_IN_BINLOG);*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Sys_var_charptr <span class="title">Sys_inception_osc_recursion_method</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"inception_osc_recursion_method"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"Preferred recursion method used to find slaves."</span>,</span></span></span><br><span class="line">    GLOBAL_VAR(inception_osc_recursion_method), CMD_LINE(REQUIRED_ARG),</span><br><span class="line">    IN_FS_CHARSET, DEFAULT(<span class="number">0</span>), </span><br><span class="line">    NO_MUTEX_GUARD, NOT_IN_BINLOG);</span><br><span class="line"><span class="comment">//Modified by Guosong END 20190905</span></span><br></pre></td></tr></table></figure><ul><li>修改sql/sql_parse.cc</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sprintf(cmd_line, &quot;--recursion-method=%s&quot;, </span><br><span class="line">¦   inception_osc_recursion_method);</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; inception set inception_osc_recursion_method='processlist';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; inception get variables 'inception_osc_recursion_method';</span><br><span class="line">+<span class="comment">--------------------------------+-------------+</span></span><br><span class="line">| Variable_name                  | Value       |</span><br><span class="line">+<span class="comment">--------------------------------+-------------+</span></span><br><span class="line">| inception_osc_recursion_method | processlist |</span><br><span class="line">+<span class="comment">--------------------------------+-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; inception <span class="keyword">set</span> inception_osc_recursion_method=<span class="string">'dsn=h=10.40.120.26,P=4300,D=dpadmin,t=dsns_5627'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; inception get variables 'inception_osc_recursion_method';</span><br><span class="line">+<span class="comment">--------------------------------+-------------------------------------------------+</span></span><br><span class="line">| Variable_name                  | Value                                           |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------------------------------------+</span></span><br><span class="line">| inception_osc_recursion_method | dsn=h=10.40.120.26,P=4300,D=dpadmin,t=dsns_5627 |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>改成Global ReadOnly更合适 </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Sys_var_charptr <span class="title">Sys_inception_osc_recursion_method</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"inception_osc_recursion_method"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"Preferred recursion method used to find slaves."</span>,</span></span></span><br><span class="line">    READ_ONLY GLOBAL_VAR(inception_osc_recursion_method), CMD_LINE(REQUIRED_ARG),</span><br><span class="line">    IN_FS_CHARSET, DEFAULT(<span class="number">0</span>), </span><br><span class="line">    NO_MUTEX_GUARD, NOT_IN_BINLOG);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; inception get variables 'inception_osc_recursion_method';</span><br><span class="line">+<span class="comment">--------------------------------+----------------------+</span></span><br><span class="line">| Variable_name                  | Value                |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------+</span></span><br><span class="line">| inception_osc_recursion_method | dsn=D=dpadmin,t=dsns |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; inception <span class="keyword">set</span> inception_osc_recursion_method=<span class="string">'processlist'</span>;</span><br><span class="line">ERROR 2575 (HY000): Variable 'inception_osc_recursion_method' is a read only variable.</span><br></pre></td></tr></table></figure><p><strong>这种方式可以支持dns的方式，不过需要操作的主库存在dpadmin.dsns表，其保存对应的从库IP列表，用于操作大表的保护工作。</strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/slwang001/article/details/77343172" target="_blank" rel="external">https://blog.csdn.net/slwang001/article/details/77343172</a></li><li><a href="http://ourmysql.com/archives/945" target="_blank" rel="external">http://ourmysql.com/archives/945</a></li><li><a href="https://www.cnblogs.com/cchust/p/3252117.html" target="_blank" rel="external">https://www.cnblogs.com/cchust/p/3252117.html</a></li><li><a href="https://edu.aliyun.com/a/27029?spm=5176.11182482.0.0.Z8MZrV" target="_blank" rel="external">https://edu.aliyun.com/a/27029?spm=5176.11182482.0.0.Z8MZrV</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/8.0.12/classSys__var__enum.html" target="_blank" rel="external">https://dev.mysql.com/doc/dev/mysql-server/8.0.12/classSys__var__enum.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mariadb原理和实现Notes</title>
      <link href="/2018-08-31-Mariadb%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0Notes/"/>
      <url>/2018-08-31-Mariadb%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0Notes/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学习Mariadb原理和实现，记录一些notes。</p><a id="more"></a><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h3 id="init-alloc-root测试"><a href="#init-alloc-root测试" class="headerlink" title="init_alloc_root测试"></a>init_alloc_root测试</h3><ul><li>test.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;my_sys.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MEM_ROOT mem_root;</span><br><span class="line">    init_alloc_root(&amp;mem_root, <span class="number">4096</span>, <span class="number">0</span>,  MY_THREAD_SPECIFIC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char *p1 = (char*)alloc_root(&amp;mem_root, 128);</span></span><br><span class="line">    <span class="comment">//char *p2 = (char*)alloc_root(&amp;mem_root, 64);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"HelloWorld!\n"</span>);</span><br><span class="line"></span><br><span class="line">    free_root(&amp;mem_root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Makefile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_INCLUDE= -I /home/guosong/source/mariadb-10.0.36/include</span><br><span class="line">MYSQL_LIB = /home/guosong/source/mariadb-10.0.36/libmysql/libmysqlclient.a</span><br><span class="line">WALL = -fPIC -fno-exceptions -fno-rtti -g -DENABLED_DEBUG_SYNC -ggdb3 -DSAFE_MUTEX -DSAFEMALLOC -Wall -Wextra -Wformat-security -Wvla -Woverloaded-virtual -Wno-unused-parameter </span><br><span class="line">GCC=&quot;c++&quot;</span><br><span class="line"></span><br><span class="line">test:test.c</span><br><span class="line">        $(GCC)  -g $(WALL) -c test.c $(MYSQL_INCLUDE)</span><br><span class="line">        $(GCC) -o test test.o $(MYSQL_LIB) -lpthread -lz -lm -ldl -lssl -lcrypto  -ljemalloc</span><br><span class="line">clean:</span><br><span class="line">        rm -rf test *.o</span><br></pre></td></tr></table></figure><ul><li>方法</li></ul><p>通过修改client/CMakeList.txt成功编译模拟编译此文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ADD_EXECUTABLE(guosongtest guosongtest.c)</span><br><span class="line">TARGET_LINK_LIBRARIES(guosongtest mysqlclient)</span><br></pre></td></tr></table></figure></p><p>然后查看其CMakeFiles/guosongtest.dir/link.txt找到其link的方式生成上面的Makefile</p><ul><li>gdb</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l</span><br><span class="line">1       #include &lt;stdio.h&gt;</span><br><span class="line">2       #include &lt;my_sys.h&gt;</span><br><span class="line">3</span><br><span class="line">4       int main()&#123;</span><br><span class="line">5           MEM_ROOT mem_root;</span><br><span class="line">6           init_alloc_root(&amp;mem_root, 4096, 4096,  MY_THREAD_SPECIFIC);</span><br><span class="line">7</span><br><span class="line">8           char *p1 = (char*)alloc_root(&amp;mem_root, 128);</span><br><span class="line">9           char *p2 = (char*)alloc_root(&amp;mem_root, 64);</span><br><span class="line">10          printf(&quot;HelloWorld!\n&quot;);</span><br><span class="line">(gdb) b 6</span><br><span class="line">Breakpoint 1 at 0x4025f8: file test.c, line 6.</span><br><span class="line">(gdb) s</span><br><span class="line">The program is not being run.</span><br><span class="line">(gdb) r</span><br><span class="line">Breakpoint 1, main () at test.c:6</span><br><span class="line">6           init_alloc_root(&amp;mem_root, 4096, 4096,  MY_THREAD_SPECIFIC);</span><br><span class="line">(gdb) s</span><br><span class="line">init_alloc_root (mem_root=0x7fffffffe040, block_size=4096, pre_alloc_size=4096, my_flags=65536) at /home/guosong/source/mariadb-10.0.36/mysys/my_alloc.c:60</span><br><span class="line">60        DBUG_ENTER(&quot;init_alloc_root&quot;);</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  init_alloc_root (mem_root=0x7fffffffe040, block_size=4096, pre_alloc_size=4096, my_flags=65536) at /home/guosong/source/mariadb-10.0.36/mysys/my_alloc.c:60</span><br><span class="line">#1  0x0000000000402613 in main () at test.c:6</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Django使用多个数据库</title>
      <link href="/2018-07-10-Django%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018-07-10-Django%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在的Django项目需要使用到多个数据库，一个是Django自带的库，一个是元数据库。<br>本文使用Django自带的ORM模式访问多个库。演示的项目基于<a href="https://github.com/lazzyfu/AuditSQL" target="_blank" rel="external">SQL审核项目</a>基础上添加个性化功能。</p><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建新的app"><a href="#创建新的app" class="headerlink" title="创建新的app"></a>创建新的app</h3><p>Project的当前路径为/data/web/AuditSQL，该Project存在多个app，统一放到一个目录下面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@qbj3-op-wiki-00 apps]# pwd              </span><br><span class="line">/data/web/AuditSQL/apps</span><br><span class="line">[root@qbj3-op-wiki-00 apps]# tree -L 1</span><br><span class="line">.</span><br><span class="line">|-- dpadmin</span><br><span class="line">|-- __init__.py</span><br><span class="line">|-- mstats</span><br><span class="line">|-- project_manager</span><br><span class="line">|-- __pycache__</span><br><span class="line">|-- scheduled_tasks</span><br><span class="line">`-- user_manager</span><br></pre></td></tr></table></figure><p>所有app放到固定的目录下，故在startapp的时候需要指定目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp dpadmin /data/web/AuditSQL/apps/dpadmin</span><br></pre></td></tr></table></figure><h3 id="将新app添加到project中"><a href="#将新app添加到project中" class="headerlink" title="将新app添加到project中"></a>将新app添加到project中</h3><p>修改AuditSQL/settings.py中INSTALLED_APPS添加如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [ </span><br><span class="line">...</span><br><span class="line">    <span class="string">'scheduled_tasks'</span>,</span><br><span class="line">    <span class="string">'dpadmin'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="修改DATABASES添加多个DB"><a href="#修改DATABASES添加多个DB" class="headerlink" title="修改DATABASES添加多个DB"></a>修改DATABASES添加多个DB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment">#'default': &#123;&#125;,</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'auditsql'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123.com'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'init_command'</span>: <span class="string">"SET sql_mode='STRICT_TRANS_TABLES'"</span>,</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8mb4'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'dpadmin'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'dpadmin'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'dba'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'XXXXXXXXXXX'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">4300</span>,</span><br><span class="line">       <span class="string">'PASSWORD'</span>: <span class="string">'XXXXXXXXXXXXXXXXXXX'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>:&#123;</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建APP和DB的映射关系</span></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">'AuditSQL.database_router.DatabaseAppsRouter'</span>]</span><br><span class="line">DATABASE_APPS_MAPPING = &#123;</span><br><span class="line">    <span class="string">'scheduled_tasks'</span>:<span class="string">'default'</span>,</span><br><span class="line">    <span class="string">'dpadmin'</span>: <span class="string">'dpadmin'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加路由关系"><a href="#添加路由关系" class="headerlink" title="添加路由关系"></a>添加路由关系</h3><p>在AuditSQL Project目录文件夹中创建database_router.py文件，文件内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line">DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseAppsRouter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A router to control all database operations on models for different</span></span><br><span class="line"><span class="string">    databases.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    In case an app is not set in settings.DATABASE_APPS_MAPPING, the router</span></span><br><span class="line"><span class="string">    will fallback to the `default` database.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Settings example:</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    DATABASE_APPS_MAPPING = &#123;'app1': 'db1', 'app2': 'db2'&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self, model, **hints)</span>:</span></span><br><span class="line">        <span class="string">""""Point all read operations to the specific database."""</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self, model, **hints)</span>:</span></span><br><span class="line">        <span class="string">"""Point all write operations to the specific database."""</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_relation</span><span class="params">(self, obj1, obj2, **hints)</span>:</span></span><br><span class="line">        <span class="string">"""Allow any relation between apps that use the same database."""</span></span><br><span class="line">        db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)</span><br><span class="line">        db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)</span><br><span class="line">        <span class="keyword">if</span> db_obj1 <span class="keyword">and</span> db_obj2:</span><br><span class="line">            <span class="keyword">if</span> db_obj1 == db_obj2:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># for Django 1.4 - Django 1.6</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_syncdb</span><span class="params">(self, db, model)</span>:</span></span><br><span class="line">        <span class="string">"""Make sure that apps only appear in the related database."""</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(model._meta.app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Django 1.7 - Django 1.11</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span><span class="params">(self, db, app_label, model_name=None, **hints)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> db, app_label, model_name, hints</span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="通过inspectdb获取指定数据库对应models-py文件"><a href="#通过inspectdb获取指定数据库对应models-py文件" class="headerlink" title="通过inspectdb获取指定数据库对应models.py文件"></a>通过inspectdb获取指定数据库对应models.py文件</h3><p>从<a href="https://docs.djangoproject.com/en/1.9/ref/django-admin/#inspectdb" target="_blank" rel="external">Django文档</a>中可知:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--database DATABASE</span><br><span class="line"></span><br><span class="line">Specifies the database to introspect. Defaults to default.</span><br></pre></td></tr></table></figure><p>默认只创建default，故创建dpadmin新APP对应的models.py文件命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#默认创建该库下面对应的所有表</span><br><span class="line">python manage.py inspectdb --database &apos;dpadmin&apos;  &gt; models.py</span><br><span class="line"></span><br><span class="line">#创建指定表node_info</span><br><span class="line">python manage.py inspectdb --database &apos;dpadmin&apos; node_info &gt; models.py</span><br></pre></td></tr></table></figure><p>将该models.py拷贝到dpadmin新App下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv models.py ./apps/dpadmin/models.py</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用shell交互模式进行测试，并使用ipython终端利于tab键提示和补全关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(venv_py36) [root@d89b6a65640c AuditSQL]<span class="comment"># python manage.py shell -i ipython</span></span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (default, May <span class="number">17</span> <span class="number">2018</span>, <span class="number">06</span>:<span class="number">03</span>:<span class="number">23</span>) </span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">6.4</span><span class="number">.0</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> dpadmin.models <span class="keyword">import</span> NodeInfo</span><br><span class="line">In [<span class="number">4</span>]: NodeInfo.objects.count()</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">121</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://code.ziqiangxuetang.com/django/django-multi-database.html" target="_blank" rel="external">Django 多数据库联用</a></li><li><a href="https://stackoverflow.com/questions/37581885/django-using-more-than-one-database-with-inspectdb" target="_blank" rel="external">Django inspectdb指定单个DB</a></li></ul>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python性能分析</title>
      <link href="/2018-05-18-Python%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2018-05-18-Python%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="Python性能分析"><a href="#Python性能分析" class="headerlink" title="Python性能分析"></a>Python性能分析</h3><ul><li><a href="http://tech.glowing.com/cn/python-web-performance-optimization/" target="_blank" rel="external">Python web 应用性能调优</a></li><li><a href="http://tech.glowing.com/cn/python-profiling/" target="_blank" rel="external">Python profiling</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Profile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Graph 深度遍历</title>
      <link href="/2018-05-18-graph-dfs/"/>
      <url>/2018-05-18-graph-dfs/</url>
      <content type="html"><![CDATA[<h3 id="图表示"><a href="#图表示" class="headerlink" title="图表示"></a><a href="https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/" target="_blank" rel="external">图表示</a></h3><ul><li>邻接矩阵</li><li>邻接链表</li></ul><h3 id="图遍历"><a href="#图遍历" class="headerlink" title="图遍历"></a>图遍历</h3><ul><li>BFS 使用队列</li><li>DFS 使用栈<a id="more"></a></li></ul><h3 id="DFS-Python实现"><a href="#DFS-Python实现" class="headerlink" title="DFS Python实现"></a>DFS Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.graph = defaultdict(list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span><span class="params">(self, u, v)</span>:</span></span><br><span class="line">        self.graph[u].append(v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFSUtils</span><span class="params">(self, v, visited)</span>:</span></span><br><span class="line">        visited[v] = <span class="keyword">True</span></span><br><span class="line">        print(v)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.graph[v]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                self.DFSUtils(i, visited)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        visited = [<span class="keyword">False</span>] * len(self.graph)</span><br><span class="line">        print(<span class="string">"DFS results:"</span>)</span><br><span class="line">        self.DFSUtils(v, visited)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        visited = [<span class="keyword">False</span>] * len(self.graph)</span><br><span class="line">        queue = [v]</span><br><span class="line">        visited[v] = <span class="keyword">True</span></span><br><span class="line">        print(<span class="string">"BFS results:"</span>)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            s = queue.pop(<span class="number">0</span>)</span><br><span class="line">            print(s, <span class="string">" "</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.graph[s]:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">                    queue.append(i)</span><br><span class="line">                    visited[i] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    g = Graph()</span><br><span class="line">    g.addEdge(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g.addEdge(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    g.addEdge(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    g.addEdge(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    g.addEdge(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Following is DFS from (staring from vertex 2)"</span>)</span><br><span class="line">    g.DFS(<span class="number">2</span>)</span><br><span class="line">    g.BFS(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vimgdb</title>
      <link href="/2018-04-09-vimgdb/"/>
      <url>/2018-04-09-vimgdb/</url>
      <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>单独使用gdb时候，需要通过另外一个窗口看代码。有点麻烦，所以产生了vimgdb，vim和gdb的结合。</p><h3 id="配置vimgdb"><a href="#配置vimgdb" class="headerlink" title="配置vimgdb"></a>配置vimgdb</h3><ul><li><a href="https://github.com/cpiger/vimgdb-for-vim7.4" target="_blank" rel="external">https://github.com/cpiger/vimgdb-for-vim7.4</a></li><li><a href="https://blog.easwy.com/archives/advanced-vim-skills-vim-gdb-vimgdb-faq/" target="_blank" rel="external">https://blog.easwy.com/archives/advanced-vim-skills-vim-gdb-vimgdb-faq/</a></li></ul><a id="more"></a><p><strong>检查vim是否包括gdb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[guosong@dev-00 11:04:34 ~]$vim --version|grep gdb</span><br><span class="line">+cindent         +gdb             +multi_lang      +termresponse</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>启动vimgdb之后按space键</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file /home/guosong/mysql5627/bin/mysqld</span><br><span class="line">run --defaults-file=/home/guosong/mysql5627/etc/my5627.cnf</span><br></pre></td></tr></table></figure><ul><li>打断点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b do_command</span><br><span class="line">b dispatch_command</span><br><span class="line">b mysql_parse</span><br><span class="line">b mysql_execute_command</span><br></pre></td></tr></table></figure><h3 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h3><p><img src="/images/vimgdb/usage.png" alt="demo"></p><p>使用快捷键将屏幕竖着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl+w</span><br><span class="line">shift+l</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cache2go源码阅读</title>
      <link href="/2018-03-14-cache2go%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2018-03-14-cache2go%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p><a href="https://github.com/muesli/cache2go" target="_blank" rel="external">cache2go</a>是具有并发安全golang缓存库，其key具有过期特性。<br>本文研究其代码，学习Go的并发编程。</p><a id="more"></a><h3 id="主要类和函数说明"><a href="#主要类和函数说明" class="headerlink" title="主要类和函数说明"></a>主要类和函数说明</h3><h4 id="创建CacheTable"><a href="#创建CacheTable" class="headerlink" title="创建CacheTable"></a>创建CacheTable</h4><p>创建以myCache为名字的CacheTable结构指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accessing a new cache table for the first time will create it.</span></span><br><span class="line">cache := cache2go.Cache(<span class="string">"myCache"</span>)</span><br></pre></td></tr></table></figure><p>Cache在<a href="https://github.com/muesli/cache2go/blob/master/cache.go" target="_blank" rel="external">cache.go</a>中进行定义。<br>以myCache作为key的map，其value为CacheTable结构体指针，支持多个CacheTable，其对应的名字为string类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*CacheTable)</span><br></pre></td></tr></table></figure><p>如果这个map中不存在myCache的话，重新创建一个。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cache</span><span class="params">(table <span class="keyword">string</span>)</span> *<span class="title">CacheTable</span></span> &#123;</span><br><span class="line">mutex.RLock()</span><br><span class="line">t, ok := cache[table]</span><br><span class="line">mutex.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">mutex.Lock()</span><br><span class="line">t, ok = cache[table]</span><br><span class="line"><span class="comment">// Double check whether the table exists or not.</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t = &amp;CacheTable&#123;</span><br><span class="line">name:  table,</span><br><span class="line">items: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem),</span><br><span class="line">&#125;</span><br><span class="line">cache[table] = t</span><br><span class="line">&#125;</span><br><span class="line">mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些涉及到RLock以及Lock，从而保证并行安全，<a href="https://golang.org/pkg/sync/#RWMutex.RLock" target="_blank" rel="external">RLock</a>为读锁, <a href="https://golang.org/pkg/sync/#Mutex.Lock" target="_blank" rel="external">Lock</a>为互斥锁。<br>判断以table为名对应CacheTable结构体是否存在使用RLock，如果不存在，使用Mutex进行创建。这里涉及到CacheTable以及CacheItem两个struct，其关系如下图。</p><p><img src="/images/cache2go/relation.png" alt="relation"></p><h4 id="CacheTable"><a href="#CacheTable" class="headerlink" title="CacheTable"></a>CacheTable</h4><h4 id="CacheTable定义"><a href="#CacheTable定义" class="headerlink" title="CacheTable定义"></a>CacheTable定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CacheTable <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.RWMutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// The table's name.</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line"><span class="comment">// All cached items.</span></span><br><span class="line">items <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timer responsible for triggering cleanup.</span></span><br><span class="line">cleanupTimer *time.Timer</span><br><span class="line"><span class="comment">// Current timer duration.</span></span><br><span class="line">cleanupInterval time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// The logger used for this table.</span></span><br><span class="line">logger *log.Logger</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callback method triggered when trying to load a non-existing key.</span></span><br><span class="line">loadData <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span></span><br><span class="line"><span class="function">// <span class="title">Callback</span> <span class="title">method</span> <span class="title">triggered</span> <span class="title">when</span> <span class="title">adding</span> <span class="title">a</span> <span class="title">new</span> <span class="title">item</span> <span class="title">to</span> <span class="title">the</span> <span class="title">cache</span>.</span></span><br><span class="line"><span class="function"><span class="title">addedItem</span> <span class="title">func</span><span class="params">(item *CacheItem)</span></span></span><br><span class="line"><span class="function">// <span class="title">Callback</span> <span class="title">method</span> <span class="title">triggered</span> <span class="title">before</span> <span class="title">deleting</span> <span class="title">an</span> <span class="title">item</span> <span class="title">from</span> <span class="title">the</span> <span class="title">cache</span>.</span></span><br><span class="line"><span class="function"><span class="title">aboutToDeleteItem</span> <span class="title">func</span><span class="params">(item *CacheItem)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="CacheTable-结构体说明"><a href="#CacheTable-结构体说明" class="headerlink" title="CacheTable 结构体说明"></a>CacheTable 结构体说明</h4><table><thead><tr><th>成员</th><th>成员类型</th><th>说明</th></tr></thead><tbody><tr><td>sync.RWMutex</td><td></td><td>继承一个读写锁</td></tr><tr><td>name</td><td>string</td><td>cacheTable名称</td></tr><tr><td>items</td><td>map类型，key为任意类型，value为CacheItem</td><td>cacheTable的各个item</td></tr><tr><td>cleanupTimer</td><td>time.Timer</td><td>定时器，用于过期处理</td></tr><tr><td>cleanupInterval</td><td>time.Duration</td><td>定时扫描interval</td></tr><tr><td>logger</td><td>log.Logger</td><td>日志句柄</td></tr><tr><td>loadData</td><td>function</td><td>回调函数，加载key使用</td></tr><tr><td>addedItem</td><td>function</td><td>添加一个item，参数为CacheItem</td></tr><tr><td>aboutToDeleteItem</td><td>function</td><td>在删除item之前回调</td></tr></tbody></table><h4 id="CacheTable函数"><a href="#CacheTable函数" class="headerlink" title="CacheTable函数"></a>CacheTable函数</h4><ul><li>Count</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Count returns how many items are currently stored in the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Count</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">table.RLock()</span><br><span class="line"><span class="keyword">defer</span> table.RUnlock()</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(table.items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这里加读锁，返回map的长度，比较简单。</code></pre><ul><li>Foreach</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foreach all items</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Foreach</span><span class="params">(trans <span class="keyword">func</span>(key <span class="keyword">interface</span>&#123;&#125;, item *CacheItem)</span>)</span> &#123;</span><br><span class="line">table.RLock()</span><br><span class="line"><span class="keyword">defer</span> table.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</span><br><span class="line">trans(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>Foreach读操作，遍历map，并使用trans回调函数进行处理。</code></pre><ul><li>Set Callback</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetAddedItemCallback configures a callback, which will be called every time</span></span><br><span class="line"><span class="comment">// a new item is added to the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAddedItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"><span class="keyword">defer</span> table.Unlock()</span><br><span class="line">table.addedItem = f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetAboutToDeleteItemCallback configures a callback, which will be called</span></span><br><span class="line"><span class="comment">// every time an item is about to be removed from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAboutToDeleteItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"><span class="keyword">defer</span> table.Unlock()</span><br><span class="line">table.aboutToDeleteItem = f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetLogger sets the logger to be used by this cache table.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetLogger</span><span class="params">(logger *log.Logger)</span></span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"><span class="keyword">defer</span> table.Unlock()</span><br><span class="line">table.logger = logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>使用Mutex锁。</code></pre><ul><li>expirationCheck</li></ul><p>每次过期检查的时候，使用table.Lock进行控制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// To be more accurate with timers, we would need to update 'now' on every</span></span><br><span class="line"><span class="comment">// loop iteration. Not sure it's really efficient though.</span></span><br><span class="line">now := time.Now()</span><br><span class="line">smallestDuration := <span class="number">0</span> * time.Second</span><br><span class="line"><span class="keyword">for</span> key, item := <span class="keyword">range</span> table.items &#123;</span><br><span class="line"><span class="comment">// Cache values so we don't keep blocking the mutex.</span></span><br><span class="line">item.RLock()</span><br><span class="line">lifeSpan := item.lifeSpan</span><br><span class="line">accessedOn := item.accessedOn</span><br><span class="line">item.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lifeSpan == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> now.Sub(accessedOn) &gt;= lifeSpan &#123;</span><br><span class="line"><span class="comment">// Item has excessed its lifespan.</span></span><br><span class="line">table.deleteInternal(key)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Find the item chronologically closest to its end-of-lifespan.</span></span><br><span class="line"><span class="keyword">if</span> smallestDuration == <span class="number">0</span> || lifeSpan-now.Sub(accessedOn) &lt; smallestDuration &#123;</span><br><span class="line">smallestDuration = lifeSpan - now.Sub(accessedOn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历table.items这个map，判断当前时间时间和每个item的access时间以及生命周期liftSpan，如果过期，将其删除，否则判断全局最小时间smallestDuration，用于下次过期检查。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Setup the interval for the next cleanup run.</span></span><br><span class="line">table.cleanupInterval = smallestDuration</span><br><span class="line"><span class="keyword">if</span> smallestDuration &gt; <span class="number">0</span> &#123;</span><br><span class="line">table.cleanupTimer = time.AfterFunc(smallestDuration, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> table.expirationCheck()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到<a href="https://mmcgrana.github.io/2012/09/go-by-example-timers-and-tickers.html" target="_blank" rel="external">time定时器</a>。<br>定时器等到smallestDuration之后，再进行新一轮的过期检查。</p><ul><li>deleteInternal</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">deleteInternal</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">r, ok := table.items[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cache value so we don't keep blocking the mutex.</span></span><br><span class="line">aboutToDeleteItem := table.aboutToDeleteItem</span><br><span class="line">table.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger callbacks before deleting an item from cache.</span></span><br><span class="line"><span class="keyword">if</span> aboutToDeleteItem != <span class="literal">nil</span> &#123;</span><br><span class="line">aboutToDeleteItem(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.RLock()</span><br><span class="line"><span class="keyword">defer</span> r.RUnlock()</span><br><span class="line"><span class="keyword">if</span> r.aboutToExpire != <span class="literal">nil</span> &#123;</span><br><span class="line">r.aboutToExpire(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.Lock()</span><br><span class="line">table.log(<span class="string">"Deleting item with key"</span>, key, <span class="string">"created on"</span>, r.createdOn, <span class="string">"and hit"</span>, r.accessCount, <span class="string">"times from table"</span>, table.name)</span><br><span class="line"><span class="built_in">delete</span>(table.items, key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断要删除的key是否存在。<br>存在的话，先解锁（table.Unlock），这里是为了不影响其他并发。回调删除前item需要做的函数。<br>同样适用读锁，调用aboutToExpire(key)。这些操作完成之后，再table.Lock，真正进行map删除。</p><ul><li>addInternal</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">addInternal</span><span class="params">(item *CacheItem)</span></span> &#123;</span><br><span class="line"><span class="comment">// Careful: do not run this method unless the table-mutex is locked!</span></span><br><span class="line"><span class="comment">// It will unlock it for the caller before running the callbacks and checks</span></span><br><span class="line">table.log(<span class="string">"Adding item with key"</span>, item.key, <span class="string">"and lifespan of"</span>, item.lifeSpan, <span class="string">"to table"</span>, table.name)</span><br><span class="line">table.items[item.key] = item</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cache values so we don't keep blocking the mutex.</span></span><br><span class="line">expDur := table.cleanupInterval</span><br><span class="line">addedItem := table.addedItem</span><br><span class="line">table.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger callback after adding an item to cache.</span></span><br><span class="line"><span class="keyword">if</span> addedItem != <span class="literal">nil</span> &#123;</span><br><span class="line">addedItem(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we haven't set up any expiration check timer or found a more imminent item.</span></span><br><span class="line"><span class="keyword">if</span> item.lifeSpan &gt; <span class="number">0</span> &amp;&amp; (expDur == <span class="number">0</span> || item.lifeSpan &lt; expDur) &#123;</span><br><span class="line">table.expirationCheck()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一样，添加操作前提是已经获取table.Lock。调用addedItem。</p><ul><li>Add和Delete封装 </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Add</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">item := NewCacheItem(key, lifeSpan, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add item to cache.</span></span><br><span class="line">table.Lock()</span><br><span class="line">table.addInternal(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete an item from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"><span class="keyword">defer</span> table.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> table.deleteInternal(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Exists 和NotFoundAdd</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exists returns whether an item exists in the cache. Unlike the Value method</span></span><br><span class="line"><span class="comment">// Exists neither tries to fetch data via the loadData callback nor does it</span></span><br><span class="line"><span class="comment">// keep the item alive in the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Exists</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">table.RLock()</span><br><span class="line"><span class="keyword">defer</span> table.RUnlock()</span><br><span class="line">_, ok := table.items[key]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NotFoundAdd tests whether an item not found in the cache. Unlike the Exists</span></span><br><span class="line"><span class="comment">// method this also adds data if they key could not be found.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">NotFoundAdd</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := table.items[key]; ok &#123;</span><br><span class="line">table.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item := NewCacheItem(key, lifeSpan, data)</span><br><span class="line">table.addInternal(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Value</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Value returns an item from the cache and marks it to be kept alive. You can</span></span><br><span class="line"><span class="comment">// pass additional arguments to your DataLoader callback function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">table.RLock()</span><br><span class="line">r, ok := table.items[key]</span><br><span class="line">loadData := table.loadData</span><br><span class="line">table.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// Update access counter and timestamp.</span></span><br><span class="line">r.KeepAlive()</span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Item doesn't exist in cache. Try and fetch it with a data-loader.</span></span><br><span class="line"><span class="keyword">if</span> loadData != <span class="literal">nil</span> &#123;</span><br><span class="line">item := loadData(key, args...)</span><br><span class="line"><span class="keyword">if</span> item != <span class="literal">nil</span> &#123;</span><br><span class="line">table.Add(key, item.lifeSpan, item.data)</span><br><span class="line"><span class="keyword">return</span> item, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFoundOrLoadable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据key获取相关CacheItem，如果key存在的话，更新相关访问时间r.KeepAlive；如果不存在，判断是否设置loadData回调函数，如果设置的话，按照loadData规则创建相关key。</p><p>如例子中使用这种方法创建key：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cache := cache2go.Cache(<span class="string">"myCache"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The data loader gets called automatically whenever something</span></span><br><span class="line"><span class="comment">// tries to retrieve a non-existing key from the cache.</span></span><br><span class="line">cache.SetDataLoader(<span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">cache2go</span>.<span class="title">CacheItem</span></span> &#123;</span><br><span class="line"><span class="comment">// Apply some clever loading logic here, e.g. read values for</span></span><br><span class="line"><span class="comment">// this key from database, network or file.</span></span><br><span class="line">val := <span class="string">"This is a test with key "</span> + key.(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This helper method creates the cached item for us. Yay!</span></span><br><span class="line">item := cache2go.NewCacheItem(key, <span class="number">0</span>, val)</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let's retrieve a few auto-generated items from the cache.</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">res, err := cache.Value(<span class="string">"someKey_"</span> + strconv.Itoa(i))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found value in cache:"</span>, res.Data())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Error retrieving value from cache:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Flush</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Flush deletes all items from this cache table.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Flush</span><span class="params">()</span></span> &#123;</span><br><span class="line">table.Lock()</span><br><span class="line"><span class="keyword">defer</span> table.Unlock()</span><br><span class="line"></span><br><span class="line">table.log(<span class="string">"Flushing table"</span>, table.name)</span><br><span class="line"></span><br><span class="line">table.items = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem)</span><br><span class="line">table.cleanupInterval = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> table.cleanupTimer != <span class="literal">nil</span> &#123;</span><br><span class="line">table.cleanupTimer.Stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flush key重新分配items，历史的交给Go内存回收。</p><ul><li>log</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Internal logging method for convenience.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">log</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> table.logger == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.logger.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志封装，使用Println。</p><ul><li>MostAccessed</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CacheItemPair maps key to access counter</span></span><br><span class="line"><span class="keyword">type</span> CacheItemPair <span class="keyword">struct</span> &#123;</span><br><span class="line">Key         <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">AccessCount <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CacheItemPairList is a slice of CacheIemPairs that implements sort.</span></span><br><span class="line"><span class="comment">// Interface to sort by AccessCount.</span></span><br><span class="line"><span class="keyword">type</span> CacheItemPairList []CacheItemPair</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; p[i], p[j] = p[j], p[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(p) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> p[i].AccessCount &gt; p[j].AccessCount &#125;</span><br></pre></td></tr></table></figure><p>创建CacheItemPair结构体，统计最常访问的key，实现Swap|Len|Less接口函数，为了sort.Sort排序创建仿函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MostAccessed returns the most accessed items in this cache table</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">MostAccessed</span><span class="params">(count <span class="keyword">int64</span>)</span> []*<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">table.RLock()</span><br><span class="line"><span class="keyword">defer</span> table.RUnlock()</span><br><span class="line"></span><br><span class="line">p := <span class="built_in">make</span>(CacheItemPairList, <span class="built_in">len</span>(table.items))</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</span><br><span class="line">p[i] = CacheItemPair&#123;k, v.accessCount&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r []*CacheItem</span><br><span class="line">c := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> p &#123;</span><br><span class="line"><span class="keyword">if</span> c &gt;= count &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item, ok := table.items[v.Key]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">r = <span class="built_in">append</span>(r, item)</span><br><span class="line">&#125;</span><br><span class="line">c++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用读锁，将map中items转换为CacheItemPair进行排序，返回访问次数大于count的CacheItem。</p><h4 id="CacheItem"><a href="#CacheItem" class="headerlink" title="CacheItem"></a>CacheItem</h4><h5 id="CacheItem-struct说明"><a href="#CacheItem-struct说明" class="headerlink" title="CacheItem struct说明"></a>CacheItem struct说明</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CacheItem is an individual cache item</span></span><br><span class="line"><span class="comment">// Parameter data contains the user-set value in the cache.</span></span><br><span class="line"><span class="keyword">type</span> CacheItem <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.RWMutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// The item's key.</span></span><br><span class="line">key <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// The item's data.</span></span><br><span class="line">data <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// How long will the item live in the cache when not being accessed/kept alive.</span></span><br><span class="line">lifeSpan time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creation timestamp.</span></span><br><span class="line">createdOn time.Time</span><br><span class="line"><span class="comment">// Last access timestamp.</span></span><br><span class="line">accessedOn time.Time</span><br><span class="line"><span class="comment">// How often the item was accessed.</span></span><br><span class="line">accessCount <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Callback method triggered right before removing the item from the cache</span></span><br><span class="line">aboutToExpire <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>成员名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>sync.RWMutex</td><td></td><td>继承读写锁</td></tr><tr><td>key</td><td>interface{}</td><td>key支持任意类型</td></tr><tr><td>data</td><td>interace{}</td><td>value支持任意类型</td></tr><tr><td>lifSpan</td><td>time.Duration</td><td>寿命周期，单位为纳秒</td></tr><tr><td>createdOn</td><td>time.Time</td><td>创建时间</td></tr><tr><td>accessedOn</td><td>time.Time</td><td>访问时间</td></tr><tr><td>accessCount</td><td>int64</td><td>访问次数</td></tr><tr><td>aboutToExpire</td><td>func</td><td>在删除item之前调用的触发函数</td></tr></tbody></table><h4 id="CacheItem函数说明"><a href="#CacheItem函数说明" class="headerlink" title="CacheItem函数说明"></a>CacheItem函数说明</h4><ul><li>NewCacheItem</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewCacheItem returns a newly created CacheItem.</span></span><br><span class="line"><span class="comment">// Parameter key is the item's cache-key.</span></span><br><span class="line"><span class="comment">// Parameter lifeSpan determines after which time period without an access the item</span></span><br><span class="line"><span class="comment">// will get removed from the cache.</span></span><br><span class="line"><span class="comment">// Parameter data is the item's value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCacheItem</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">return</span> &amp;CacheItem&#123;</span><br><span class="line">key:           key,</span><br><span class="line">lifeSpan:      lifeSpan,</span><br><span class="line">createdOn:     t,</span><br><span class="line">accessedOn:    t,</span><br><span class="line">accessCount:   <span class="number">0</span>,</span><br><span class="line">aboutToExpire: <span class="literal">nil</span>,</span><br><span class="line">data:          data,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>KeepAlive</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeepAlive marks an item to be kept for another expireDuration period.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">KeepAlive</span><span class="params">()</span></span> &#123;</span><br><span class="line">item.Lock()</span><br><span class="line"><span class="keyword">defer</span> item.Unlock()</span><br><span class="line">item.accessedOn = time.Now()</span><br><span class="line">item.accessCount++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用读写锁</p><ul><li>元素获取</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LifeSpan returns this item's expiration duration.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">LifeSpan</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="comment">// immutable</span></span><br><span class="line"><span class="keyword">return</span> item.lifeSpan</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AccessedOn returns when this item was last accessed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">item.RLock()</span><br><span class="line"><span class="keyword">defer</span> item.RUnlock()</span><br><span class="line"><span class="keyword">return</span> item.accessedOn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreatedOn returns when this item was added to the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">CreatedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line"><span class="comment">// immutable</span></span><br><span class="line"><span class="keyword">return</span> item.createdOn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AccessCount returns how often this item has been accessed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessCount</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">item.RLock()</span><br><span class="line"><span class="keyword">defer</span> item.RUnlock()</span><br><span class="line"><span class="keyword">return</span> item.accessCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key returns the key of this cached item.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Key</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="comment">// immutable</span></span><br><span class="line"><span class="keyword">return</span> item.key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data returns the value of this cached item.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Data</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="comment">// immutable</span></span><br><span class="line"><span class="keyword">return</span> item.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能修改的数据，使用读锁，不修改的数据不加锁。</p><ul><li>SetAboutToExpireCallback</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetAboutToExpireCallback configures a callback, which will be called right</span></span><br><span class="line"><span class="comment">// before the item is about to be removed from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">SetAboutToExpireCallback</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span>)</span> &#123;</span><br><span class="line">item.Lock()</span><br><span class="line"><span class="keyword">defer</span> item.Unlock()</span><br><span class="line">item.aboutToExpire = f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="mycachedapp"><a href="#mycachedapp" class="headerlink" title="mycachedapp"></a>mycachedapp</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/muesli/cache2go"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keys &amp; values in cache2go can be of arbitrary types, e.g. a struct.</span></span><br><span class="line"><span class="keyword">type</span> myStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">text     <span class="keyword">string</span></span><br><span class="line">moreData []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Accessing a new cache table for the first time will create it.</span></span><br><span class="line">cache := cache2go.Cache(<span class="string">"myCache"</span>)</span><br><span class="line"><span class="comment">//Aadded for debug</span></span><br><span class="line">log := log.Logger&#123;&#125;</span><br><span class="line">log.SetOutput(os.Stdout)</span><br><span class="line">cache.SetLogger(&amp;log)</span><br><span class="line"></span><br><span class="line"><span class="comment">// We will put a new item in the cache. It will expire after</span></span><br><span class="line"><span class="comment">// not being accessed via Value(key) for more than 5 seconds.</span></span><br><span class="line">val := myStruct&#123;<span class="string">"This is a test!"</span>, []<span class="keyword">byte</span>&#123;&#125;&#125;</span><br><span class="line">cache.Add(<span class="string">"someKey"</span>, <span class="number">5</span>*time.Second, &amp;val)</span><br><span class="line">fmt.Printf(<span class="string">"Now: %v.\n"</span>, time.Now())</span><br><span class="line"><span class="comment">// Let's retrieve the item from the cache.</span></span><br><span class="line">res, err := cache.Value(<span class="string">"someKey"</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found value in cache:"</span>, res.Data().(*myStruct).text)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Error retrieving value from cache:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the item to expire in cache.</span></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">res, err = cache.Value(<span class="string">"someKey"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Item is not cached (anymore)."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add another item that never expires.</span></span><br><span class="line">cache.Add(<span class="string">"someKey"</span>, <span class="number">0</span>, &amp;val)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cache2go supports a few handy callbacks and loading mechanisms.</span></span><br><span class="line">cache.SetAboutToDeleteItemCallback(<span class="function"><span class="keyword">func</span><span class="params">(e *cache2go.CacheItem)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Deleting:"</span>, e.Key(), e.Data().(*myStruct).text, e.CreatedOn())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove the item from the cache.</span></span><br><span class="line">cache.Delete(<span class="string">"someKey"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// And wipe the entire cache table.</span></span><br><span class="line">cache.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Adding item with key someKey and lifespan of 5s to table myCache]</span><br><span class="line">[In Expiration check....]</span><br><span class="line">[Expiration check installed for table myCache]</span><br><span class="line">Now: 2018-03-16 18:06:18.421989715 +0800 CST m=+0.000683071.</span><br><span class="line">Found value in cache: This is a test!</span><br><span class="line">[In Expiration check....]</span><br><span class="line">[Expiration check triggered after 4.999843946s for table myCache]</span><br><span class="line">[In Expiration check....]</span><br><span class="line">[Expiration check triggered after 161.058µs for table myCache]</span><br><span class="line">[Deleting item with key someKey created on 2018-03-16 18:06:18.421813674 +0800 CST m=+0.000507035 and hit 1 times from table myCache]</span><br><span class="line">Item is not cached (anymore).</span><br><span class="line">[Adding item with key someKey and lifespan of 0s to table myCache]</span><br><span class="line">Deleting: someKey This is a test! 2018-03-16 18:06:28.42451005 +0800 CST m=+10.002926414</span><br><span class="line">[Deleting item with key someKey created on 2018-03-16 18:06:28.42451005 +0800 CST m=+10.002926414 and hit 0 times from table myCache]</span><br><span class="line">[Flushing table myCache]</span><br></pre></td></tr></table></figure><p>使用协程进行过期的判断。</p>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache2go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TiDB初始篇</title>
      <link href="/2018-03-09-TiDB%E5%88%9D%E5%A7%8B%E7%AF%87/"/>
      <url>/2018-03-09-TiDB%E5%88%9D%E5%A7%8B%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看到TiDB发布的微信公众账号文章，<a href="https://mp.weixin.qq.com/s?__biz=MzI3NDIxNTQyOQ==&amp;mid=2247485685&amp;idx=1&amp;sn=72405ca408f6c722aa014a5b55d78e4a&amp;chksm=eb162f9fdc61a6899a1fbc39fbc25738e273feff84b6fb4e0d2081f70275b3bb61c628f488e7&amp;scene=21#wechat_redirec" target="_blank" rel="external">TiDB 源码阅读系列文章</a>，开始研究TiDB学习一些基本的Go开发以及SQL开发知识。更多的可以参照<a href="https://pingcap.com/blog-cn/tidb-source-code-reading-1/" target="_blank" rel="external">TiDB官方博客</a></p><h3 id="TiDB编译"><a href="#TiDB编译" class="headerlink" title="TiDB编译"></a>TiDB编译</h3><h4 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h4><ul><li><p>go环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bogon:tidb guosong$ go version</span><br><span class="line">go version go1.10 darwin/amd64</span><br></pre></td></tr></table></figure></li><li><p>编译二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pingcap/tidb.git $GOPATH/src/github.com/pingcap/tidb</span><br><span class="line">cd $GOPATH/src/github.com/pingcap/tidb</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="IDE工具源码"><a href="#IDE工具源码" class="headerlink" title="IDE工具源码"></a>IDE工具源码</h4><p>使用intelliJ IDEA工具,打开tidb-server的main.go进行run</p><p><img src="/images/tidb/tidb_ide.png" alt="tidb_ide"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>默认密码为空，完全支持MySQL协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">bogon:tidb guosong$ mysql -h 127.0.0.1 -P 4000 -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1</span><br><span class="line">Server version: 5.7.1-TiDB-None MySQL Community Server (Apache License 2.0)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; \s</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.20, for osx10.8 (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:1</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@127.0.0.1</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.1-TiDB-None MySQL Community Server (Apache License 2.0)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:127.0.0.1 via TCP/IP</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:utf8</span><br><span class="line">Conn.  characterset:utf8</span><br><span class="line">TCP port:4000</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> TiDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L5  Longest Palindromic Substring</title>
      <link href="/2018-03-06-L5-Longest-Palindromic-Substring/"/>
      <url>/2018-03-06-L5-Longest-Palindromic-Substring/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line"></span><br><span class="line">Output: &quot;bab&quot;</span><br></pre></td></tr></table></figure><p>Note: “aba” is also a valid answer.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line"></span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用O(N<em>N</em>logN)时间复杂度算法<br>各个子串进行逐一判断，获取最长的回文子串<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——时间复杂度O-NNlogN"><a href="#Go代码实现1——时间复杂度O-NNlogN" class="headerlink" title="Go代码实现1——时间复杂度O(NNlogN)"></a>Go代码实现1——时间复杂度O(N<em>N</em>logN)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">s := <span class="number">0</span></span><br><span class="line">e := <span class="built_in">len</span>(str)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s&lt;e  &#123;</span><br><span class="line"><span class="keyword">if</span> str[s] != str[e] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">s++</span><br><span class="line">e--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> n &lt;=<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line">maxInt:=<span class="number">0</span></span><br><span class="line">ret := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=n;j&gt;i ;j--  &#123;</span><br><span class="line"><span class="keyword">if</span> isPalindrome(s[i:j]) &amp;&amp; j-i+<span class="number">1</span>&gt;maxInt &#123;</span><br><span class="line">maxInt = j-i+<span class="number">1</span></span><br><span class="line">ret = s[i:j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:756ms, 5.11%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L64  Minimum Path Sum</title>
      <link href="/2018-03-06-L64-Minimum-Path-Sum/"/>
      <url>/2018-03-06-L64-Minimum-Path-Sum/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/minimum-path-sum/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p><p>Note: You can only move either down or right at any point in time.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">[[1,3,1],</span><br><span class="line"> [1,5,1],</span><br><span class="line"> [4,2,1]]</span><br></pre></td></tr></table></figure></p><p>Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>二维DP问题<br>参照<a href="https://dolphinsboy.github.io/2018-02-01-dynamic-planning/">动态规划入门</a></p></li><li><p>优化存储空间的二维DP</p></li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go动态规划实现——二维"><a href="#Go动态规划实现——二维" class="headerlink" title="Go动态规划实现——二维"></a>Go动态规划实现——二维</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> a&lt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(grid)</span><br><span class="line">m := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> n==<span class="number">0</span> || m==<span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([][]<span class="keyword">int</span>,n)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n;i++  &#123;</span><br><span class="line">s[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>,m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ;i++  &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;m ; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = grid[i][j]</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = grid[i][j] + s[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; j==<span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = grid[i][j] + s[i<span class="number">-1</span>][j]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">s[i][j] = grid[i][j] + min(s[i][j<span class="number">-1</span>], s[i<span class="number">-1</span>][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s[n<span class="number">-1</span>][m<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:12ms, 100.0%</p></blockquote><h4 id="Go代码实现——直接修改grid"><a href="#Go代码实现——直接修改grid" class="headerlink" title="Go代码实现——直接修改grid"></a>Go代码实现——直接修改grid</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> a&lt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(grid)</span><br><span class="line">m := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> n==<span class="number">0</span> || m==<span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ;i++  &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;m ; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span> &#123;</span><br><span class="line">grid[i][j] += grid[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; j==<span class="number">0</span> &#123;</span><br><span class="line">grid[i][j] += grid[i<span class="number">-1</span>][j]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">grid[i][j] +=min(grid[i][j<span class="number">-1</span>], grid[i<span class="number">-1</span>][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> grid[n<span class="number">-1</span>][m<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:12ms, 100.0%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L300  Longest Increasing Subsequence</title>
      <link href="/2018-03-05-L300-Longest-Increasing-Subsequence/"/>
      <url>/2018-03-05-L300-Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/description/" target="_blank" rel="external">题目描述</a></h3><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p><p>For example,<br>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p><p>Your algorithm should run in O(n2) complexity.</p><p>Follow up: Could you improve it to O(n log n) time complexity?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>动态规划思想，状态转移方程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = max&#123;dp[j]+1&#125; 其中j&lt;i &amp;&amp; A[j]&lt;=A[i]</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.felix021.com/blog/read.php?1587" target="_blank" rel="external">O(NlogN)时间复杂度</a></p><a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——动态规划，O-N-N-时间复杂度"><a href="#Go代码实现1——动态规划，O-N-N-时间复杂度" class="headerlink" title="Go代码实现1——动态规划，O(N*N)时间复杂度"></a>Go代码实现1——动态规划，O(N*N)时间复杂度</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLIS</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n:=<span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">    ret:=<span class="number">1</span></span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">dp[i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;i;j++  &#123;</span><br><span class="line"><span class="keyword">if</span> nums[j]&lt;nums[i] &amp;&amp; dp[j]+<span class="number">1</span>&gt;dp[i] &#123;</span><br><span class="line">dp[i] = dp[j]+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> dp[i]&gt;ret&#123;</span><br><span class="line">                ret = dp[i]</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现2——O-N-logN-时间复杂度"><a href="#Go代码实现2——O-N-logN-时间复杂度" class="headerlink" title="Go代码实现2——O(N*logN)时间复杂度"></a>Go代码实现2——O(N*logN)时间复杂度</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">upper_bound</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>, s <span class="keyword">int</span>, e <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[e]&lt;target &#123;</span><br><span class="line"><span class="keyword">return</span> e+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s&lt;e &#123;</span><br><span class="line">mid := s + (e-s)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid]&lt;target &#123;</span><br><span class="line">s = mid+<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">e = mid</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLIS</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n:=<span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">end := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">end[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span> := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n;i++ &#123;</span><br><span class="line">pos := upper_bound(end,nums[i], <span class="number">1</span>,<span class="built_in">len</span>)</span><br><span class="line">end[pos] = nums[i]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>&lt;pos &#123;</span><br><span class="line"><span class="built_in">len</span> = pos</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考资料<a href="https://www.felix021.com/blog/read.php?1587" target="_blank" rel="external">https://www.felix021.com/blog/read.php?1587</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L746  Min Cost Climbing Stairs</title>
      <link href="/2018-03-05-L746-Min-Cost-Climbing-Stairs/"/>
      <url>/2018-03-05-L746-Min-Cost-Climbing-Stairs/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/min-cost-climbing-stairs/description/" target="_blank" rel="external">题目描述</a></h3><p>On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).</p><p>Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: cost = [10, 15, 20]</span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure></p><p>Explanation: Cheapest is start on cost[1], pay that cost and go to the top.<br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p><p>Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].<br>Note:<br>cost will have a length in the range [2, 1000].<br>Every cost[i] will be an integer in the range [0, 999].</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>动态规划思想<br>dp[i] = min(cost[i-1]+dp[i-1], cost[i-2]+dp[i-2])</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——数组存储子问题解"><a href="#Go代码实现——数组存储子问题解" class="headerlink" title="Go代码实现——数组存储子问题解"></a>Go代码实现——数组存储子问题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> a&lt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minCostClimbingStairs</span><span class="params">(cost []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(cost)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cost[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;n+<span class="number">1</span>;i++ &#123;</span><br><span class="line">dp[i] = min(cost[i<span class="number">-1</span>]+dp[i<span class="number">-1</span>], cost[i<span class="number">-2</span>]+dp[i<span class="number">-2</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 8ms</p></blockquote><h4 id="Go代码实现——数组存储子问题解-1"><a href="#Go代码实现——数组存储子问题解-1" class="headerlink" title="Go代码实现——数组存储子问题解"></a>Go代码实现——数组存储子问题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> a&lt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minCostClimbingStairs</span><span class="params">(cost []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(cost)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cost[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">dp[<span class="number">0</span>] = cost[<span class="number">0</span>]</span><br><span class="line">dp[<span class="number">1</span>] = cost[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;n;i++ &#123;</span><br><span class="line">dp[i] = min(dp[i<span class="number">-1</span>], dp[i<span class="number">-2</span>]) + cost[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(dp[n<span class="number">-1</span>],dp[n<span class="number">-2</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——dp空间优化"><a href="#Go代码实现——dp空间优化" class="headerlink" title="Go代码实现——dp空间优化"></a>Go代码实现——dp空间优化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minCostClimbingStairs</span><span class="params">(cost []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(cost)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cost[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">t := min(a,b) + cost[i]</span><br><span class="line">a = b</span><br><span class="line">b = t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考资料：<a href="http://www.cnblogs.com/grandyang/p/8343874.html" target="_blank" rel="external">http://www.cnblogs.com/grandyang/p/8343874.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L322  Climbing Stairs</title>
      <link href="/2018-03-02-L322-Climbing-Stairs/"/>
      <url>/2018-03-02-L322-Climbing-Stairs/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="external">题目描述</a></h3><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p>Note: Given n will be a positive integer.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output:  2</span><br><span class="line">Explanation:  There are two ways to climb to the top.</span><br><span class="line"></span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:  3</span><br><span class="line">Explanation:  There are three ways to climb to the top.</span><br><span class="line"></span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>动态规划思想<br>dp[i] = dp[i-2] + dp[i-1]<br>注意初始化条件<br>dp[0] = 0<br>dp[1] = 1<br>dp[2] = {dp[1]+1（爬1个）,dp[0]+2（爬2个）} = dp[1] + dp[0]<br>&lt;–more–&gt;</li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go动态规划实现——使用n个存储"><a href="#Go动态规划实现——使用n个存储" class="headerlink" title="Go动态规划实现——使用n个存储"></a>Go动态规划实现——使用n个存储</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;n;i++ &#123;</span><br><span class="line">dp[i] = dp[i<span class="number">-2</span>]+dp[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[n<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:0ms, 4.84%</p></blockquote><h4 id="Go动态规划优化——使用三个变量实现"><a href="#Go动态规划优化——使用三个变量实现" class="headerlink" title="Go动态规划优化——使用三个变量实现"></a>Go动态规划优化——使用三个变量实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line">    ret := b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;n;i++ &#123;</span><br><span class="line">ret = a+b</span><br><span class="line">a = b</span><br><span class="line">b = ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="http://www.cnblogs.com/grandyang/p/4079165.html" target="_blank" rel="external">http://www.cnblogs.com/grandyang/p/4079165.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L198  House Robber</title>
      <link href="/2018-03-01-L198-House-Robber/"/>
      <url>/2018-03-01-L198-House-Robber/</url>
      <content type="html"><![CDATA[<h3 id="L198题目描述"><a href="#L198题目描述" class="headerlink" title="L198题目描述"></a><a href="https://leetcode.com/problems/house-robber/description/" target="_blank" rel="external">L198题目描述</a></h3><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p><p>Credits:<br>Special thanks to @ifanchu for adding this problem and creating all test cases. Also thanks to @ts for adding additional test cases.</p><p><strong>关键点</strong><br>给一组数，不能取相邻的两个数，获取最大和。<br>例如数组nums[3, 10, 20, 32, 4]，其最大和为10+32=42</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用动态规划思想</li></ul><p>d(i) = max{d(i-2)+nums[i], d(i-1)}</p><p>判断依据是否获取当前值，结果返回d最后一个值即可。</p><a id="more"></a><h4 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><h5 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a&gt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sums := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">sums[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">sums[<span class="number">1</span>] = max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;n;i++ &#123;</span><br><span class="line">sums[i] = max(sums[i<span class="number">-2</span>]+nums[i], sums[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sums[n<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:0ms, 29.82%</p></blockquote><h5 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h5><p>从动态规划总结的表达式<br>d(i) = max{d[i-2]+nums[i], d[i-1]}<br>可以看出子问题的解只依赖于d[i-1]和d[i-2]两个变量，使用两个变量而不是sums数组进行一步优化动态规划的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a&gt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line">maxSum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">maxSum = max(a+nums[i], b)</span><br><span class="line">a = b</span><br><span class="line">b = maxSum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Rumtime:0ms, 29.82%</p></blockquote><h3 id="相似问题L213-House-Robber-II"><a href="#相似问题L213-House-Robber-II" class="headerlink" title="相似问题L213 House Robber II"></a>相似问题<a href="https://leetcode.com/problems/house-robber-ii/description/" target="_blank" rel="external">L213 House Robber II</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. </p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>将问题L213转换为L198，进行两次判断包含首个元素和包含最后一个元素，判断两者的最大值。</li></ul><h4 id="Go代码实现-1"><a href="#Go代码实现-1" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a&gt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(robNoCycle(nums[<span class="number">0</span>:n<span class="number">-1</span>]), robNoCycle(nums[<span class="number">1</span>:]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">robNoCycle</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line">maxSum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">maxSum = max(a+nums[i], b)</span><br><span class="line">a = b</span><br><span class="line">b = maxSum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:0ms, 35.71%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L53-Maximum-Subarray</title>
      <link href="/2018-02-28-53-Maximum-Subarray/"/>
      <url>/2018-02-28-53-Maximum-Subarray/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="external">题目描述</a></h3><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p><p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="动态规划思想"><a href="#动态规划思想" class="headerlink" title="动态规划思想"></a>动态规划思想</h4><p>以nums数组[-2,1,-3,4,-1]为例</p><ul><li>dp[0]为-2</li><li>dp[1] = max(dp[0]+nums[1],1)=max(-2,1)=1</li><li>dp[2] = max(dp[1]+nums[2],-3)=max(1-3,-3)=-2</li><li>当前的sum为dp[i-1]+nums[i], nums[i]最大值</li><li>然后将maxSum和sum进行比较，取最大值</li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> a&gt;b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sums := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">maxSum := nums[<span class="number">0</span>]</span><br><span class="line">sums[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n ; i++ &#123;</span><br><span class="line">sums[i] = max(sums[i<span class="number">-1</span>]+nums[i], nums[i])</span><br><span class="line">maxSum = max(sums[i], maxSum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maxSum := nums[<span class="number">0</span>]</span><br><span class="line">curSum := nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n ; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> curSum&lt;<span class="number">0</span> &#123;</span><br><span class="line">curSum = nums[i]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">curSum += nums[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> curSum&gt;maxSum &#123;</span><br><span class="line">maxSum = curSum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://blog.csdn.net/liu2012huan/article/details/51296635" target="_blank" rel="external">http://blog.csdn.net/liu2012huan/article/details/51296635</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L414-Third-Maximum-Number</title>
      <link href="/2018-02-26-414-Third-Maximum-Number/"/>
      <url>/2018-02-26-414-Third-Maximum-Number/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/third-maximum-number/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [3, 2, 1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: The third maximum is 1.</span><br><span class="line">Example 2:</span><br><span class="line">Input: [1, 2]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: The third maximum does not exist, so the maximum (2) is returned instead.</span><br><span class="line">Example 3:</span><br><span class="line">Input: [2, 2, 3, 1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>Explanation: Note that the third maximum here means the third maximum distinct number.<br>Both numbers with value 2 are both considered as second maximum.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用三个变量</li></ul><a id="more"></a><h3 id="Go代码"><a href="#Go代码" class="headerlink" title="Go代码"></a>Go代码</h3><h4 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">thirdMax</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ret := []<span class="keyword">int</span>&#123;math.MinInt64, math.MinInt64, math.MinInt64&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _,n := <span class="keyword">range</span> nums&#123;</span><br><span class="line"><span class="keyword">if</span> n == ret[<span class="number">0</span>] || n == ret[<span class="number">1</span>] || n == ret[<span class="number">2</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n &gt; ret[<span class="number">0</span>]&#123;</span><br><span class="line">ret = []<span class="keyword">int</span>&#123;n, ret[<span class="number">0</span>], ret[<span class="number">1</span>]&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> n&gt;ret[<span class="number">1</span>] &#123;</span><br><span class="line">ret = []<span class="keyword">int</span>&#123;ret[<span class="number">0</span>], n, ret[<span class="number">1</span>]&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> n&gt;ret[<span class="number">2</span>]&#123;</span><br><span class="line">ret = []<span class="keyword">int</span>&#123;ret[<span class="number">0</span>], ret[<span class="number">1</span>], n&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ret[<span class="number">2</span>] == math.MinInt64&#123;</span><br><span class="line"><span class="keyword">return</span> ret[<span class="number">0</span>]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ret[<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态规划入门</title>
      <link href="/2018-02-01-dynamic-planning/"/>
      <url>/2018-02-01-dynamic-planning/</url>
      <content type="html"><![CDATA[<h3 id="硬币问题"><a href="#硬币问题" class="headerlink" title="硬币问题"></a>硬币问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>我们有面值为1元、3元和5元的硬币若干，如何使用更少的硬币凑成11元？</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>规定dp[i] = j 表示凑成i元至少需要j个硬币。</p><p>i = 0，显然需要0个硬币凑成0元，即有dp[0] = 0<br>i = 1，凑成1元需要硬币的数目为dp[1] = dp[0] + 1 = 1<br>i = 2，凑成2元需要硬币的数目为dp[2] = dp[1] + 1 = 2<br>i = 3，凑成3元需要硬币的数目有两种情况，dp[3] = dp[2] + 1 = 2 + 1= 3 , 还可以dp[3] = dp[3-3] + 1 = dp[0] + 1 = 1。通过比较两个最小值，可以获得dp[3] = 1<br>i = 4，可以使用1元硬币dp[4] = dp[4-1] + 1 = 2 ，也可以使用3元硬币dp[4] = dp[4-3] + 1 = dp[1] + 1 = 2<br>i = 5，要凑5元，可以使用下面三种：</p><ul><li>使用1元硬币，dp[5] = dp[5-1] + 1 = dp[4] + 1 = 3</li><li>使用3元硬币，dp[5] = dp[5-3] + 1 = dp[2] + 1 = 3</li><li>使用5元硬币，dp[5] = dp[5-5] + 1 = dp[0] + 1 = 1<br>于是dp[5] = 1</li></ul><p>可以递归公式：<br>d(i) = min{d[i-vj]+1 | vj属于{1,3,5}}</p><p>伪代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Set Min[i] equal to Infinity for all of i</span><br><span class="line">Min[0]=0</span><br><span class="line">Min[1:S] = MaxValue</span><br><span class="line">For i = 1 to S</span><br><span class="line">For j = 0 to N - 1</span><br><span class="line">   If (Vj&lt;=i AND Min[i-Vj]+1&lt;Min[i])</span><br><span class="line">Then Min[i]=Min[i-Vj]+1</span><br><span class="line"></span><br><span class="line">Output Min[S]</span><br></pre></td></tr></table></figure><h4 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DP</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDp</span><span class="params">(s <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">v := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>,s+<span class="number">1</span>)</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=s;i++ &#123;</span><br><span class="line">dp[i] = s</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;<span class="built_in">len</span>(v) ; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> v[j]&lt;=i &amp;&amp; dp[i-v[j]]+<span class="number">1</span>&lt;dp[i] &#123;</span><br><span class="line">dp[i] = dp[i-v[j]] + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[s]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在求解凑成11元需要多少个硬币，没有直接计算dp[11]，而是将这个问题分解成许多个相同的子问题。<br>依赖这些子问题解得到最终解。</p><h3 id="最长非降子序列长度"><a href="#最长非降子序列长度" class="headerlink" title="最长非降子序列长度"></a>最长非降子序列长度</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>一个序列有N个数，例如5, 3, 4, 8, 6, 7，求这个序列最长非降子序列长度。</p><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>LIS表示最长非降序子列长度</p><ul><li>前1个数的LIS长度为d(1)=1 (序列: 5)</li><li>前2个数的LIS长度为d(2)=1 (序列: 3，3前面没有比3小的)</li><li>前3个数的LIS长度为d(3)=2 (序列4有一个比它小的3)，所以等于d(2)+1</li><li>前4个数的LIS长度为d(4)=(序列: 3, 4, 8)，d(4) = max{d(1), d(2), d(3)} + 1 = 3</li><li>前5个数的LIS长度为d(5)=(序列：3，4，6), d(5) = max{d(1), d(2), d(3)} + 1 = 3</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">状态转移方程式</span><br><span class="line">d(i) = max&#123;1, d(j)+1&#125;，其中j&lt;i, A[j]&lt;=A[i]</span><br><span class="line"></span><br><span class="line">d(i)表示前i个数以A[i]结尾的LIS</span><br></pre></td></tr></table></figure><h4 id="Go代码实现-1"><a href="#Go代码实现-1" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LIS</span><span class="params">(nums []<span class="keyword">int</span>)</span><span class="title">int</span></span>  &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line">dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">dp[i] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max := <span class="number">1</span></span><br><span class="line">j := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j&lt;n &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;j;i++&#123;</span><br><span class="line"><span class="keyword">if</span> nums[j]&gt;nums[i] &amp;&amp; dp[j]&lt;dp[i]+<span class="number">1</span> &#123;</span><br><span class="line">dp[j] = dp[i]+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> dp[j]&gt;max &#123;</span><br><span class="line">max = dp[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维DP问题——中级"><a href="#二维DP问题——中级" class="headerlink" title="二维DP问题——中级"></a>二维DP问题——中级</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>平面上有N*M个格子，每个格子放着一定数量的苹果。从左上角的格子开始，每一步只能向下或者向右走，每次走到一个格子上就把格子里的苹果都收集起来。<br>问最多能收集多少个苹果？</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li><p>状态<br>状态S[i][j]表示走到第(i,j)格子，最多能收集的苹果数目。从左边来S[i-1][j],从上边来S[i][j-1]。</p></li><li><p>状态转移方程式</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S[i][j] = A[i][j] + max&#123;S[i-1][j] if i &gt;0, S[i][j-1] if j &gt; 0&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现-2"><a href="#Go代码实现-2" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><h4 id="Go代码实现-3"><a href="#Go代码实现-3" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TwoDiDp</span><span class="params">(nums [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line">m := <span class="built_in">len</span>(nums[<span class="number">0</span>])</span><br><span class="line">s := <span class="built_in">make</span>([][]<span class="keyword">int</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ;i++  &#123;</span><br><span class="line">s[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>,m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++&#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;m ;j++  &#123;</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">0</span> &amp;&amp;j == <span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = nums[i][j]</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> i==<span class="number">0</span>&amp;&amp;j&gt;<span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = nums[i][j] + max(<span class="number">0</span>, s[i][j<span class="number">-1</span>])</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> j==<span class="number">0</span> &amp;&amp; i&gt;<span class="number">0</span> &#123;</span><br><span class="line">s[i][j] = nums[i][j] + max(s[i<span class="number">-1</span>][j], <span class="number">0</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">s[i][j] = nums[i][j]+max(s[i<span class="number">-1</span>][j], s[i][j<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s[n<span class="number">-1</span>][m<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCase3</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">nums := [][]<span class="keyword">int</span>&#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">ret := TwoDiDp(nums)</span><br><span class="line"><span class="keyword">if</span> ret != <span class="number">45</span> &#123;</span><br><span class="line">t.Error(<span class="string">"TestCase3 failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LeetCode测试题目"><a href="#LeetCode测试题目" class="headerlink" title="LeetCode测试题目"></a>LeetCode测试题目</h4><ul><li><p><a href="https://leetcode.com/problems/minimum-path-sum/description/" target="_blank" rel="external">L64. Minimum Path Sum</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3></li><li><p>动态规划专题 <a href="http://www.cnblogs.com/skydreamteam/p/3652971.html" target="_blank" rel="external">http://www.cnblogs.com/skydreamteam/p/3652971.html</a></p></li><li>动态规划入门之硬币问题 <a href="http://blog.csdn.net/kerryfish/article/details/25563937" target="_blank" rel="external">http://blog.csdn.net/kerryfish/article/details/25563937</a></li><li>动态规划：从新手到专家 <a href="http://www.hawstein.com/posts/dp-novice-to-advanced.html" target="_blank" rel="external">http://www.hawstein.com/posts/dp-novice-to-advanced.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Dynamic Planning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L541  Reverse String II</title>
      <link href="/2018-01-31-L541-Reverse-String-II/"/>
      <url>/2018-01-31-L541-Reverse-String-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-string-ii/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">Output: &quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><p>Restrictions:<br>The string consists of lower English letters only.<br>Length of the given string and k will in the range [1, 10000]</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>在Python和Go中string都是const，不可以直接替换，故将其转换为list</li><li>使用二分进行reverse，reverse函数接收list、low、high，list为全量，只需要调整low和high即可</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现1"><a href="#Go实现1" class="headerlink" title="Go实现1"></a>Go实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L541</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(strs []<span class="keyword">string</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> low&lt;high  &#123;</span><br><span class="line">strs[low], strs[high] = strs[high], strs[low]</span><br><span class="line">low++</span><br><span class="line">high--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseStr</span><span class="params">(s <span class="keyword">string</span>, k <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">strs := strings.Split(s, <span class="string">""</span>)</span><br><span class="line">n := <span class="built_in">len</span>(strs)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i&lt;n &#123;</span><br><span class="line"><span class="keyword">if</span> i+k&gt;n &#123;</span><br><span class="line">reverse(strs, i, n<span class="number">-1</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reverse(strs, i, i+k<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">i = i+<span class="number">2</span>*k</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strings.Join(strs, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 9 ms 16.67%</p></blockquote><h4 id="Go实现2"><a href="#Go实现2" class="headerlink" title="Go实现2"></a>Go实现2</h4><blockquote><p>不使用strings库函数，使用bytes数组，将bytes和string之间进行转换</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(bytes []<span class="keyword">byte</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> low&lt;high  &#123;</span><br><span class="line">bytes[low], bytes[high] = bytes[high], bytes[low]</span><br><span class="line">low++</span><br><span class="line">high--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseStr</span><span class="params">(s <span class="keyword">string</span>, k <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">bytes := []<span class="keyword">byte</span>(s)</span><br><span class="line">n := <span class="built_in">len</span>(bytes)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i&lt;n &#123;</span><br><span class="line"><span class="keyword">if</span> i+k&gt;n &#123;</span><br><span class="line">reverse(bytes, i, n<span class="number">-1</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reverse(bytes, i, i+k<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">i = i+<span class="number">2</span>*k</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime 5ms 58.33%</p></blockquote><h3 id="类似题目"><a href="#类似题目" class="headerlink" title="类似题目"></a>类似题目</h3><h3 id="L557-Reverse-Words-in-a-String-III"><a href="#L557-Reverse-Words-in-a-String-III" class="headerlink" title="L557 Reverse Words in a String III"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/description/" target="_blank" rel="external">L557 Reverse Words in a String III</a></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(bytes []<span class="keyword">byte</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> low&lt;high &#123;</span><br><span class="line">bytes[low], bytes[high] = bytes[high], bytes[low]</span><br><span class="line">low++</span><br><span class="line">high--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">bytes := []<span class="keyword">byte</span>(s)</span><br><span class="line">n := <span class="built_in">len</span>(s)</span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">high := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> high&lt;n &#123;</span><br><span class="line"><span class="keyword">for</span> high&lt;n &amp;&amp; s[high]!= <span class="string">' '</span> &#123;</span><br><span class="line">high++</span><br><span class="line">&#125;</span><br><span class="line">reverse(bytes, low, high<span class="number">-1</span>)</span><br><span class="line">low = high+<span class="number">1</span></span><br><span class="line">high++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:8ms, 100.00%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Auto_Jump 准备工作1</title>
      <link href="/2018-01-26-Auto-Jump/"/>
      <url>/2018-01-26-Auto-Jump/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>刷微信公众账号的时候看到一篇文章<a href="https://mp.weixin.qq.com/s/6fGrNSOTAJ7vbqN2AydGbw" target="_blank" rel="external">AI 玩跳一跳的正确姿势，Auto-Jump 算法详解</a>，觉得挺感兴趣的。<br>再加上现在AI这么火，故按照文章上相关资料进行尝试。本系列文章记录尝试的过程以及遇到的问题。</p><h2 id="Opencv"><a href="#Opencv" class="headerlink" title="Opencv"></a>Opencv</h2><h3 id="Opencv安装"><a href="#Opencv安装" class="headerlink" title="Opencv安装"></a>Opencv安装</h3><p>在Mac安装Opencv，主要参照文章<a href="https://ptorch.com/news/31.html" target="_blank" rel="external">Mac下安装使用Python-OpenCV</a>。<br>遇到主要问题是brew update时候遇到git错误，后来通过重新安装brew根本解决。</p><a id="more"></a><h3 id="Opencv测试人脸识别"><a href="#Opencv测试人脸识别" class="headerlink" title="Opencv测试人脸识别"></a>Opencv测试人脸识别</h3><p>参照<a href="https://realpython.com/blog/python/face-recognition-with-python/" target="_blank" rel="external">Face Recognition with Python, in Under 25 Lines of Code</a>实现第一个人脸识别Python Demo。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(image_path, casc_path)</span>:</span></span><br><span class="line">    newPath = <span class="string">"new_"</span> + image_path</span><br><span class="line"></span><br><span class="line">    faceCascade = cv2.CascadeClassifier(casc_path)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    faces = faceCascade.detectMultiScale(</span><br><span class="line">        gray,</span><br><span class="line">        scaleFactor=<span class="number">1.1</span>,</span><br><span class="line">        minNeighbors=<span class="number">5</span>,</span><br><span class="line">        minSize=(<span class="number">30</span>, <span class="number">30</span>),</span><br><span class="line">        flags=cv2.CASCADE_SCALE_IMAGE</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Found &#123;0&#125; faces!"</span>.format(len(faces))</span><br><span class="line">    <span class="comment"># Draw a rectangle around the faces</span></span><br><span class="line">    <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">        cv2.rectangle(image, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    cv2.imwrite(newPath, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    imagePath = sys.argv[<span class="number">1</span>]</span><br><span class="line">    cascPath = sys.argv[<span class="number">2</span>]</span><br><span class="line">    test(imagePath, cascPath)</span><br></pre></td></tr></table></figure><p>运行参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2.7 Test_Face.py head.jpeg haarcascade_frontalface_default.xml</span><br></pre></td></tr></table></figure></p><p>其中第一个参数为图片，第二个参数为frontface检查器。</p><p>程序中最关键的是face检测，也就是Line 37，结果返回检测的faces在图片的坐标，通过rectangle将这些face使用矩形框标记。</p><h2 id="WebDriverAgent"><a href="#WebDriverAgent" class="headerlink" title="WebDriverAgent"></a>WebDriverAgent</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参照git上给出连接搭建WebDriverAgent，期间由于mac、IOS以及Xcode版本过低，统一都进行了升级。具体版本如下：</p><ul><li>Mac 10.13.3 High Sierra</li><li>IOS 11.2.5</li><li>Xcode 9.2</li></ul><p><strong>端口转发</strong></p><p>文档中给出是imobiledevice，在mac实现测试使用libimobiledevice。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install libimobiledevice</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用iproxy进行端口转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iproxy 8100 8100</span><br></pre></td></tr></table></figure><p><img src="/images/auto_jump_demo.png" alt="auto_jump_demo"></p><p><strong>sign配置</strong></p><p><img src="/images/auto_jump_sign5.png" alt="auto_jump_sign5"></p><p><img src="/images/auto_jump_sign3.png" alt="auto_jump_sign3"></p><p><img src="/images/auto_jump_sign1.png" alt="auto_jump_sign1"></p>]]></content>
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> WebDriverAgent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L459  Repeated Substring Pattern</title>
      <link href="/2018-01-18-L459-Repeated-Substring-Pattern/"/>
      <url>/2018-01-18-L459-Repeated-Substring-Pattern/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/repeated-substring-pattern/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: &quot;abab&quot;</span><br><span class="line"></span><br><span class="line">Output: True</span><br><span class="line"></span><br><span class="line">Explanation: It&apos;s the substring &quot;ab&quot; twice.</span><br><span class="line">Example 2:</span><br><span class="line">Input: &quot;aba&quot;</span><br><span class="line"></span><br><span class="line">Output: False</span><br><span class="line">Example 3:</span><br><span class="line">Input: &quot;abcabcabcabc&quot;</span><br><span class="line"></span><br><span class="line">Output: True</span><br><span class="line"></span><br><span class="line">Explanation: It&apos;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><ul><li>从字符串str[0:n/2]分成n/2子串，判断是否以这个子串repeated成字符串str，如果是返回true，否则继续检查</li><li>O(N**2)时间复杂度</li></ul><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><ul><li>KMP算法思想，<a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="external">http://blog.csdn.net/v_july_v/article/details/7041827</a></li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    mid := n/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=mid;i++ &#123;</span><br><span class="line">        substr :=s[<span class="number">0</span>:i]</span><br><span class="line">        m := <span class="built_in">len</span>(substr)</span><br><span class="line">        flag := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> k:=<span class="number">0</span>;k&lt;n; &#123;</span><br><span class="line">            t:= m+k</span><br><span class="line">            <span class="keyword">if</span> m+k&gt;n&#123;</span><br><span class="line">                t = n<span class="number">-1</span></span><br><span class="line">            &#125;</span><br><span class="line">            tmp := s[k:t]</span><br><span class="line">            <span class="keyword">if</span> tmp != substr &#123;</span><br><span class="line">                flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            k += m</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 20 ms 33.33%</p></blockquote><h4 id="KMP算法代码实现"><a href="#KMP算法代码实现" class="headerlink" title="KMP算法代码实现"></a>KMP算法代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">    kmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    i, j := <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i&lt;n  &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == s[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">            kmp[i] = j</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> j==<span class="number">0</span> &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            j = kmp[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kmp[n] != <span class="number">0</span> &amp;&amp; (kmp[n] % (n-kmp[n]) == <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为O(n)，Runtime: 24 ms， 33.33%</p></blockquote><h4 id="Go实现3"><a href="#Go实现3" class="headerlink" title="Go实现3"></a>Go实现3</h4><blockquote><p>将s[1:]和s[0:n-1]组合一个字符串new_s，判断new_s是否在s中，通过系统的库函数进行判断。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    sub1 := s[<span class="number">1</span>:]</span><br><span class="line">    sub2 := s[:<span class="built_in">len</span>(s)<span class="number">-1</span>]</span><br><span class="line">    bigdick := sub1 + sub2</span><br><span class="line">    <span class="keyword">if</span> strings.Contains(bigdick,s)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:19ms, 33.33%</p></blockquote><h3 id="KMP算法思想"><a href="#KMP算法思想" class="headerlink" title="KMP算法思想"></a><a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="external">KMP算法思想</a></h3><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一个文本串S，和一个模式串P，现在要查找P在S中的位置。<br>例如文本串S “BBC ABCDAB ABCDABCDABDE”，模式串P “ABCDABD”，结果P在S中的位置是15。</p><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><h4 id="暴力匹配思想"><a href="#暴力匹配思想" class="headerlink" title="暴力匹配思想"></a>暴力匹配思想</h4><p>假设现在文本串S匹配到i位置，模式串P匹配到j位置，则有：</p><ul><li>如果S[i] 等于 P[j]， 则i++,j++，继续匹配下一个字符</li><li>如果S[i] 不等于 P[j], 则将i回溯为i-j+1, j=0。匹配失败，重新归零和回溯。</li><li>如果所有S字符匹配完成之后，判断j是否等于模式串的长度，如果是，返回i-j，否则返回-1（未匹配上）</li></ul><h4 id="暴力匹配Go实现"><a href="#暴力匹配Go实现" class="headerlink" title="暴力匹配Go实现"></a>暴力匹配Go实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VolientMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ns := <span class="built_in">len</span>(s)</span><br><span class="line">    np := <span class="built_in">len</span>(p)</span><br><span class="line">    i,j:=<span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i&lt;ns &amp;&amp; j &lt;np &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == p[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i = i - j + <span class="number">1</span></span><br><span class="line">            fmt.Printf(<span class="string">"i = %d\n"</span>, i)</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> j == np &#123;</span><br><span class="line">        <span class="keyword">return</span> i-j</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>针对给出例子，可以看出来i是0-15，文本串S中前15个字符都进行匹配了。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L387  First Unique Character in a String</title>
      <link href="/2018-01-18-L387-First-Unique-Character-in-a-String/"/>
      <url>/2018-01-18-L387-First-Unique-Character-in-a-String/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/first-unique-character-in-a-string/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p><p>Examples:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br></pre></td></tr></table></figure><p>Note: You may assume the string contain only lowercase letters.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>题目中note说是字符串中包含的只有小写字母，故可以包含26个int的数组表示各个字符出现的次数</li><li>然后再从新遍历字符串，首次只出现一次的字符串的index返回</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstUniqChar</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s&#123;</span><br><span class="line">        idx := <span class="keyword">int</span>(c-<span class="string">'a'</span>)</span><br><span class="line">        m[idx]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> s&#123;</span><br><span class="line">        <span class="keyword">if</span> m[c-<span class="string">'a'</span>] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 20ms 73.91%</p></blockquote><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstUniqChar</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m [<span class="number">128</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s&#123;</span><br><span class="line">        m[c]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> s&#123;</span><br><span class="line">        <span class="keyword">if</span> m[c] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意不能使用byte数组，存在越界情况,数组表示字符出现的次数，故不限制byte上限127</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L443  String Compression</title>
      <link href="/2018-01-17-L443-String-Compression/"/>
      <url>/2018-01-17-L443-String-Compression/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="">题目描述</a></h3><p>Given an array of characters, compress it in-place.</p><p>The length after compression must always be smaller than or equal to the original array.</p><p>Every element of the array should be a character (not int) of length 1.</p><p>After you are done modifying the input array in-place, return the new length of the array.</p><p>Follow up:<br>Could you solve it using only O(1) extra space?<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.</span><br><span class="line">Example 2:</span><br><span class="line">Input:</span><br><span class="line">[&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 1, and the first 1 characters of the input array should be: [&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Nothing is replaced.</span><br><span class="line">Example 3:</span><br><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Since the character &quot;a&quot; does not repeat, it is not compressed. &quot;bbbbbbbbbbbb&quot; is replaced by &quot;b12&quot;.</span><br><span class="line">Notice each digit has it&apos;s own entry in the array.</span><br><span class="line">Note:</span><br><span class="line">All characters have an ASCII value in [35, 126].</span><br><span class="line">1 &lt;= len(chars) &lt;= 1000.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>对连续的字符进行压缩，压缩的结果是字符以及对应的连续的次数，如果连续次数为1，不显示次数</li><li>返回结果为压缩后字符的总长度</li><li>同时，需要将chars修改为压缩后结果</li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mport (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compress</span><span class="params">(chars []<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n:=<span class="built_in">len</span>(chars)</span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">        char := chars[i]</span><br><span class="line">        count := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i&lt;n &amp;&amp; chars[i] == char &#123;</span><br><span class="line">            count++</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        i--</span><br><span class="line"></span><br><span class="line">        chars[idx] = char</span><br><span class="line">        idx++</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">1</span> &#123;</span><br><span class="line">            countStr := strconv.Itoa(count)</span><br><span class="line">            <span class="keyword">for</span> k:=<span class="number">0</span>;k&lt;<span class="built_in">len</span>(countStr);k++ &#123;</span><br><span class="line">                chars[idx] = countStr[k]</span><br><span class="line">                idx++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> idx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime 35ms 0.00% </p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L434  Number of Segments in a String</title>
      <link href="/2018-01-17-L434-Number-of-Segments-in-a-String/"/>
      <url>/2018-01-17-L434-Number-of-Segments-in-a-String/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/number-of-segments-in-a-string/description/" target="_blank" rel="external">题目描述</a></h3><p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p><p>Please note that the string does not contain any non-printable characters.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Hello, my name is John&quot;</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用库函数</li><li>使用基本算法</li><li>更简洁做法：判断当前不为空以及前一个字符为空，即新增一个seg<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSegments</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    c:=<span class="number">0</span></span><br><span class="line">    strs := strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">for</span> _,str := <span class="keyword">range</span> strs&#123;</span><br><span class="line">        <span class="keyword">if</span> str != <span class="string">""</span>&#123;</span><br><span class="line">            c++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime 2ms</p></blockquote><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSegments</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i&lt;n &amp;&amp; s[i] == <span class="string">' '</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head := <span class="literal">true</span></span><br><span class="line">    w := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i&lt;n &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> head &#123;</span><br><span class="line">                w++</span><br><span class="line">                head = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意左右部分连续空字符<br>Runtime 1ms</p></blockquote><h4 id="Go代码实现3"><a href="#Go代码实现3" class="headerlink" title="Go代码实现3"></a>Go代码实现3</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSegments</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">' '</span> &amp;&amp; (i==<span class="number">0</span> || s[i<span class="number">-1</span>] ==<span class="string">' '</span>) &#123;</span><br><span class="line">            ret++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L383  Ransom Note</title>
      <link href="/2018-01-17-L383-Ransom-Note/"/>
      <url>/2018-01-17-L383-Ransom-Note/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/ransom-note/description/" target="_blank" rel="external">题目描述</a></h3><p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p><p>Each letter in the magazine string can only be used once in your ransom note.</p><p>Note:<br>You may assume that both strings contain only lowercase letters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个map表示字符串，判断第一个map中key是否存在于第二个map中，且value是否小于第二个map</li><li>使用一个128位的数组</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——使用map"><a href="#Go代码实现1——使用map" class="headerlink" title="Go代码实现1——使用map"></a>Go代码实现1——使用map</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="keyword">string</span>, magazine <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m1 := <span class="keyword">map</span>[<span class="keyword">int32</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="keyword">int32</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,c := <span class="keyword">range</span> ransomNote &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m1[c];!ok &#123;</span><br><span class="line">            m1[c] = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            m1[c] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,c := <span class="keyword">range</span> magazine &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m2[c];!ok &#123;</span><br><span class="line">            m2[c] = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            m2[c] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m1&#123;</span><br><span class="line">        <span class="keyword">if</span> v1, ok := m2[k];!ok ||  v&gt;v1 &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 45 ms 38.10%</p></blockquote><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="keyword">string</span>, magazine <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    letter := <span class="built_in">make</span>([]<span class="keyword">int32</span>, <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> magazine&#123;</span><br><span class="line">        letter[n] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> ransomNote&#123;</span><br><span class="line">        letter[n]-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> letter[n]&lt;<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 11 ms 80.95%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L345  Reverse Vowels of a String</title>
      <link href="/2018-01-17-L345-Reverse-Vowels-of-a-String/"/>
      <url>/2018-01-17-L345-Reverse-Vowels-of-a-String/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/description/" target="_blank" rel="external">题目描述</a></h3><p>Write a function that takes a string as input and reverse only the vowels of a string.</p><p>Example 1:<br>Given s = “hello”, return “holle”.</p><p>Example 2:<br>Given s = “leetcode”, return “leotcede”.</p><p>Note:<br>The vowels does not include the letter “y”.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用low和high两个索引进行遍历，如果两个是元音字母进行交换，否则哪个非元音字母进行low、high跳位</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isVowels</span><span class="params">(c <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    vowels := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>, <span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> vowels&#123;</span><br><span class="line">        <span class="keyword">if</span> c == v &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseVowels</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    arr := strings.Split(s, <span class="string">""</span>)</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(s)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;high &#123;</span><br><span class="line">        <span class="keyword">if</span> isVowels(arr[low]) &amp;&amp; isVowels(arr[high])&#123;</span><br><span class="line">            arr[low], arr[high] = arr[high], arr[low]</span><br><span class="line">            low++</span><br><span class="line">            high--</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> !isVowels(arr[low]) &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> !isVowels(arr[high]) &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strings.Join(arr, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Golang中string值不可以直接更改。<br>Runtime: 41 ms 10.00%</p></blockquote><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isVowels</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    vowels := []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> vowels&#123;</span><br><span class="line">        <span class="keyword">if</span> c == v &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseVowels</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(s)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;=high &#123;</span><br><span class="line">        <span class="keyword">if</span> isVowels(s[low]) &amp;&amp; isVowels(s[high])&#123;</span><br><span class="line">            ret[low], ret[high] = s[high], s[low]</span><br><span class="line">            low++</span><br><span class="line">            high--</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> !isVowels(s[low]) &#123;</span><br><span class="line">            ret[low] = s[low]</span><br><span class="line">            low++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> !isVowels(s[high]) &#123;</span><br><span class="line">            ret[high] = s[high]</span><br><span class="line">            high--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 13 ms 35.00%<br>使用字节数组，而非string数组</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Intersection of Two Arrays</title>
      <link href="/2018-01-16-Intersection-of-Two-Arrays/"/>
      <url>/2018-01-16-Intersection-of-Two-Arrays/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L349"><a href="#L349" class="headerlink" title="L349"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/" target="_blank" rel="external">L349</a></h4><p>Given two arrays, write a function to compute their intersection.</p><p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p><p>Note:<br>Each element in the result must be unique.<br>The result can be in any order.</p><h4 id="L350"><a href="#L350" class="headerlink" title="L350"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/" target="_blank" rel="external">L350</a></h4><p>Given two arrays, write a function to compute their intersection.</p><p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p><p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:<br>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用map实现</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="L349-1"><a href="#L349-1" class="headerlink" title="L349"></a>L349</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret_map := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums1&#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[n];!ok &#123;</span><br><span class="line">            m[n] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[n] ;ok&#123;</span><br><span class="line">            <span class="keyword">if</span> _,ok2 := ret_map[n]; !ok2&#123;</span><br><span class="line">                ret_map[n]=<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> ret_map&#123;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, k)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 13 ms 10.53%</p></blockquote><h4 id="L350-1"><a href="#L350-1" class="headerlink" title="L350"></a>L350</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    arr := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums1&#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[n];!ok &#123;</span><br><span class="line">            m[n] = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            m[n] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[n];ok &#123;</span><br><span class="line">            ret[n] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> n,j := <span class="keyword">range</span> ret&#123;</span><br><span class="line">        k,_ := m[n]</span><br><span class="line">        <span class="keyword">if</span> k&gt;j &#123;</span><br><span class="line">            k = j</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;k;i++ &#123;</span><br><span class="line">            arr = <span class="built_in">append</span>(arr, n)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 12ms 15.38%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L448  Find All Numbers Disappeared in an Array</title>
      <link href="/2018-01-15-L448-Find-All-Numbers-Disappeared-in-an-Array/"/>
      <url>/2018-01-15-L448-Find-All-Numbers-Disappeared-in-an-Array/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/" target="_blank" rel="external">题目描述</a></h3><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, n] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>借助O(n)空间，使用arr表示各个a[i]对应的数是否存在，返回所有0的i+1</li><li>不借助额外空间，将a[i]对应的a[a[i]-1]设置为负，统计返回所有a[i]值为正的i+1</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现1"><a href="#Go实现1" class="headerlink" title="Go实现1"></a>Go实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        arr[n<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> arr&#123;</span><br><span class="line">        <span class="keyword">if</span> v == <span class="number">0</span> &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, i+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 1308 ms 45.45%</p></blockquote><h4 id="Go实现2"><a href="#Go实现2" class="headerlink" title="Go实现2"></a>Go实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,n := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">0</span> &#123;</span><br><span class="line">            n = -n</span><br><span class="line">        &#125;</span><br><span class="line">        val := n<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[val]&gt;<span class="number">0</span> &#123;</span><br><span class="line">            nums[val] = - nums[val]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i,n := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>&#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, i+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 1516ms 18.18%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L654  Maximum Binary Tree</title>
      <link href="/2018-01-10-L654-Maximum-Binary-Tree/"/>
      <url>/2018-01-10-L654-Maximum-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/maximum-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:</p><p>The root is the maximum number in the array.<br>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.<br>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.<br>Construct the maximum tree by the given array and output the root node of this tree.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,6,0,5]</span><br><span class="line">Output: return the tree root node representing the following tree:</span><br><span class="line"></span><br><span class="line">      6</span><br><span class="line">    /   \</span><br><span class="line">   3     5</span><br><span class="line">    \    / </span><br><span class="line">     2  0   </span><br><span class="line">       \</span><br><span class="line">        1</span><br></pre></td></tr></table></figure><p>Note:<br>The size of the given array will be in the range [1,1000].</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>找出nums中的最大值以及idx，构建root节点</li><li>nums左部分递归生成左子树</li><li>nums右部分递归生成右子树</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    max := <span class="number">0</span></span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> v&gt;max &#123;</span><br><span class="line">            max = v</span><br><span class="line">            idx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max, idx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    max, idx := getMax(nums)</span><br><span class="line">    root := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">    root.Val = max</span><br><span class="line">    root.Left = constructMaximumBinaryTree(nums[<span class="number">0</span>:idx])</span><br><span class="line">    root.Right = constructMaximumBinaryTree(nums[idx+<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 130 ms 55.81%</p></blockquote><h4 id="Go代码实现——使用low和high，避免数组分割"><a href="#Go代码实现——使用low和high，避免数组分割" class="headerlink" title="Go代码实现——使用low和high，避免数组分割"></a>Go代码实现——使用low和high，避免数组分割</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> construct(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">construct</span><span class="params">(nums []<span class="keyword">int</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> low&gt;high &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := low</span><br><span class="line">    <span class="keyword">for</span> i:=low+<span class="number">1</span>;i&lt;=high;i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]&gt;nums[mid]&#123;</span><br><span class="line">            mid = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">    root.Val = nums[mid]</span><br><span class="line">    root.Left = construct(nums, low, mid<span class="number">-1</span>)</span><br><span class="line">    root.Right = construct(nums, mid+<span class="number">1</span>, high)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 120 ms 65.12%</p></blockquote><h4 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h4><ul><li><a href="http://www.cnblogs.com/grandyang/p/7513099.html" target="_blank" rel="external">http://www.cnblogs.com/grandyang/p/7513099.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L513  Find Bottom Left Tree Value</title>
      <link href="/2018-01-10-L513-Find-Bottom-Left-Tree-Value/"/>
      <url>/2018-01-10-L513-Find-Bottom-Left-Tree-Value/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/find-bottom-left-tree-value/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, find the leftmost value in the last row of the tree.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1</span><br><span class="line">Example 2: </span><br><span class="line">Input:</span><br><span class="line"></span><br><span class="line">        1</span><br><span class="line">       / \</span><br><span class="line">      2   3</span><br><span class="line">     /   / \</span><br><span class="line">    4   5   6</span><br><span class="line">       /</span><br><span class="line">      7</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">7</span><br></pre></td></tr></table></figure></p><p>Note: You may assume the tree (i.e., the given root node) is not NULL.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>深度递归遍历，记录各个层row节点信息，返回最深的第一个元素</li><li>深度递归遍历，不使用map</li><li>层次循环遍历，由左到右</li><li>层次遍历，由右到左，返回最后一个元素的val<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——深度遍历，使用map"><a href="#Go代码实现1——深度遍历，使用map" class="headerlink" title="Go代码实现1——深度遍历，使用map"></a>Go代码实现1——深度遍历，使用map</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    maxDepth := <span class="number">0</span></span><br><span class="line">    DFS(root, <span class="number">0</span>, &amp;maxDepth, m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m[maxDepth][<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, maxDepth *<span class="keyword">int</span>, m <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> _,ok := m[level];!ok&#123;</span><br><span class="line">        m[level] = []<span class="keyword">int</span>&#123;root.Val&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        m[level] = <span class="built_in">append</span>(m[level], root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> level&gt;*maxDepth &#123;</span><br><span class="line">        *maxDepth = level</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, level+<span class="number">1</span>, maxDepth, m)</span><br><span class="line">    DFS(root.Right, level+<span class="number">1</span>, maxDepth, m)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 22 ms 14.29%</p></blockquote><h4 id="Go代码实现2——深度递归遍历，使用array"><a href="#Go代码实现2——深度递归遍历，使用array" class="headerlink" title="Go代码实现2——深度递归遍历，使用array"></a>Go代码实现2——深度递归遍历，使用array</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root.Val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    maxDepth := <span class="number">0</span></span><br><span class="line">    DFS(root, <span class="number">0</span>, &amp;maxDepth, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret[maxDepth<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, maxDepth *<span class="keyword">int</span>, ret *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> level&gt;*maxDepth &#123;</span><br><span class="line">        *maxDepth = level</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(*ret)+<span class="number">1</span> == *maxDepth &#123;</span><br><span class="line">            *ret = <span class="built_in">append</span>(*ret, root.Val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, level+<span class="number">1</span>, maxDepth, ret)</span><br><span class="line">    DFS(root.Right, level+<span class="number">1</span>, maxDepth, ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 32 ms 7.14%</p></blockquote><h4 id="Go代码实现3——循环层次遍历，由左到右"><a href="#Go代码实现3——循环层次遍历，由左到右" class="headerlink" title="Go代码实现3——循环层次遍历，由左到右"></a>Go代码实现3——循环层次遍历，由左到右</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">    ret := root.Val</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        n := <span class="built_in">len</span>(queue)</span><br><span class="line">        tmp := []*TreeNode&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">            current := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp, current.Left)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp, current.Right)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span> &#123;</span><br><span class="line">                ret = current.Val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        queue = tmp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 36 ms 7.14%</p></blockquote><h4 id="Go代码实现4——层次遍历，由右到左"><a href="#Go代码实现4——层次遍历，由右到左" class="headerlink" title="Go代码实现4——层次遍历，由右到左"></a>Go代码实现4——层次遍历，由右到左</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findBottomLeftValue</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">    current := root</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current = queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current.Val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 19 ms 21.43%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L515  Find Largest Value in Each Tree Row</title>
      <link href="/2018-01-10-L515-Find-Largest-Value-in-Each-Tree-Row/"/>
      <url>/2018-01-10-L515-Find-Largest-Value-in-Each-Tree-Row/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/description/" target="_blank" rel="external">题目描述</a></h3><p>You need to find the largest value in each row of a binary tree.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        3   2</span><br><span class="line">       / \   \  </span><br><span class="line">      5   3   9 </span><br><span class="line"></span><br><span class="line">Output: [1, 3, 9]</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用queue队列实现层次遍历，比较获取每层的最大值</li><li>深度递归实现，将各个level对应的最大值进行递归传递</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——使用queue队列循环实现"><a href="#Go代码实现——使用queue队列循环实现" class="headerlink" title="Go代码实现——使用queue队列循环实现"></a>Go代码实现——使用queue队列循环实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestValues</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := queue[<span class="number">0</span>]</span><br><span class="line">        max:=current.Val</span><br><span class="line">        n := <span class="built_in">len</span>(queue)</span><br><span class="line"></span><br><span class="line">        tmp := []*TreeNode&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">            current = queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> current.Val &gt; max &#123;</span><br><span class="line">                max = current.Val</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Left!=<span class="literal">nil</span> &#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp, current.Left)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Right != <span class="literal">nil</span>&#123;</span><br><span class="line">                tmp = <span class="built_in">append</span>(tmp, current.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue = tmp</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, max)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 23 ms, 62.5%</p></blockquote><h4 id="Go深度递归实现"><a href="#Go深度递归实现" class="headerlink" title="Go深度递归实现"></a>Go深度递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestValues</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    DFS(root, <span class="number">0</span>, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, ret *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*ret) &lt;= level &#123;</span><br><span class="line">        *ret = <span class="built_in">append</span>(*ret, root.Val)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (*ret)[level] &lt;root.Val &#123;</span><br><span class="line">            (*ret)[level] = root.Val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, level+<span class="number">1</span>, ret)</span><br><span class="line">    DFS(root.Right, level+<span class="number">1</span>, ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 23 ms, 62.5%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L450  Delete Node in a BST</title>
      <link href="/2018-01-10-L450-Delete-Node-in-a-BST/"/>
      <url>/2018-01-10-L450-Delete-Node-in-a-BST/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="">题目描述</a></h3><p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p><p>Basically, the deletion can be divided into two stages:</p><p>Search for a node to remove.<br>If the node is found, delete the node.<br>Note: Time complexity should be O(height of tree).</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root = [5,3,6,2,4,null,7]</span><br><span class="line">key = 3</span><br><span class="line"></span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  3   6</span><br><span class="line"> / \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Given key to delete is 3. So we find the node with value 3 and delete it.</span><br><span class="line"></span><br><span class="line">One valid answer is [5,4,6,2,null,null,7], shown in the following BST.</span><br><span class="line"></span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  4   6</span><br><span class="line"> /     \</span><br><span class="line">2       7</span><br><span class="line"></span><br><span class="line">Another valid answer is [5,2,6,null,4,null,7].</span><br><span class="line"></span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  2   6</span><br><span class="line">   \   \</span><br><span class="line">    4   7</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>二分遍历BST，发现对应的节点root，查找右子树最小的元素current，将root.left接到current.left上，返回root.right<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1"><a href="#Go代码实现1" class="headerlink" title="Go代码实现1"></a>Go代码实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNode</span><span class="params">(root *TreeNode, key <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root = findDelete(root, key)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDelete</span><span class="params">(root *TreeNode, key <span class="keyword">int</span>)</span>*<span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val == key&#123;</span><br><span class="line">        <span class="keyword">if</span> root.Left == <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root.Right</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.Left</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current := root.Right</span><br><span class="line">        <span class="keyword">for</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            current = current.Left</span><br><span class="line">        &#125;</span><br><span class="line">        current.Left = root.Left</span><br><span class="line">        <span class="keyword">return</span> root.Right</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> root.Val&gt;key &#123;</span><br><span class="line">        root.Left = findDelete(root.Left, key)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root.Right = findDelete(root.Right, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 1162 ms 27.78%</p></blockquote><p><strong>参考</strong></p><ul><li><a href="https://leetcode.com/problems/delete-node-in-a-bst/discuss/93296/" target="_blank" rel="external">https://leetcode.com/problems/delete-node-in-a-bst/discuss/93296/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L449  Serialize and Deserialize BST</title>
      <link href="/2018-01-10-L449-Serialize-and-Deserialize-BST/"/>
      <url>/2018-01-10-L449-Serialize-and-Deserialize-BST/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/serialize-and-deserialize-bst/description/" target="_blank" rel="external">题目描述</a></h3><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p>The encoded string should be as compact as possible.</p><p>Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用前序遍历BST，然后按照前序遍历的结果生成二叉树<a id="more"></a></li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><h4 id="Python实现1"><a href="#Python实现1" class="headerlink" title="Python实现1"></a>Python实现1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""Encodes a tree to a single string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        data = <span class="string">"#"</span> + str(root.val)</span><br><span class="line">        data += self.serialize(root.left)</span><br><span class="line">        data += self.serialize(root.right)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums = [int(n) <span class="keyword">for</span> n <span class="keyword">in</span> data.split(<span class="string">'#'</span>) <span class="keyword">if</span> n != <span class="string">''</span>]</span><br><span class="line">        root = self.initBST(nums)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initBST</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        root = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            root = self.insertNode(root, n)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(self, root, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            root = TreeNode(n)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> root.val &gt; n:</span><br><span class="line">                root.left = self.insertNode(root.left, n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                root.right = self.insertNode(root.right, n)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    code = Codec()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        nums = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">        root = self.code.initBST(nums)</span><br><span class="line">        data = self.code.serialize(root)</span><br><span class="line">        t = self.code.deserialize(data)</span><br><span class="line">        data1 = self.code.serialize(t)</span><br><span class="line"></span><br><span class="line">        self.assertEqual(data, data1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 192 ms 15.49%</p></blockquote><p><strong>精简一下代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""Encodes a tree to a single string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        data = <span class="string">"#"</span> + str(root.val)</span><br><span class="line">        data += self.serialize(root.left)</span><br><span class="line">        data += self.serialize(root.right)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">doit</span><span class="params">(root, val)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                root = TreeNode(val)</span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> root.val &gt; val:</span><br><span class="line">                    root.left = doit(root.left, val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    root.right = doit(root.right,val)</span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line">        nums = [int(n) <span class="keyword">for</span> n <span class="keyword">in</span> data.split(<span class="string">'#'</span>) <span class="keyword">if</span> n != <span class="string">''</span>]</span><br><span class="line">        root = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> nums:</span><br><span class="line">            root = doit(root, val)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 173 ms 23.57%</p></blockquote><h4 id="Python实现2"><a href="#Python实现2" class="headerlink" title="Python实现2"></a>Python实现2</h4><p>— BST是BT的一种，故L297的方案解决此问题</p><ul><li><a href="https://dolphinsboy.github.io/2018-01-04-L297-Serialize-and-Deserialize-Binary-Tree/">https://dolphinsboy.github.io/2018-01-04-L297-Serialize-and-Deserialize-Binary-Tree/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L437  Path Sum III</title>
      <link href="/2018-01-10-L437-Path-Sum-III/"/>
      <url>/2018-01-10-L437-Path-Sum-III/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/path-sum-iii/description/" target="_blank" rel="external">题目描述</a></h3><p>You are given a binary tree in which each node contains an integer value.</p><p>Find the number of paths that sum to a given value.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p><p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</span><br><span class="line"></span><br><span class="line">      10</span><br><span class="line">     /  \</span><br><span class="line">    5   -3</span><br><span class="line">   / \    \</span><br><span class="line">  3   2   11</span><br><span class="line"> / \   \</span><br><span class="line">3  -2   1</span><br><span class="line"></span><br><span class="line">Return 3. The paths that sum to 8 are:</span><br><span class="line"></span><br><span class="line">1.  5 -&gt; 3</span><br><span class="line">2.  5 -&gt; 2 -&gt; 1</span><br><span class="line">3. -3 -&gt; 11</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><ul><li>前序递归遍历，记录每条路径以及其和curSum，判断curSum是否和target相同，相同的话加1</li><li>同时再判断path路径中是否有从给根开始的路径和等于target，相同的话再加1</li></ul><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>— 前序递归各个节点，判断各个节点上是否有路径和等于target</p><ul><li>记录前一个节点的和，用于判断使用<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——前序递归遍历，记录路径"><a href="#Go代码实现1——前序递归遍历，记录路径" class="headerlink" title="Go代码实现1——前序递归遍历，记录路径"></a>Go代码实现1——前序递归遍历，记录路径</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    preOrder(root, []<span class="keyword">int</span>&#123;&#125;, &amp;ret, <span class="number">0</span>, sum)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *TreeNode, path []<span class="keyword">int</span>, ret *<span class="keyword">int</span>, curSum <span class="keyword">int</span>, target <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    curSum += root.Val</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> curSum == target &#123;</span><br><span class="line">        *ret += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t:= curSum</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(path)<span class="number">-1</span>;i++ &#123;</span><br><span class="line">        t -= path[i]</span><br><span class="line">        <span class="keyword">if</span> t == target &#123;</span><br><span class="line">            *ret +=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    preOrder(root.Left, path, ret, curSum, target)</span><br><span class="line">    preOrder(root.Right, path, ret, curSum, target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现2——记录前一个节点的和以及递归判断各个节点"><a href="#Go代码实现2——记录前一个节点的和以及递归判断各个节点" class="headerlink" title="Go代码实现2——记录前一个节点的和以及递归判断各个节点"></a>Go代码实现2——记录前一个节点的和以及递归判断各个节点</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preOrder(root, <span class="number">0</span>, sum) + pathSum(root.Left, sum) + pathSum(root.Right, sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *TreeNode, prev <span class="keyword">int</span>, sum <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    cur := prev + root.Val</span><br><span class="line">    <span class="keyword">if</span> cur == sum&#123;</span><br><span class="line">        n=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n+preOrder(root.Left, cur, sum)+preOrder(root.Right, cur, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L501  Find Mode in Binary Search Tree</title>
      <link href="/2018-01-09-L501-Find-Mode-in-Binary-Search-Tree/"/>
      <url>/2018-01-09-L501-Find-Mode-in-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.<br>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.<br>Both the left and right subtrees must also be binary search trees.<br>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given BST [1,null,2,2],</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   2</span><br><span class="line">return [2].</span><br></pre></td></tr></table></figure></p><p>Note: If a tree has more than one mode, you can return them in any order.</p><p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用map记录各个元素出现的次数，返回次数最多对应的元素list</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——使用map"><a href="#Go代码实现1——使用map" class="headerlink" title="Go代码实现1——使用map"></a>Go代码实现1——使用map</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMode</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    DFS(root, m)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> m&#123;</span><br><span class="line">        path = <span class="built_in">append</span>(path, v)</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Ints(path)</span><br><span class="line">    n:=<span class="built_in">len</span>(path)<span class="number">-1</span></span><br><span class="line">    max:= path[n]</span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m&#123;</span><br><span class="line">        <span class="keyword">if</span> v==max &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, k)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _,ok := m[root.Val];!ok&#123;</span><br><span class="line">        m[root.Val] = <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        m[root.Val] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, m)</span><br><span class="line">    DFS(root.Right, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现2"><a href="#Go代码实现2" class="headerlink" title="Go代码实现2"></a>Go代码实现2</h4><ul><li><a href="https://www.cnblogs.com/grandyang/p/6436150.html" target="_blank" rel="external">https://www.cnblogs.com/grandyang/p/6436150.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L653  Two Sum IV Input is a BST</title>
      <link href="/2018-01-08-L653-Two-Sum-IV-Input-is-a-BST/"/>
      <url>/2018-01-08-L653-Two-Sum-IV-Input-is-a-BST/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  3   6</span><br><span class="line"> / \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Target = 9</span><br><span class="line"></span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  3   6</span><br><span class="line"> / \   \</span><br><span class="line">2   4   7</span><br><span class="line"></span><br><span class="line">Target = 28</span><br><span class="line"></span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h4><p>— 中序遍历生成有序数据组，然后使用二分法从有序数组中判断是否有两个数的和等于target</p><ul><li>时间复杂度为O(N)+O(logN)，空间复杂度为O(N)</li></ul><h4 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h4><ul><li>遍历BST，判断k-root.val是否这个BST中</li><li>时间复杂度为O(NlogN)，空间复杂度为O(1)<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——递归中序遍历、二分查找"><a href="#Go代码实现——递归中序遍历、二分查找" class="headerlink" title="Go代码实现——递归中序遍历、二分查找"></a>Go代码实现——递归中序遍历、二分查找</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTarget</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    path := inOrder(root)</span><br><span class="line"></span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(path)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;high &#123;</span><br><span class="line">        s:= path[low]+path[high]</span><br><span class="line">        <span class="keyword">if</span> s == k &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> s&gt;k &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    path = <span class="built_in">append</span>(path, inOrder(root.Left)...)</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    path = <span class="built_in">append</span>(path, inOrder(root.Right)...)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 74 ms 29.41%</p></blockquote><h4 id="Go代码实现——递归深度遍历-判断target是否在BST中"><a href="#Go代码实现——递归深度遍历-判断target是否在BST中" class="headerlink" title="Go代码实现——递归深度遍历+判断target是否在BST中"></a>Go代码实现——递归深度遍历+判断target是否在BST中</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTarget</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> find(root, root, k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(current *TreeNode,root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> current == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target := k - current.Val</span><br><span class="line">    flag := target != current.Val &amp;&amp; isExistsBST(root, target)</span><br><span class="line">    <span class="keyword">if</span> flag &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(current.Left, root, k) || find(current.Right, root, k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isExistsBST</span><span class="params">(root *TreeNode, target <span class="keyword">int</span>)</span><span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target == root.Val &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> target&gt;root.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> isExistsBST(root.Right, target)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExistsBST(root.Left, target)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime:78ms, 23.53%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L671  Second Minimum Node In a Binary Tree</title>
      <link href="/2018-01-08-L671-Second-Minimum-Node-In-a-Binary-Tree/"/>
      <url>/2018-01-08-L671-Second-Minimum-Node-In-a-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes.</p><p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.</p><p>If no such second minimum value exists, output -1 instead.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  2   5</span><br><span class="line">     / \</span><br><span class="line">    5   7</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure></p><p>Explanation: The smallest value is 2, the second smallest value is 5.<br>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p><p>Explanation: The smallest value is 2, but there isn’t any second smallest value.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个变量，一个表是最小，一个表示第二小，初始化为最大值</li><li>DFS遍历进行逐个比较</li></ul><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSecondMinimumValue</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> MAX  = <span class="number">100000</span></span><br><span class="line">    first := MAX</span><br><span class="line">    second := first<span class="number">-1</span></span><br><span class="line">    dfs(root, &amp;first, &amp;second)</span><br><span class="line">    <span class="keyword">if</span> second != MAX<span class="number">-1</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> second</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(root *TreeNode, first *<span class="keyword">int</span>, second *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val&lt;*first &#123;</span><br><span class="line">        *first = root.Val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val&lt;*second &amp;&amp; root.Val&gt;*first &#123;</span><br><span class="line">        *second = root.Val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root.Left, first, second)</span><br><span class="line">    dfs(root.Right, first, second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 2 ms 7.14%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L637  Average of Levels in Binary Tree</title>
      <link href="/2018-01-06-L637-Average-of-Levels-in-Binary-Tree/"/>
      <url>/2018-01-06-L637-Average-of-Levels-in-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.<br>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">Output: [3, 14.5, 11]</span><br></pre></td></tr></table></figure></p><p>Explanation:<br>The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11.<br>Hence return [3, 14.5, 11].<br>Note:<br>The range of node’s value is in the range of 32-bit signed integer.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用BFS，利用队列循环实现<a id="more"></a></li></ul><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现——BFS，队列循环实现"><a href="#Go实现——BFS，队列循环实现" class="headerlink" title="Go实现——BFS，队列循环实现"></a>Go实现——BFS，队列循环实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">averageOfLevels</span><span class="params">(root *TreeNode)</span> []<span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path := []<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue)&gt;<span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">        n := <span class="built_in">len</span>(queue)</span><br><span class="line">        <span class="keyword">var</span> s <span class="keyword">float64</span></span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ; i++ &#123;</span><br><span class="line">            current := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            s+= <span class="keyword">float64</span>(current.Val)</span><br><span class="line">            <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, current.Left)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, current.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        path = <span class="built_in">append</span>(path, s/<span class="keyword">float64</span>(n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 44 ms 30.56%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L617  Merge Two Binary Trees</title>
      <link href="/2018-01-06-L617-Merge-Two-Binary-Trees/"/>
      <url>/2018-01-06-L617-Merge-Two-Binary-Trees/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/description/" target="_blank" rel="external">题目描述</a></h3><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p><p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p><p><strong>Example 1</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">Output: </span><br><span class="line">Merged tree:</span><br><span class="line">         3</span><br><span class="line">        / \</span><br><span class="line">       4   5</span><br><span class="line">      / \   \ </span><br><span class="line">     5   4   7</span><br></pre></td></tr></table></figure></p><p>Note: The merging process must start from the root nodes of both trees.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>同时递归先序遍历t1和t2</li><li>如果t1和t2都不为nil，将t1.val+=t2.val，返回t1</li><li>如果t1为nil, t2非nil，返回t2</li><li>其他返回t1</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(t1 *TreeNode, t2 *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t1 != <span class="literal">nil</span> &amp;&amp; t2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        t1.Val += t2.Val</span><br><span class="line">        t1.Left = mergeTrees(t1.Left, t2.Left)</span><br><span class="line">        t1.Right = mergeTrees(t1.Right, t2.Right)</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> t1 == <span class="literal">nil</span> &amp;&amp; t2 != <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 62 ms 72.46%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L606 Construct String from Binary Tree</title>
      <link href="/2018-01-06-L606-Construct-String-from-Binary-Tree/"/>
      <url>/2018-01-06-L606-Construct-String-from-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/construct-string-from-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p><p>The null node needs to be represented by empty parenthesis pair “()”. And you need to omit all the empty parenthesis pairs that don’t affect the one-to-one mapping relationship between the string and the original binary tree.</p><p>Example 1:<br>Input: Binary tree: [1,2,3,4]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">     /   \</span><br><span class="line">    2     3</span><br><span class="line">   /    </span><br><span class="line">  4     </span><br><span class="line"></span><br><span class="line">Output: &quot;1(2(4))(3)&quot;</span><br><span class="line"></span><br><span class="line">Explanation: Originallay it needs to be &quot;1(2(4)())(3()())&quot;, </span><br><span class="line">but you need to omit all the unnecessary empty parenthesis pairs. </span><br><span class="line">And it will be &quot;1(2(4))(3)&quot;.</span><br><span class="line">Example 2:</span><br><span class="line">Input: Binary tree: [1,2,3,null,4]</span><br><span class="line">       1</span><br><span class="line">     /   \</span><br><span class="line">    2     3</span><br><span class="line">     \  </span><br><span class="line">      4 </span><br><span class="line"></span><br><span class="line">Output: &quot;1(2()(4))(3)&quot;</span><br><span class="line"></span><br><span class="line">Explanation: Almost the same as the first example, </span><br><span class="line">except we can&apos;t omit the first parenthesis pair to break the one-to-one mapping relationship between the i</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先序遍历</li><li>判断如果左子树为nil，而右子树非nil，左子树作为()输出</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现——递归方法"><a href="#Go实现——递归方法" class="headerlink" title="Go实现——递归方法"></a>Go实现——递归方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tree2str</span><span class="params">(t *TreeNode)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s := <span class="string">""</span></span><br><span class="line">    s += strconv.Itoa(t.Val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t.Left != <span class="literal">nil</span> &amp;&amp; t.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        s += <span class="string">"("</span> + tree2str(t.Left) + <span class="string">")"</span></span><br><span class="line">        s += <span class="string">"("</span> + tree2str(t.Right) + <span class="string">")"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> t.Left == <span class="literal">nil</span> &amp;&amp; t.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        s += <span class="string">"()"</span></span><br><span class="line">        s += <span class="string">"("</span> + tree2str(t.Right) + <span class="string">")"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> t.Left != <span class="literal">nil</span> &amp;&amp; t.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        s += <span class="string">"("</span> + tree2str(t.Left) + <span class="string">")"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go实现——非递归方法"><a href="#Go实现——非递归方法" class="headerlink" title="Go实现——非递归方法"></a>Go实现——非递归方法</h4><ul><li><a href="https://leetcode.com/problems/construct-string-from-binary-tree/discuss/103991" target="_blank" rel="external">https://leetcode.com/problems/construct-string-from-binary-tree/discuss/103991</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L563. Binary Tree Tilt</title>
      <link href="/2018-01-05-L563-Binary-Tree-Tilt/"/>
      <url>/2018-01-05-L563-Binary-Tree-Tilt/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-tree-tilt/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, return the tilt of the whole tree.</p><p>The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.</p><p>The tilt of the whole tree is defined as the sum of all nodes’ tilt.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">         1</span><br><span class="line">       /   \</span><br><span class="line">      2     3</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">Tilt of node 2 : 0</span><br><span class="line">Tilt of node 3 : 0</span><br><span class="line">Tilt of node 1 : |2-3| = 1</span><br><span class="line">Tilt of binary tree : 0 + 0 + 1 = 1</span><br></pre></td></tr></table></figure></p><p>Note:<br>The sum of node values in any subtree won’t exceed the range of 32-bit integer.<br>All the tilt values won’t exceed the range of 32-bit integer.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用后续遍历，计算每个节点左右节点之和，将两者差值的绝对值进行累加</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTilt</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    dfs(root, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(root *TreeNode, ret *<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    sLeft :=dfs(root.Left, ret)</span><br><span class="line">    sRight := dfs(root.Right, ret)</span><br><span class="line">    s += root.Val+sLeft+sRight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sLeft &gt;sRight &#123;</span><br><span class="line">        *ret += sLeft-sRight</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *ret += sRight-sLeft</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L543 Diameter of Binary Tree</title>
      <link href="/2018-01-05-L543-Diameter-of-Binary-Tree/"/>
      <url>/2018-01-05-L543-Diameter-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/diameter-of-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p><p>Example:<br>Given a binary tree<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \     </span><br><span class="line">4   5</span><br></pre></td></tr></table></figure></p><p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p>Note: The length of path between two nodes is represented by the number of edges between them.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用深度遍历，计算各个节点左右节点的高度是否小于一个最大值max</li><li>返回这个max</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">diameterOfBinaryTree</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d := <span class="number">0</span></span><br><span class="line">    height(root, &amp;d)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(root *TreeNode, d *<span class="keyword">int</span>)</span> <span class="title">int</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hLeft := height(root.Left, d)</span><br><span class="line">    hRight := height(root.Right, d)</span><br><span class="line">    <span class="keyword">if</span> *d&lt;hLeft+hRight &#123;</span><br><span class="line">        *d = hLeft + hRight</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> hLeft&gt;hRight &#123;</span><br><span class="line">        <span class="keyword">return</span> hLeft+<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hRight+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L538. Convert BST to Greater Tree</title>
      <link href="/2018-01-05-L538-Convert-BST-to-Greater-Tree/"/>
      <url>/2018-01-05-L538-Convert-BST-to-Greater-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><p>Example:</p><p>Input: The root of a Binary Search Tree like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   5</span><br><span class="line"> /   \</span><br><span class="line">2     13</span><br></pre></td></tr></table></figure></p><p>Output: The root of a Greater Tree like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   18</span><br><span class="line">  /   \</span><br><span class="line">20     13</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用类中序遍历（右中左）</li><li>先遍历右子树，将根节点加上右子树所有节点的和s，将根节点val修改为s</li><li>然后遍历左子树，将左子树每个节点加上s</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现——递归"><a href="#Go实现——递归" class="headerlink" title="Go实现——递归"></a>Go实现——递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    convert(root, &amp;s)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(root *TreeNode, s *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    convert(root.Right, s)</span><br><span class="line">    root.Val += *s</span><br><span class="line">    *s = root.Val</span><br><span class="line">    convert(root.Left, s)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go实现——循环"><a href="#Go实现——循环" class="headerlink" title="Go实现——循环"></a>Go实现——循环</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertNoRecursion</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack := []*TreeNode&#123;&#125;</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            current = current.Right</span><br><span class="line">        &#125;</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">            current = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            current.Val += s</span><br><span class="line">            s=current.Val</span><br><span class="line">            stack = <span class="built_in">append</span>(stack,current.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 535 ms 73.91%</p><h4 id="Go实现——O-n-n-时间复杂度"><a href="#Go实现——O-n-n-时间复杂度" class="headerlink" title="Go实现——O(n*n)时间复杂度"></a>Go实现——O(n*n)时间复杂度</h4></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> all_path []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    all_path = inOrder(root)</span><br><span class="line">    DFS(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    path = <span class="built_in">append</span>(path, inOrder(root.Left)...)</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    path = <span class="built_in">append</span>(path, inOrder(root.Right)...)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greaterSum</span><span class="params">(val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    s:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> all_path&#123;</span><br><span class="line">        <span class="keyword">if</span> v&gt;val &#123;</span><br><span class="line">            s+=v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root.Val += greaterSum(root.Val)</span><br><span class="line">    DFS(root.Left)</span><br><span class="line">    DFS(root.Right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 782 ms 13.04%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L297. Serialize and Deserialize Binary Tree</title>
      <link href="/2018-01-04-L297-Serialize-and-Deserialize-Binary-Tree/"/>
      <url>/2018-01-04-L297-Serialize-and-Deserialize-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p>For example, you may serialize the following tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   3</span><br><span class="line">   / \</span><br><span class="line">  4   5</span><br></pre></td></tr></table></figure><p>as “[1,2,3,null,null,4,5]”, just the same as how LeetCode OJ serializes a binary tree.<br>You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>本题目完全使用Discuss <a href="https://discuss.leetcode.com/topic/28041/recursive-preorder-python-and-c-o-n" target="_blank" rel="external">https://discuss.leetcode.com/topic/28041/recursive-preorder-python-and-c-o-n</a></li></ul><a id="more"></a><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""Encodes a tree to a single string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">doit</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                vals.append(str(node.val))</span><br><span class="line">                doit(node.left)</span><br><span class="line">                doit(node.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                vals.append(<span class="string">'#'</span>)</span><br><span class="line"></span><br><span class="line">        vals = []</span><br><span class="line">        doit(root)</span><br><span class="line">        n = len(vals) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> vals[n] == <span class="string">'#'</span>:</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join(vals[<span class="number">0</span>:n + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">doit</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val = next(vals)</span><br><span class="line">                <span class="keyword">if</span> val == <span class="string">'#'</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">                node = TreeNode(int(val))</span><br><span class="line">                node.left = doit()</span><br><span class="line">                node.right = doit()</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        vals = iter(data.split(<span class="string">','</span>))</span><br><span class="line">        <span class="keyword">return</span> doit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Codec()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case1</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">"1,2,3,#,#,4,5"</span></span><br><span class="line">        root = self.s.deserialize(data)</span><br><span class="line">        ret = self.s.serialize(root)</span><br><span class="line">        self.assertEquals(ret, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case2</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">"1,2,3,#,#,4"</span></span><br><span class="line">        root = self.s.deserialize(data)</span><br><span class="line">        ret = self.s.serialize(root)</span><br><span class="line">        self.assertEquals(ret, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_case3</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">"5,2,3,#,#,2,4,3,1"</span></span><br><span class="line">        ret = self.s.serialize(self.s.deserialize(data))</span><br><span class="line">        self.assertEquals(ret, data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L222 Count Complete Tree Nodes</title>
      <link href="/2018-01-03-L222-Count-Complete-Tree-Nodes/"/>
      <url>/2018-01-03-L222-Count-Complete-Tree-Nodes/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/count-complete-tree-nodes/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a complete binary tree, count the number of nodes.</p><p><a href="https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank" rel="external">Definition of a complete binary tree from Wikipedia</a>:<br>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.<br>It can have between 1 and 2**h nodes inclusive at the last level h.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用深度遍历以及广度遍历都是执行超时，这些算法时间复杂度都是O(N)</li><li>使用二分法以及判断是否为满二叉树计算，时间复杂度为O(logN)</li></ul><a id="more"></a><p><strong>完全二叉树</strong><br><img src="/images/L222_Complete_binary.jpg" width="400"></p><p><strong>满二叉树</strong><br><img src="/images/L222_Full_binary.jpg" width="400"></p><h3 id="Python代码实现——二分法"><a href="#Python代码实现——二分法" class="headerlink" title="Python代码实现——二分法"></a>Python代码实现——二分法</h3><h4 id="Python代码实现——二分法递归"><a href="#Python代码实现——二分法递归" class="headerlink" title="Python代码实现——二分法递归"></a>Python代码实现——二分法递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNodes</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        hLeft= <span class="number">0</span></span><br><span class="line">        hRight = <span class="number">0</span></span><br><span class="line">        pLeft = root</span><br><span class="line">        pRight = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pLeft:</span><br><span class="line">            hLeft+=<span class="number">1</span></span><br><span class="line">            pLeft = pLeft.left</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pRight:</span><br><span class="line">            hRight+=<span class="number">1</span></span><br><span class="line">            pRight = pRight.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hLeft == hRight:</span><br><span class="line">            <span class="keyword">return</span> pow(<span class="number">2</span>,hLeft)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.countNodes(root.left) + self.countNodes(root.right) + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L129 Sum Root to Leaf Numbers</title>
      <link href="/2018-01-02-L129-Sum-Root-to-Leaf-Numbers/"/>
      <url>/2018-01-02-L129-Sum-Root-to-Leaf-Numbers/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.</p><p>An example is the root-to-leaf path 1-&gt;2-&gt;3 which represents the number 123.</p><p>Find the total sum of all root-to-leaf numbers.</p><p>For example,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   3</span><br></pre></td></tr></table></figure><p>The root-to-leaf path 1-&gt;2 represents the number 12.<br>The root-to-leaf path 1-&gt;3 represents the number 13.</p><p>Return the sum = 12 + 13 = 25.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>深度遍历，使用map保存parent信息，通过叶子节点回溯到root</li><li>深度遍历递归</li><li>深度遍历非递归</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="map保存parent信息"><a href="#map保存parent信息" class="headerlink" title="map保存parent信息"></a>map保存parent信息</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumNumbers</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    parent := <span class="keyword">map</span>[*TreeNode]*TreeNode&#123;&#125;</span><br><span class="line">    parent[root] = <span class="literal">nil</span></span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    sumPath(root, parent, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(p *TreeNode, parent <span class="keyword">map</span>[*TreeNode]*TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">        path = <span class="built_in">append</span>(path, p.Val)</span><br><span class="line">        p = parent[p]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(path)<span class="number">-1</span></span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=n;i&gt;=<span class="number">0</span>;i-- &#123;</span><br><span class="line">        ret = ret*<span class="number">10</span> + path[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumPath</span><span class="params">(root *TreeNode, parent <span class="keyword">map</span>[*TreeNode]*TreeNode, ret *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">        *ret += count(root, parent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        parent[root.Left] = root</span><br><span class="line">        sumPath(root.Left, parent, ret)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        parent[root.Right] = root</span><br><span class="line">        sumPath(root.Right, parent, ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深度递归，使用path"><a href="#深度递归，使用path" class="headerlink" title="深度递归，使用path"></a>深度递归，使用path</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumNumbers</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    path2 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    dfs(root, path2, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(root *TreeNode, path []<span class="keyword">int</span>, ret *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        s := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(path);i++ &#123;</span><br><span class="line">            s = s*<span class="number">10</span> + path[i]</span><br><span class="line">        &#125;</span><br><span class="line">        *ret += s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        dfs(root.Left, path, ret)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span>&#123;</span><br><span class="line">        dfs(root.Right, path, ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深度遍历，非递归"><a href="#深度遍历，非递归" class="headerlink" title="深度遍历，非递归"></a>深度遍历，非递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumNumbers</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack,root)</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            current.Right.Val += current.Val*<span class="number">10</span></span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            current.Left.Val += current.Val*<span class="number">10</span></span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left == <span class="literal">nil</span> &amp;&amp; current.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            s += current.Val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广度遍历，非递归"><a href="#广度遍历，非递归" class="headerlink" title="广度遍历，非递归"></a>广度遍历，非递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumNumbers</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bfsNoRecursion(root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bfsNoRecursion</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            current.Left.Val += current.Val*<span class="number">10</span></span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            current.Right.Val += current.Val*<span class="number">10</span></span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left == <span class="literal">nil</span> &amp;&amp; current.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            s += current.Val</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Populating Next Right Pointers in Each Node I&amp;II</title>
      <link href="/2018-01-02-L116-Populating-Next-Right-Pointers-in-Each-Node/"/>
      <url>/2018-01-02-L116-Populating-Next-Right-Pointers-in-Each-Node/</url>
      <content type="html"><![CDATA[<h2 id="L116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#L116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="L116 Populating Next Right Pointers in Each Node"></a>L116 Populating Next Right Pointers in Each Node</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct TreeLinkNode &#123;</span><br><span class="line">  TreeLinkNode *left;</span><br><span class="line">  TreeLinkNode *right;</span><br><span class="line">  TreeLinkNode *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p><p>Initially, all next pointers are set to NULL.</p><p>Note:</p><p>You may only use constant extra space.<br>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).<br>For example,<br>Given the following perfect binary tree,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">   /  \</span><br><span class="line">  2    3</span><br><span class="line"> / \  / \</span><br><span class="line">4  5  6  7</span><br></pre></td></tr></table></figure><p>After calling your function, the tree should look like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1 -&gt; NULL</span><br><span class="line">   /  \</span><br><span class="line">  2 -&gt; 3 -&gt; NULL</span><br><span class="line"> / \  / \</span><br><span class="line">4-&gt;5-&gt;6-&gt;7 -&gt; NULL</span><br></pre></td></tr></table></figure></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="空间复杂度O-n"><a href="#空间复杂度O-n" class="headerlink" title="空间复杂度O(n)"></a>空间复杂度O(n)</h4><ul><li>深度遍历，将相同level节点保存到list中，然后遍历list设置next指针</li><li>广度遍历，将相同level节点保存到队列中，下一层的节点保存到临时队列中，然后遍历list设置next指针</li></ul><blockquote><p>这里两个思路都可以解决<a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="external">L117</a>的问题</p></blockquote><h4 id="使用常量空间复杂度"><a href="#使用常量空间复杂度" class="headerlink" title="使用常量空间复杂度"></a>使用常量空间复杂度</h4><ul><li>使用两个指针,依赖于上层已经建立的next关系</li><li>通过上层的next指针访问到右兄弟</li><li>此方案适合完全二叉树</li></ul><p><img src="/images/L116.png" alt="L116"></p><a id="more"></a><h3 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h3><h4 id="深度遍历，空间复杂度O-n"><a href="#深度遍历，空间复杂度O-n" class="headerlink" title="深度遍历，空间复杂度O(n)"></a>深度遍历，空间复杂度O(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param root, a tree link node</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        m = &#123;&#125;</span><br><span class="line">        self.levelOrder(root, m, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">            n = len(m[i])</span><br><span class="line">            k = <span class="number">0</span></span><br><span class="line">            head = m[i][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">while</span> k&lt;n<span class="number">-1</span>:</span><br><span class="line">                head.next = m[i][k+<span class="number">1</span>]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                head = head.next</span><br><span class="line">            head.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root, m, level)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> level <span class="keyword">in</span> m:</span><br><span class="line">            m[level].append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[level] = [root]</span><br><span class="line"></span><br><span class="line">        self.levelOrder(root.left, m, level+<span class="number">1</span>)</span><br><span class="line">        self.levelOrder(root.right, m, level+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="广度遍历，空间复杂度O-n"><a href="#广度遍历，空间复杂度O-n" class="headerlink" title="广度遍历，空间复杂度O(n)"></a>广度遍历，空间复杂度O(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param root, a tree link node</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(queue):</span><br><span class="line">            n = len(queue)</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> i&lt;n<span class="number">-1</span>:</span><br><span class="line">                    queue[i].next = queue[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> queue[i].left:</span><br><span class="line">                    tmp.append(queue[i].left)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> queue[i].right:</span><br><span class="line">                    tmp.append(queue[i].right)</span><br><span class="line">            queue = tmp</span><br></pre></td></tr></table></figure><h2 id="L117-Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#L117-Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="L117 Populating Next Right Pointers in Each Node II"></a>L117 Populating Next Right Pointers in Each Node II</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/" target="_blank" rel="external">题目描述</a></h3><p>Follow up for problem “Populating Next Right Pointers in Each Node”.</p><p>What if the given tree could be any binary tree? Would your previous solution still work?</p><p>Note:</p><p>You may only use constant extra space.<br>For example,<br>Given the following binary tree,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">   /  \</span><br><span class="line">  2    3</span><br><span class="line"> / \    \</span><br><span class="line">4   5    7</span><br></pre></td></tr></table></figure><p>After calling your function, the tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1 -&gt; NULL</span><br><span class="line">   /  \</span><br><span class="line">  2 -&gt; 3 -&gt; NULL</span><br><span class="line"> / \    \</span><br><span class="line">4-&gt; 5 -&gt; 7 -&gt; NULL</span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用上述的深度遍历和广度遍历都可以AC，但是空间复杂度为O(n)</li><li>使用层次遍历</li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param root, a tree link node</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            dummy = TreeLinkNode(<span class="number">0</span>)</span><br><span class="line">            t = dummy</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                <span class="keyword">if</span> root.left:</span><br><span class="line">                    t.next = root.left</span><br><span class="line">                    t = t.next</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> root.right:</span><br><span class="line">                    t.next = root.right</span><br><span class="line">                    t = t.next</span><br><span class="line">                root = root.next</span><br><span class="line">            root = dummy.next</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L230 Kth Smallest Element in a BST</title>
      <link href="/2018-01-01-L230-Kth-Smallest-Element-in-a-BST/"/>
      <url>/2018-01-01-L230-Kth-Smallest-Element-in-a-BST/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.</p><p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.</p><p>Follow up:<br>What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?<br>How would you optimize the kthSmallest routine?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用中序遍历，然后将path保存，返回path[k-1]的元素</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><ul><li>中序遍历，然后path[k-1]</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L230</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">  Val <span class="keyword">int</span></span><br><span class="line">  Left *TreeNode</span><br><span class="line">  Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initBST</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root *TreeNode</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        root = insertNode(root,v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(root *TreeNode, n <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        root = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">        root.Val = n</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> root.Val&gt;n &#123;</span><br><span class="line">            root.Left = insertNode(root.Left, n)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root.Right = insertNode(root.Right, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> path []<span class="keyword">int</span></span><br><span class="line">    inOrder(root, &amp;path)</span><br><span class="line">    <span class="keyword">return</span> path[k<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    inOrder(root.Left, path)</span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    inOrder(root.Right, path)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 22 ms 83.3%</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    inOrder(root, &amp;ret,&amp;n,k)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode, ret *<span class="keyword">int</span>, n *<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(root.Left, ret, n, k)</span><br><span class="line">    *n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> *n==k &#123;</span><br><span class="line">        *ret = root.Val</span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(root.Right, ret, n,k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——中序递归加入K个数判断"><a href="#Go代码实现——中序递归加入K个数判断" class="headerlink" title="Go代码实现——中序递归加入K个数判断"></a>Go代码实现——中序递归加入K个数判断</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> path []<span class="keyword">int</span></span><br><span class="line">    inOrder(root, &amp;path, k)</span><br><span class="line">    <span class="keyword">return</span> path[k<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    inOrder(root.Left, path, k)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*path) &lt; k &#123;</span><br><span class="line">        *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(root.Right, path, k)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 44ms 效果反而更差了。</p></blockquote><h4 id="Go代码实现——中序循环迭代实现1"><a href="#Go代码实现——中序循环迭代实现1" class="headerlink" title="Go代码实现——中序循环迭代实现1"></a>Go代码实现——中序循环迭代实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> current!=<span class="literal">nil</span>&#123;</span><br><span class="line">            current = current.Left</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current)</span><br><span class="line">        &#125;</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">            current = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            path = <span class="built_in">append</span>(path, current.Val)</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path[k<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> current!=<span class="literal">nil</span> &#123;</span><br><span class="line">            current = current.Left</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">            current = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            k--</span><br><span class="line">            <span class="keyword">if</span> k==<span class="number">0</span> &#123;</span><br><span class="line">                ret = current.Val</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——中序循环迭代实现2"><a href="#Go代码实现——中序循环迭代实现2" class="headerlink" title="Go代码实现——中序循环迭代实现2"></a>Go代码实现——中序循环迭代实现2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root != <span class="literal">nil</span> || <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">            root = root.Left</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">            root = root.Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path[k<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kthSmallest</span><span class="params">(root *TreeNode, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root != <span class="literal">nil</span> || <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">            root = root.Left</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            k--</span><br><span class="line">            <span class="keyword">if</span> k==<span class="number">0</span> &#123;</span><br><span class="line">                ret =root.Val</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            root = root.Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L173 Binary Search Tree Iterator</title>
      <link href="/2017-12-31-L173-Binary-Search-Tree-Iterator/"/>
      <url>/2017-12-31-L173-Binary-Search-Tree-Iterator/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-search-tree-iterator/description/" target="_blank" rel="external">题目描述</a></h3><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.<br>Calling next() will return the next smallest number in the BST.<br>Note: next() and hasNext() should run in average O(1) time and uses O(h) memory,where h is the height of the tree.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解题思路1——保存中序遍历结果"><a href="#解题思路1——保存中序遍历结果" class="headerlink" title="解题思路1——保存中序遍历结果"></a>解题思路1——保存中序遍历结果</h4><ul><li>二叉搜索树有序就是中序遍历，先将中序遍历保存到list中——空间复杂度为O(n)</li></ul><h4 id="解题思路2——实现O-h-空间复杂度"><a href="#解题思路2——实现O-h-空间复杂度" class="headerlink" title="解题思路2——实现O(h)空间复杂度"></a>解题思路2——实现O(h)空间复杂度</h4><ul><li>初始化的时候先中所有的left节点保存到stack中</li><li>next的时候stack栈顶元素，判断当前节点的right对应left节点压入栈。</li></ul><a id="more"></a><h3 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h3><h4 id="Python实现——空间复杂度为O-n"><a href="#Python实现——空间复杂度为O-n" class="headerlink" title="Python实现——空间复杂度为O(n)"></a>Python实现——空间复杂度为O(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nodes = []</span><br><span class="line">        self.preOrder(root, self.nodes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preOrder</span><span class="params">(self, root, nodes)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.preOrder(root.left, nodes)</span><br><span class="line">        nodes.append(root.val)</span><br><span class="line">        self.preOrder(root.right, nodes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.nodes) &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.nodes):</span><br><span class="line">            <span class="keyword">return</span> self.nodes.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="Python实现——空间复杂度为O-h"><a href="#Python实现——空间复杂度为O-h" class="headerlink" title="Python实现——空间复杂度为O(h)"></a>Python实现——空间复杂度为O(h)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            self.stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack) != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        current = self.stack[<span class="number">-1</span>]</span><br><span class="line">        left = current.right</span><br><span class="line">        self.stack.pop(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">while</span> left:</span><br><span class="line">            self.stack.append(left)</span><br><span class="line">            left = left.left</span><br><span class="line">        <span class="keyword">return</span> current.val</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L199 Binary Tree Right Side View</title>
      <link href="/2017-12-31-L199-Binary-Tree-Right-Side-View/"/>
      <url>/2017-12-31-L199-Binary-Tree-Right-Side-View/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-tree-right-side-view/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, imagine yourself standing on the right side of it,<br>return the values of the nodes you can see ordered from top to bottom.</p><p>For example:<br>Given the following binary tree,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1            &lt;---</span><br><span class="line"> /   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure><p>You should return [1, 3, 4].</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="深度遍历"><a href="#深度遍历" class="headerlink" title="深度遍历"></a>深度遍历</h5><ul><li>深度遍历，将各个节点保存到属于同一个level的map中</li><li>按照level由小到大的顺序，返回各个level中最后一个节点</li></ul><h5 id="广度遍历"><a href="#广度遍历" class="headerlink" title="广度遍历"></a>广度遍历</h5><ul><li>广度的遍历思想是使用队列</li><li>在广度遍历嵌套一个当前level的节点遍历，判断是当前level最后的一个节点则加入path中<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——深度遍历记录各个level对应的节点并保存到map中"><a href="#Go代码实现——深度遍历记录各个level对应的节点并保存到map中" class="headerlink" title="Go代码实现——深度遍历记录各个level对应的节点并保存到map中"></a>Go代码实现——深度遍历记录各个level对应的节点并保存到map中</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightSideView</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    h := travel(root, <span class="number">0</span>, m)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;h; i++ &#123;</span><br><span class="line">        arr := m[i]</span><br><span class="line">        k := <span class="built_in">len</span>(arr)<span class="number">-1</span></span><br><span class="line">        path = <span class="built_in">append</span>(path,arr[k])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, m <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> level</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, ok := m[level]; !ok &#123;</span><br><span class="line">        m[level] = []<span class="keyword">int</span>&#123;root.Val&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m[level] = <span class="built_in">append</span>(m[level], root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l := travel(root.Left, level+<span class="number">1</span>, m)</span><br><span class="line">    r := travel(root.Right, level+<span class="number">1</span>, m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> l&lt;r &#123;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——广度遍历"><a href="#Go代码实现——广度遍历" class="headerlink" title="Go代码实现——广度遍历"></a>Go代码实现——广度遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightSideView</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> queue []*TreeNode</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        n := <span class="built_in">len</span>(queue)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">            current := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i == n<span class="number">-1</span> &#123;</span><br><span class="line">                path = <span class="built_in">append</span>(path, current.Val)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, current.Left)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, current.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——深度遍历高效的方法"><a href="#Go代码实现——深度遍历高效的方法" class="headerlink" title="Go代码实现——深度遍历高效的方法"></a>Go代码实现——深度遍历高效的方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightSideView</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    rightView(root, <span class="number">0</span>, &amp;path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightView</span><span class="params">(root *TreeNode, currentDepth <span class="keyword">int</span>, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> currentDepth == <span class="built_in">len</span>(*path) &#123;</span><br><span class="line">        *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        rightView(root.Right, currentDepth+<span class="number">1</span>, path)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        rightView(root.Left, currentDepth+<span class="number">1</span>, path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>深度遍历，右节点先遍历，判断当前currentDepth是否等于len(path)。<br>注意前提条件是右节点先遍历。</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h4 id="本题目"><a href="#本题目" class="headerlink" title="本题目"></a>本题目</h4><ul><li><a href="https://www.geeksforgeeks.org/print-right-view-binary-tree-2/" target="_blank" rel="external">https://www.geeksforgeeks.org/print-right-view-binary-tree-2/</a></li><li><a href="https://leetcode.com/problems/binary-tree-right-side-view/discuss/56012/?page=1" target="_blank" rel="external">https://leetcode.com/problems/binary-tree-right-side-view/discuss/56012/?page=1</a></li></ul><h4 id="Level遍历"><a href="#Level遍历" class="headerlink" title="Level遍历"></a>Level遍历</h4><ul><li><a href="https://www.geeksforgeeks.org/level-order-tree-traversal/" target="_blank" rel="external">https://www.geeksforgeeks.org/level-order-tree-traversal/</a></li></ul><h4 id="广度遍历——使用队列"><a href="#广度遍历——使用队列" class="headerlink" title="广度遍历——使用队列"></a>广度遍历——使用队列</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rightSideView</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> queue []*TreeNode</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        current := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        path = <span class="built_in">append</span>(path, current.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L236 Lowest Common Ancestor of a Binary Tree</title>
      <link href="/2017-12-31-L236-Lowest-Common-Ancestor-of-a-Binary-Tree/"/>
      <url>/2017-12-31-L236-Lowest-Common-Ancestor-of-a-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.<br>According to the definition of LCA on Wikipedia:<br>“The lowest common ancestor is defined between two nodes v and w as the lowest node in T<br> that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     _______3______</span><br><span class="line">    /              \</span><br><span class="line"> ___5__          ___1__</span><br><span class="line">/      \        /      \</span><br><span class="line">6      _2       0       8</span><br><span class="line">      /  \</span><br><span class="line">      7   4</span><br></pre></td></tr></table></figure><p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3.<br>Another example is LCA of nodes 5 and 4 is 5,<br>since a node can be a descendant of itself according to the LCA definition.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>利用深度遍历，将各个节点的parent节点以及level保存在map</li><li>将p和q调整到同一个level，然后回溯其parent节点<a id="more"></a></li></ul><h3 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h3><h4 id="Python基础代码"><a href="#Python基础代码" class="headerlink" title="Python基础代码"></a>Python基础代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parent = &#123;&#125;</span><br><span class="line">        level_map = &#123;&#125;</span><br><span class="line">        self.dfs(root, parent, <span class="number">0</span>, level_map)</span><br><span class="line">        <span class="keyword">if</span> level_map[p] &gt; level_map[q]:</span><br><span class="line">            p,q = q,p</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> level_map[q] &gt; level_map[p]:</span><br><span class="line">            q = parent[q]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p != q:</span><br><span class="line">            p = parent[p]</span><br><span class="line">            q = parent[q]</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initTree</span><span class="params">(self, root, nums, i, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">-1</span>:</span><br><span class="line">                root = <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                root = TreeNode(nums[i])</span><br><span class="line">                root.left = self.initTree(root.left, nums, <span class="number">2</span> * i + <span class="number">1</span>, n)</span><br><span class="line">                root.right = self.initTree(root.right, nums, <span class="number">2</span> * i + <span class="number">2</span>, n)</span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root, parent, level, level_map)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        level_map[root] = level</span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            parent[root.left] = root</span><br><span class="line">            self.dfs(root.left, parent, level + <span class="number">1</span>, level_map)</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            parent[root.right] = root</span><br><span class="line">            self.dfs(root.right, parent, level + <span class="number">1</span>, level_map)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root, path, nodes)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        path.append(root.val)</span><br><span class="line">        nodes.append(root)</span><br><span class="line">        self.preorder(root.left, path,nodes)</span><br><span class="line">        self.preorder(root.right, path,nodes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTree</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        path = []</span><br><span class="line">        self.preorder(root, path, [])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join([str(n) <span class="keyword">for</span> n <span class="keyword">in</span> path])</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 116 ms 44.69%</p></blockquote><h4 id="Python测试用例"><a href="#Python测试用例" class="headerlink" title="Python测试用例"></a>Python测试用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        nums = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">        root = self.s.initTree(<span class="keyword">None</span>, nums, <span class="number">0</span>, len(nums))</span><br><span class="line">        ret = self.s.printTree(root)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"3 5 6 2 7 4 1 0 8"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        nums = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">        root = self.s.initTree(<span class="keyword">None</span>, nums, <span class="number">0</span>, len(nums))</span><br><span class="line">        nodes = []</span><br><span class="line">        self.s.preorder(root,[],nodes)</span><br><span class="line">        lca_node = self.s.lowestCommonAncestor(root,nodes[<span class="number">1</span>], nodes[<span class="number">-1</span>])</span><br><span class="line">        self.assertEqual(lca_node, root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="类似的题目"><a href="#类似的题目" class="headerlink" title="类似的题目"></a>类似的题目</h3><ul><li><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description" target="_blank" rel="external">L235</a></li><li>其解题思路：利用二叉搜索树的顺序性 <a href="https://dolphinsboy.github.io/2017-12-18-L235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/">代码实现</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L404 Sum of Left Leaves</title>
      <link href="/2017-12-29-L404-Sum-of-Left-Leaves/"/>
      <url>/2017-12-29-L404-Sum-of-Left-Leaves/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/sum-of-left-leaves/description/" target="_blank" rel="external">题目描述</a></h3><p>Find the sum of all left leaves in a given binary tree.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>There are two left leaves in the binary tree, with values 9 and 15 respectively.<br>Return 24.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用深度遍历</li><li>记录前一个节点prev，判断prev.Left是否等于当前叶子节点，如果等于说明才是其左叶子节点。</li><li>递归和循环都实现一下<a id="more"></a></li></ul><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——递归"><a href="#Go代码实现——递归" class="headerlink" title="Go代码实现——递归"></a>Go代码实现——递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    sumOfLeft(root, root, &amp;sum)</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeft</span><span class="params">(root *TreeNode, prev *TreeNode, sum *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp; prev.Left == root &#123;</span><br><span class="line">        *sum += root.Val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        sumOfLeft(root.Left, root, sum)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        sumOfLeft(root.Right, root, sum)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——循环"><a href="#Go代码实现——循环" class="headerlink" title="Go代码实现——循环"></a>Go代码实现——循环</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    prev := root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left == <span class="literal">nil</span> &amp;&amp; current.Right == <span class="literal">nil</span> &amp;&amp; prev.Left == current &#123;</span><br><span class="line">            sum += current.Val</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            prev = current</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">            prev = current</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L145 Binary Tree Postorder Traversal</title>
      <link href="/2017-12-29-L145-Binary-Tree-Postorder-Traversal/"/>
      <url>/2017-12-29-L145-Binary-Tree-Postorder-Traversal/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>For example:<br>Given binary tree {1,#,2,3},<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>return [3,2,1].</p><p>Note: Recursive solution is trivial, could you do it iteratively?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>后续递归，使用指针数组</li><li>后续递归，不使用指针数组</li><li>使用循环迭代</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——后续递归，使用指针数组"><a href="#Go代码实现——后续递归，使用指针数组" class="headerlink" title="Go代码实现——后续递归，使用指针数组"></a>Go代码实现——后续递归，使用指针数组</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    postOrder(root, &amp;path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postOrder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        postOrder(root.Left, path)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        postOrder(root.Right, path)</span><br><span class="line">    &#125;</span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——后续递归，不使用指针数组"><a href="#Go代码实现——后续递归，不使用指针数组" class="headerlink" title="Go代码实现——后续递归，不使用指针数组"></a>Go代码实现——后续递归，不使用指针数组</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path = <span class="built_in">append</span>(path, postorderTraversal(root.Left)...)</span><br><span class="line">    path = <span class="built_in">append</span>(path, postorderTraversal(root.Right)...)</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——使用stack循环迭代"><a href="#Go代码实现——使用stack循环迭代" class="headerlink" title="Go代码实现——使用stack循环迭代"></a>Go代码实现——使用stack循环迭代</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    head := root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        t := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> (t.Left == <span class="literal">nil</span> &amp;&amp; t.Right == <span class="literal">nil</span>) ||</span><br><span class="line">            t.Left == head ||</span><br><span class="line">            t.Right == head &#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, t.Val)</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            head = t</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> t.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, t.Right)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> t.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, t.Left)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现——使用stack循环迭代，每个节点入栈2次"><a href="#Go代码实现——使用stack循环迭代，每个节点入栈2次" class="headerlink" title="Go代码实现——使用stack循环迭代，每个节点入栈2次"></a>Go代码实现——使用stack循环迭代，每个节点入栈2次</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &amp;&amp; current == stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">if</span> current.Right!=<span class="literal">nil</span> &#123;</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, current.Val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>保持栈的元素顺序为root.Left,root.Right,root(栈底)。<br>对每个节点入栈2次，判断current是否为栈顶元素，如果是说明之前已经入栈过一次，无需再入栈了。</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.cnblogs.com/grandyang/p/4251757.html" target="_blank" rel="external">http://www.cnblogs.com/grandyang/p/4251757.html</a></li><li><a href="http://www.cnblogs.com/rain-lei/p/3705680.html" target="_blank" rel="external">http://www.cnblogs.com/rain-lei/p/3705680.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L144 Binary Tree Preorder Traversal</title>
      <link href="/2017-12-29-L144-Binary-Tree-Preorder-Traversal/"/>
      <url>/2017-12-29-L144-Binary-Tree-Preorder-Traversal/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>For example:<br>Given binary tree [1,null,2,3],</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>return [1,2,3].</p><p>Note: Recursive solution is trivial, could you do it iteratively?</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>前序遍历递归，使用指针数组</li><li>前序遍历递归，不使用指针数组</li><li>使用stack循环实现, 右节点先入栈，左节点后入栈</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现1——前序递归遍历，使用指针数组"><a href="#Go代码实现1——前序递归遍历，使用指针数组" class="headerlink" title="Go代码实现1——前序递归遍历，使用指针数组"></a>Go代码实现1——前序递归遍历，使用指针数组</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    preorder(root, &amp;path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    preorder(root.Left, path)</span><br><span class="line">    preorder(root.Right, path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现2–前序递归遍历，不使用指针数组"><a href="#Go代码实现2–前序递归遍历，不使用指针数组" class="headerlink" title="Go代码实现2–前序递归遍历，不使用指针数组"></a>Go代码实现2–前序递归遍历，不使用指针数组</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    path = <span class="built_in">append</span>(path, preorderTraversal(root.Left)...)</span><br><span class="line">    path = <span class="built_in">append</span>(path, preorderTraversal(root.Right)...)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go代码实现3——使用stack循环实现"><a href="#Go代码实现3——使用stack循环实现" class="headerlink" title="Go代码实现3——使用stack循环实现"></a>Go代码实现3——使用stack循环实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        root := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root.Right)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L572 Subtree of Another Tree</title>
      <link href="/2017-12-29-L572-Subtree-of-Another-Tree/"/>
      <url>/2017-12-29-L572-Subtree-of-Another-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/subtree-of-another-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>Given two non-empty binary trees s and t,<br>check whether tree t has exactly the same structure and node values with a subtree of s.<br>A subtree of s is a tree consists of a node in s and all of this node’s descendants.<br>The tree s could also be considered as a subtree of itself.</p><p>Example 1:<br>Given tree s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  4   5</span><br><span class="line"> / \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure></p><p>Given tree t:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  4 </span><br><span class="line"> / \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure></p><p>Return true, because t has the same structure and node values with a subtree of s.<br>Example 2:<br>Given tree s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  4   5</span><br><span class="line"> / \</span><br><span class="line">1   2</span><br><span class="line">   /</span><br><span class="line">  0</span><br></pre></td></tr></table></figure></p><p>Given tree t:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  4</span><br><span class="line"> / \</span><br><span class="line">1   2</span><br></pre></td></tr></table></figure></p><p>Return false.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先找到s和t的相同的节点，然后再比较s和t是否相同</li><li>如果当前子树不相同，再比较其他子树<a id="more"></a></li></ul><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L572</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">      Val <span class="keyword">int</span></span><br><span class="line">      Left *TreeNode</span><br><span class="line">      Right *TreeNode</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTree</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>, index <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index&lt;n &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[index] == <span class="number">-1</span> &#123;</span><br><span class="line">            root = <span class="literal">nil</span></span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">            root.Val = nums[index]</span><br><span class="line">            root.Left = initTree(root.Left, nums, <span class="number">2</span>*index+<span class="number">1</span>, n)</span><br><span class="line">            root.Right = initTree(root.Right, nums, <span class="number">2</span>*index+<span class="number">2</span>, n)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root.Left, path)</span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    inorder(root.Right, path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubtree</span><span class="params">(s *TreeNode, t *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    result := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> s.Val == t.Val &#123;</span><br><span class="line">        result = isSame(s, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !result&#123;</span><br><span class="line">        result = isSubtree(s.Left, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !result &#123;</span><br><span class="line">        result = isSubtree(s.Right, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSame</span><span class="params">(s *TreeNode, t *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s!= <span class="literal">nil</span> &amp;&amp; t != <span class="literal">nil</span> &amp;&amp; s.Val == t.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> isSame(s.Left, t.Left) &amp;&amp; isSame(s.Right, t.Right)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> s == <span class="literal">nil</span> &amp;&amp; t == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里判断两个TreeNode节点是否，是比较其Val是否相同。如果Val相同才有比较子树是否相同的可能。<br>即使树中出现多个Val相同的情况，除非子树相同，否则就不会返回是子树。<br>Runtime: 39 ms 80.00%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Combination Sum</title>
      <link href="/2017-12-28-Combination-Sum/"/>
      <url>/2017-12-28-Combination-Sum/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L39题目描述"><a href="#L39题目描述" class="headerlink" title="L39题目描述"></a><a href="https://leetcode.com/problems/combination-sum/description/" target="_blank" rel="external">L39题目描述</a></h4><p>Given a set of candidate numbers (C) (without duplicates) and a target number (T),<br>find all unique combinations in C where the candidate numbers sums to T.</p><p>The same repeated number may be chosen from C unlimited number of times.</p><p>Note:<br>All numbers (including target) will be positive integers.<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set [2, 3, 6, 7] and target 7,<br>A solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2, 2, 3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="L40题目描述"><a href="#L40题目描述" class="headerlink" title="L40题目描述"></a><a href="https://leetcode.com/problems/combination-sum-ii/description/" target="_blank" rel="external">L40题目描述</a></h4><p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p><p>Each number in C may only be used once in the combination.</p><p>Note:<br>All numbers (including target) will be positive integers.<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8,<br>A solution set is: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用DFS遍历</li><li>引入三个变量，ret记录所有路径，path记录当前路径，index记录索引，t为target-nums[i]</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="L39-Go实现"><a href="#L39-Go实现" class="headerlink" title="L39 Go实现"></a>L39 Go实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L39</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret :=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(candidates)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    combination(&amp;ret,path, candidates, target, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combination</span><span class="params">(ret *[][]<span class="keyword">int</span>, path []<span class="keyword">int</span>, nums []<span class="keyword">int</span>, target <span class="keyword">int</span>, index <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=index; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        t := target - nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t&lt;<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">            <span class="keyword">if</span> t == <span class="number">0</span> &#123;</span><br><span class="line">                tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(path))</span><br><span class="line">                <span class="built_in">copy</span>(tmp, path)</span><br><span class="line">                *ret = <span class="built_in">append</span>(*ret, tmp)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                combination(ret, path, nums, t, i)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            path = path[<span class="number">0</span>:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>L39是当前的元素可以被重复考虑<br>Runtime: 6 ms 91.53%</p></blockquote><h4 id="L40代码实现"><a href="#L40代码实现" class="headerlink" title="L40代码实现"></a>L40代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L40</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret :=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(candidates)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    combination(&amp;ret,path, candidates, target, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isInArray</span><span class="params">(ret [][]<span class="keyword">int</span>, arr []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> ret &#123;</span><br><span class="line">        flag := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> j,n := <span class="keyword">range</span> arr&#123;</span><br><span class="line">            <span class="keyword">if</span> v[j] != n &#123;</span><br><span class="line">                flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combination</span><span class="params">(ret *[][]<span class="keyword">int</span>, path []<span class="keyword">int</span>, nums []<span class="keyword">int</span>, target <span class="keyword">int</span>, index <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=index; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        t := target - nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t&lt;<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> t==<span class="number">0</span> &#123;</span><br><span class="line">                tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(path))</span><br><span class="line">                <span class="built_in">copy</span>(tmp, path)</span><br><span class="line">                <span class="keyword">if</span> isInArray(*ret, tmp) != <span class="literal">true</span>&#123;</span><br><span class="line">                    *ret = <span class="built_in">append</span>(*ret, tmp)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                combination(ret, path, nums, t, i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            path = path[<span class="number">0</span>:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个元素只能被计算一次，故在递归的时候，index设置为i+1。需要判断path是否在ret中出现。<br>Runtime: 9 ms 38.4%。<br>更进一步优化：如何去除数组是否存在的判断？</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L40</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(candidates)</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    combination(&amp;ret, path, candidates, target, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combination</span><span class="params">(ret *[][]<span class="keyword">int</span>, path []<span class="keyword">int</span>, nums []<span class="keyword">int</span>, target <span class="keyword">int</span>, index <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=index; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        t := target - nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t&lt;<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> i == index || nums[i] != nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            #nums[i] != nums[i<span class="number">-1</span>]相同的情况，跳过，避免重复计算</span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> t==<span class="number">0</span> &#123;</span><br><span class="line">                tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(path))</span><br><span class="line">                <span class="built_in">copy</span>(tmp, path)</span><br><span class="line">                *ret = <span class="built_in">append</span>(*ret, tmp)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                combination(ret, path, nums, t, i+<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            path = path[<span class="number">0</span>:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L33 Search in Rotated Sorted Array</title>
      <link href="/2017-12-28-L33-Search-in-Rotated-Sorted-Array/"/>
      <url>/2017-12-28-L33-Search-in-Rotated-Sorted-Array/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/" target="_blank" rel="external">题目描述</a></h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p><p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p><p>You may assume no duplicate exists in the array.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>基本思想还是使用二分搜索的思路，但是二分思想是基于有序的数组</li><li>通过low++以及high–和target进行比较，将数组变成有序的，然后再进行二分</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L33</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> low &lt;= high &amp;&amp; nums[high] &lt; target &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> low &lt;= high &amp;&amp; nums[low] &gt; target &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 9 ms 10.00%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L34 Search for a Range</title>
      <link href="/2017-12-28-L34-Search-for-a-Range/"/>
      <url>/2017-12-28-L34-Search-for-a-Range/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/search-for-a-range/description/" target="_blank" rel="external">题目描述</a></h3><p>Given an array of integers sorted in ascending order,<br>find the starting and ending position of a given target value.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>If the target is not found in the array, return [-1, -1].</p><p>For example,<br>Given [5, 7, 7, 8, 8, 10] and target value 8,<br>return [3, 4].</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>题目明确使用O(log n)时间复杂度，故采用二分搜索的算法</li><li>因为需要找到start以及end，在nums[mid]和target匹配上之后，再进行递归迭代找到所有</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——基础功能"><a href="#Go代码实现——基础功能" class="headerlink" title="Go代码实现——基础功能"></a>Go代码实现——基础功能</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L34</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    high := <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    start := high+<span class="number">1</span></span><br><span class="line">    end := <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    ret := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    binarySearch(nums, target,low, high, &amp;start, &amp;end)</span><br><span class="line">    <span class="keyword">if</span> start == high+<span class="number">1</span>&#123;</span><br><span class="line">        start = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, start)</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, end)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>, start *<span class="keyword">int</span>, end *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> mid <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;=high &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">if</span> mid &lt;*start &#123;</span><br><span class="line">                *start = mid</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> mid &gt; *end &#123;</span><br><span class="line">                *end = mid</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> low&lt;=mid<span class="number">-1</span> &#123;</span><br><span class="line">                binarySearch(nums,target, low, mid<span class="number">-1</span>, start, end)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> mid+<span class="number">1</span>&lt;=high&#123;</span><br><span class="line"></span><br><span class="line">                binarySearch(nums, target,mid+<span class="number">1</span>, high,start, end)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 16 ms 61.11%</p></blockquote><h4 id="Go代码实现——测试用例"><a href="#Go代码实现——测试用例" class="headerlink" title="Go代码实现——测试用例"></a>Go代码实现——测试用例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L34</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSearchRangeCase1</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">    ret := searchRange(nums, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret[<span class="number">0</span>] != <span class="number">3</span> || ret[<span class="number">1</span>] != <span class="number">4</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test SearchRange Case 1 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSearchRangeCase2</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">    ret := searchRange(nums, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret[<span class="number">0</span>] != <span class="number">-1</span> || ret[<span class="number">1</span>] != <span class="number">-1</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test SearchRange Case 2 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSearchRangeCase3</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret := searchRange(nums, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret[<span class="number">0</span>] != <span class="number">-1</span> || ret[<span class="number">1</span>] != <span class="number">-1</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test SearchRange Case 3 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L92 Reverse Linked List II</title>
      <link href="/2017-12-27-L92-Reverse-Linked-List-II/"/>
      <url>/2017-12-27-L92-Reverse-Linked-List-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-linked-list-ii/description/" target="_blank" rel="external">题目描述</a></h3><p>Reverse a linked list from position m to n. Do it in-place and in one-pass.</p><p>For example:<br>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2 and n = 4,</p><p>return 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL.</p><p>Note:<br>Given m, n satisfy the following condition:<br>1 ≤ m ≤ n ≤ length of list.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>定位到m和n位置对应的节点p1和p2，链表在p2位置断开，这样将链表分为3个部分</li><li>将p1进行翻转之后，然后将3个部分链表拼接起来</li><li>注意点：p1是否为head</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><h4 id="Go代码实现——基础功能"><a href="#Go代码实现——基础功能" class="headerlink" title="Go代码实现——基础功能"></a>Go代码实现——基础功能</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L92</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="keyword">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseBetween</span><span class="params">(head *ListNode, m <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p1 *ListNode</span><br><span class="line">    <span class="keyword">var</span> p2 *ListNode</span><br><span class="line">    <span class="keyword">var</span> p *ListNode</span><br><span class="line">    <span class="keyword">var</span> p3 *ListNode</span><br><span class="line">    nList := lenOfList(head)</span><br><span class="line">    prev := head</span><br><span class="line">    next := head</span><br><span class="line">    current := head</span><br><span class="line"></span><br><span class="line">    idx := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> idx &lt; m &amp;&amp; idx &lt; nList &#123;</span><br><span class="line">        prev = current</span><br><span class="line">        current = current.Next</span><br><span class="line">        idx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p1 = current</span><br><span class="line">    <span class="keyword">if</span> p1 != head &#123;</span><br><span class="line">        next = prev.Next</span><br><span class="line">        prev.Next = <span class="literal">nil</span></span><br><span class="line">        current = next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx &lt; n &amp;&amp; idx &lt; nList &#123;</span><br><span class="line">        current = current.Next</span><br><span class="line">        idx++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p2 = current</span><br><span class="line">    p3 = current.Next</span><br><span class="line">    p2.Next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    p = reverse(p1)</span><br><span class="line">    <span class="keyword">if</span> p1 == head &#123;</span><br><span class="line">        p1.Next = p3</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.Next = p</span><br><span class="line">        p1.Next = p3</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newHead := reverse(head.Next)</span><br><span class="line">    head.Next.Next = head</span><br><span class="line">    head.Next = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lenOfList</span><span class="params">(head *ListNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="number">1</span></span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">        n++</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initList</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    head := <span class="built_in">new</span>(ListNode)</span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = n</span><br><span class="line">        current.Next = node</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(head *ListNode)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    ret := <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        ret += strconv.Itoa(head.Val) + <span class="string">"-&gt;"</span></span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    ret += strconv.Itoa(head.Val)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 0 ms 50.00%</p></blockquote><h4 id="Go代码实现——测试用例"><a href="#Go代码实现——测试用例" class="headerlink" title="Go代码实现——测试用例"></a>Go代码实现——测试用例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L92</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInitList</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;2-&gt;3-&gt;4"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test init List failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReverseBetweenCase1</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = reverseBetween(head, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;4-&gt;3-&gt;2-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test reverse between case1 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReverseBetweenCase2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = reverseBetween(head, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"3-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test reverse between case2 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReverseBetweenCase3</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = reverseBetween(head, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"3-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test reverse between case3 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReverseBetweenCase4</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = reverseBetween(head, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"2-&gt;1-&gt;3"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test reverse between case4 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L143 Reorder List</title>
      <link href="/2017-12-27-L143-Reorder-List/"/>
      <url>/2017-12-27-L143-Reorder-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reorder-list/description/" target="_blank" rel="external">题目描述</a></h3><p>Given a singly linked list L:<br><span>$L0&rarr;L1&rarr;&hellip;&rarr;Ln-1&rarr;Ln,$</span><!-- Has MathJax --></p><p>reorder it to:<br><span>$L0&rarr;Ln&rarr;L1&rarr;Ln-1&rarr;L2&rarr;Ln-2&rarr;&hellip;$</span><!-- Has MathJax --></p><p>You must do this in-place without altering the nodes’ values.</p><p>For example,<br>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个指针slow和fast，slow移动一次，fast移动两次，直到fast为最后一个元素</li><li>在slow的地方将链表断开，将slow之后的list翻转</li><li>将head和slow进行一一merge合并</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reorderList</span><span class="params">(head *ListNode)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    slow := head</span><br><span class="line">    fast := head</span><br><span class="line">    <span class="keyword">var</span> prev *ListNode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">        prev = slow</span><br><span class="line">        slow = slow.Next</span><br><span class="line">    &#125;</span><br><span class="line">    prev.Next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    current1 := head</span><br><span class="line">    current2 := reverseList(slow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> current1.Next != <span class="literal">nil</span> &amp;&amp; current2.Next != <span class="literal">nil</span>&#123;</span><br><span class="line">        next1 := current1.Next</span><br><span class="line">        current1.Next = current2</span><br><span class="line">        next2 := current2.Next</span><br><span class="line">        current2.Next = next1</span><br><span class="line"></span><br><span class="line">        current1 = next1</span><br><span class="line">        current2 = next2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current1.Next = current2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    newHead := reverseList(head.Next)</span><br><span class="line">    head.Next.Next = head</span><br><span class="line">    head.Next = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 25 ms 50.00%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L328 Odd Even Linked List</title>
      <link href="/2017-12-27-L328-Odd-Even-Linked-List/"/>
      <url>/2017-12-27-L328-Odd-Even-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/odd-even-linked-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Given a singly linked list, group all odd nodes together followed by the even nodes. </span><br><span class="line">Please note here we are talking about the node number and not the value in the nodes.</span><br><span class="line">You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL,</span><br><span class="line">return 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">The relative order inside both the even and odd groups should remain as it was in the input. </span><br><span class="line">The first node is considered odd, the second node even and so on ...</span><br><span class="line"></span><br><span class="line">Credits:</span><br><span class="line">Special thanks to @DjangoUnchained for adding this problem and creating all test cases.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个指针，一个表示odd，一个表示even</li><li>然后将event加到odd的最后一个</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="Go实现1"><a href="#Go实现1" class="headerlink" title="Go实现1"></a>Go实现1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">oddEvenList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> odd_head *ListNode</span><br><span class="line">    <span class="keyword">var</span> even_head *ListNode</span><br><span class="line"></span><br><span class="line">    current:= head</span><br><span class="line">    idx := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span>&#123;</span><br><span class="line">        next := current.Next</span><br><span class="line">        current.Next = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">if</span> idx % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            even_head = insertNode(even_head, current)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            odd_head = insertNode(odd_head, current)</span><br><span class="line">        &#125;</span><br><span class="line">        current = next</span><br><span class="line">        idx+=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tail := odd_head</span><br><span class="line">    <span class="keyword">for</span> tail.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        tail = tail.Next</span><br><span class="line">    &#125;</span><br><span class="line">    tail.Next = even_head</span><br><span class="line">    <span class="keyword">return</span> odd_head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 39 ms</p></blockquote><h4 id="Go实现2"><a href="#Go实现2" class="headerlink" title="Go实现2"></a>Go实现2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">func oddEvenList(head *ListNode) *ListNode &#123;</span><br><span class="line">    if head == nil || head.Next == nil &#123;</span><br><span class="line">        return head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var odd_head *ListNode</span><br><span class="line">    var odd_tail *ListNode</span><br><span class="line">    var even_head *ListNode</span><br><span class="line">    var event_tail *ListNode</span><br><span class="line"></span><br><span class="line">    current := head</span><br><span class="line">    idx := 1</span><br><span class="line">    for current != nil &#123;</span><br><span class="line">        next := current.Next</span><br><span class="line">        current.Next = nil</span><br><span class="line">        if idx%2 == 0 &#123;</span><br><span class="line">            if even_head == nil&#123;</span><br><span class="line">                even_head = current</span><br><span class="line">                event_tail = current</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                event_tail.Next = current</span><br><span class="line">                event_tail = current</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if odd_head == nil&#123;</span><br><span class="line">                odd_head = current</span><br><span class="line">                odd_tail = current</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                odd_tail.Next = current</span><br><span class="line">                odd_tail = current</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        current = next</span><br><span class="line">        idx += 1</span><br><span class="line">    &#125;</span><br><span class="line">    odd_tail.Next = even_head</span><br><span class="line">    return odd_head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记录odd以及even的tail节点，直接在tail节点后面插入，而非每次插入节点都找到tail节点<br>Runtime: 9 ms 10%</p></blockquote><h4 id="Go程序——测试用例"><a href="#Go程序——测试用例" class="headerlink" title="Go程序——测试用例"></a>Go程序——测试用例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L328</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInitList</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;2-&gt;3-&gt;4"</span>&#123;</span><br><span class="line">        t.Error(<span class="string">"Test init List failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOddEvenListCase1</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = oddEvenList(head)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;3-&gt;5-&gt;2-&gt;4"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test oddEvenList Case1 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOddEvenListCase2</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = oddEvenList(head)</span><br><span class="line">    ret := printList(head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"2-&gt;4-&gt;6-&gt;7-&gt;1-&gt;3-&gt;5-&gt;8"</span>&#123;</span><br><span class="line">        t.Error(<span class="string">"test oddEvenList Case2 failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L725 Split Linked List in Parts</title>
      <link href="/2017-12-26-L725-Split-Linked-List-in-Parts/"/>
      <url>/2017-12-26-L725-Split-Linked-List-in-Parts/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/split-linked-list-in-parts/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Given a (singly) linked list with head node root, write a function to split the linked list into k consecutive linked list &quot;parts&quot;.</span><br><span class="line"></span><br><span class="line">The length of each part should be as equal as possible: no two parts should have a size differing by more than 1. This may lead to some parts being null.</span><br><span class="line"></span><br><span class="line">The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.</span><br><span class="line"></span><br><span class="line">Return a List of ListNode&apos;s representing the linked list parts that are formed.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: </span><br><span class="line">root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3</span><br><span class="line">Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br><span class="line">Explanation:</span><br><span class="line">The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The length of root will be in the range [0, 1000].</span><br><span class="line">Each value of a node in the input will be an integer in the range [0, 999].</span><br><span class="line">k will be an integer in the range [1, 50].</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>题目描述很长，首先根据list的长度n以及k算好各个部分的长度，基数为n/k，按照n%k对前面的部分进行加1</li><li>遍历list，按照各个部分的长度进行切分</li></ul><a id="more"></a><h3 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">splitListToParts</span><span class="params">(root *ListNode, k <span class="keyword">int</span>)</span> []*<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    ret := []*ListNode&#123;&#125;</span><br><span class="line">    n := lenOfList(root)</span><br><span class="line">    arr := getArr(n, k)</span><br><span class="line">    current := root</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;k; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> current == <span class="literal">nil</span> &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, <span class="literal">nil</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head:= current</span><br><span class="line">            <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;arr[i]<span class="number">-1</span>;j++ &#123;</span><br><span class="line">                current = current.Next</span><br><span class="line">            &#125;</span><br><span class="line">            next := current.Next</span><br><span class="line">            current.Next = <span class="literal">nil</span></span><br><span class="line">            current = next</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, head)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArr</span><span class="params">(n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line">    delta:=n%k</span><br><span class="line"></span><br><span class="line">    arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;k;i++ &#123;</span><br><span class="line">        arr[i] = n/k</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;delta;i++ &#123;</span><br><span class="line">        arr[i] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lenOfList</span><span class="params">(head *ListNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">        current = current.Next</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L445 Add Two Numbers II</title>
      <link href="/2017-12-26-L445-Add-Two-Numbers-II/"/>
      <url>/2017-12-26-L445-Add-Two-Numbers-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/add-two-numbers-ii/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">You are given two non-empty linked lists representing two non-negative integers. </span><br><span class="line">The most significant digit comes first and each of their nodes contain a single digit. </span><br><span class="line">Add the two numbers and return it as a linked list.</span><br><span class="line">You may assume the two numbers do not contain any leading zero, except the number 0 itself.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>将各自list转换为int，然后将int转换为list表示，在Go会遇到int越界问题</li><li>将各自list转换为array，然后计算两个array相加，并在加的时候生成list</li></ul><a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n1 = self.listToInt(l1)</span><br><span class="line">        n2 = self.listToInt(l2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.intToList(n1+n2)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listToInt</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            n = n * <span class="number">10</span> + head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToList</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ListNode(n)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#在head前面插入新节点        </span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            node = ListNode(n%<span class="number">10</span>)</span><br><span class="line">            n = n/<span class="number">10</span></span><br><span class="line">            node.next = head</span><br><span class="line">            head = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><blockquote><p>需要增加如下的测试，l1=[0] 和l2=[0]的情况<br>Runtime: 142 ms, 39.01.00%</p></blockquote><h4 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    nums1 := listToArr(l1)</span><br><span class="line">    nums2 := listToArr(l2)</span><br><span class="line">    <span class="keyword">return</span> addTwoArr(nums1, nums2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listToArr</span><span class="params">(head *ListNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    arr := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        arr = <span class="built_in">append</span>(arr, head.Val)</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoArr</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    n1 := <span class="built_in">len</span>(nums1)<span class="number">-1</span></span><br><span class="line">    n2 := <span class="built_in">len</span>(nums2)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">var</span> head *ListNode</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    n:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n1&gt;=<span class="number">0</span> || n2&gt;=<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n1&gt;=<span class="number">0</span> &amp;&amp; n2&gt;=<span class="number">0</span> &#123;</span><br><span class="line">            n = ret + nums1[n1] + nums2[n2]</span><br><span class="line">            n1--</span><br><span class="line">            n2--</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> n1&gt;=<span class="number">0</span> &#123;</span><br><span class="line">            n = ret + nums1[n1]</span><br><span class="line">            n1--</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> n2&gt;=<span class="number">0</span>&#123;</span><br><span class="line">            n = ret + nums2[n2]</span><br><span class="line">            n2--</span><br><span class="line">        &#125;</span><br><span class="line">        ret = n/<span class="number">10</span></span><br><span class="line">        n = n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        node:= <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = n</span><br><span class="line">        node.Next = head</span><br><span class="line">        head = node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret &gt;<span class="number">0</span> &#123;</span><br><span class="line">        node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = ret</span><br><span class="line">        node.Next = head</span><br><span class="line">        head = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 35 ms 23.53%</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L148 Sort List</title>
      <link href="/2017-12-26-L148-Sort-List/"/>
      <url>/2017-12-26-L148-Sort-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/sort-list/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sort a linked list in O(n log n) time using constant space complexity.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>排序中O(nlogn)时间复杂度有快速排序、归并排序以及对堆排序</li><li>适合链表的只有归并排序</li></ul><a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Go代码实现"><a href="#Go代码实现" class="headerlink" title="Go代码实现"></a>Go代码实现</h4><h4 id="Go代码函数包"><a href="#Go代码函数包" class="headerlink" title="Go代码函数包"></a>Go代码函数包</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L148</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="keyword">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow := head</span><br><span class="line">    fast := head</span><br><span class="line">    prev := head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">        prev = slow</span><br><span class="line">        slow = slow.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prev.Next = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(sortList(head), sortList(slow))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(head1 *ListNode, head2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head1 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head1.Val&lt;head2.Val &#123;</span><br><span class="line">        head1.Next = merge(head1.Next, head2)</span><br><span class="line">        <span class="keyword">return</span> head1</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head2.Next = merge(head1, head2.Next)</span><br><span class="line">        <span class="keyword">return</span> head2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initList</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    head := <span class="built_in">new</span>(ListNode)</span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = n</span><br><span class="line">        current.Next = node</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(head *ListNode)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    ret := <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        ret += strconv.Itoa(head.Val) + <span class="string">"-&gt;"</span></span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    ret += strconv.Itoa(head.Val)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go函数测试用例"><a href="#Go函数测试用例" class="headerlink" title="Go函数测试用例"></a>Go函数测试用例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> L148</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInitList</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test Init failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMerge</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    nums1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line">    nums2 := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">    head1 := initList(nums1)</span><br><span class="line">    head2 := initList(nums2)</span><br><span class="line">    head := merge(head1, head2)</span><br><span class="line">    ret := printList(head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test Merge failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSort</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">    head := initList(nums)</span><br><span class="line">    head = sortList(head)</span><br><span class="line">    ret := printList(head)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test Sort failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime  26 ms</p></blockquote><h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><blockquote><p>Python中使用上述相同的代码会遇到RuntimeError: maximum recursion depth exceeded。<br>将merge部分的递归算法修改为使用循环的方式，可以解决这个问题。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line">        prev = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            prev = slow</span><br><span class="line">            slow = slow.next</span><br><span class="line">        prev.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> self.merge(self.sortList(head), self.sortList(slow))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, head1, head2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head1:</span><br><span class="line">            <span class="keyword">return</span> head2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head2:</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line"></span><br><span class="line">        newHead = ListNode(<span class="number">0</span>)</span><br><span class="line">        current = newHead</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                current.next = head1</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.next = head2</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            current.next = head1</span><br><span class="line">        <span class="keyword">elif</span> head2:</span><br><span class="line">            current.next = head2</span><br><span class="line">        <span class="keyword">return</span> newHead.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"5-&gt;4-&gt;3-&gt;2-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">        head = self.s.sortList(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        head = self.s.sortList(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        head1 = self.s.initList([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">        head2 = self.s.initList([<span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">        head = self.s.merge(head1, head2)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>Runtime 412 ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L86 Partition List</title>
      <link href="/2017-12-23-L86-Partition-List/"/>
      <url>/2017-12-23-L86-Partition-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/partition-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list and a value x, partition it such that all nodes less than x </span><br><span class="line">come before nodes greater than or equal to x.</span><br><span class="line"></span><br><span class="line">You should preserve the original relative order of the nodes in each of the two partitions.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2 and x = 3,</span><br><span class="line">return 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="空间复杂度O-n-和时间复杂度O-n"><a href="#空间复杂度O-n-和时间复杂度O-n" class="headerlink" title="空间复杂度O(n)和时间复杂度O(n)"></a>空间复杂度O(n)和时间复杂度O(n)</h4><ul><li>使用left和right两个指针，构建左右两个子链表，然后把两个子链表连接起来</li></ul><h4 id="不使用额外空间"><a href="#不使用额外空间" class="headerlink" title="不使用额外空间"></a>不使用额外空间</h4><ul><li>首先计算节点个数以及最后一个节点tail</li><li>遍历链表，将节点值大于等于x的节点移动到tail后面<a id="more"></a></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python实现1-空间复杂度和时间复杂度都为O-n"><a href="#Python实现1-空间复杂度和时间复杂度都为O-n" class="headerlink" title="Python实现1-空间复杂度和时间复杂度都为O(n)"></a>Python实现1-空间复杂度和时间复杂度都为O(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        left = <span class="keyword">None</span></span><br><span class="line">        right = <span class="keyword">None</span></span><br><span class="line">        newHead = <span class="keyword">None</span></span><br><span class="line">        newRight = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">                    left = ListNode(head.val)</span><br><span class="line">                    newHead = left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left.next = ListNode(head.val)</span><br><span class="line">                    left = left.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">                    right = ListNode(head.val)</span><br><span class="line">                    newRight = right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right.next = ListNode(head.val)</span><br><span class="line">                    right = right.next</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            left.next = newRight</span><br><span class="line">            <span class="keyword">return</span> newHead</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> newRight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line">        head = self.s.partition(head, <span class="number">3</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>])</span><br><span class="line">        head = self.s.partition(head,<span class="number">0</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        <span class="keyword">print</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>Runtime 46 ms, 22.16%</p></blockquote><h4 id="Python实现-不使用额外空间"><a href="#Python实现-不使用额外空间" class="headerlink" title="Python实现-不使用额外空间"></a>Python实现-不使用额外空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        tail = head</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tail.next:</span><br><span class="line">            tail = tail.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        prev = ListNode(<span class="number">0</span>)</span><br><span class="line">        prev.next = head</span><br><span class="line">        current = head</span><br><span class="line">        tmp = tail</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx&lt;n <span class="keyword">and</span> current.next:</span><br><span class="line">            <span class="keyword">if</span> current.val &gt;=x:</span><br><span class="line">                <span class="keyword">if</span> current == head:</span><br><span class="line">                    head = current.next</span><br><span class="line">                    prev.next = head</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    prev.next = current.next</span><br><span class="line">                tmp.next = current</span><br><span class="line">                current.next = <span class="keyword">None</span></span><br><span class="line">                current = prev.next</span><br><span class="line">                tmp = tmp.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.next</span><br><span class="line">                prev = prev.next</span><br><span class="line">            idx+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line">        head = self.s.partition(head, <span class="number">3</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>])</span><br><span class="line">        head = self.s.partition(head,<span class="number">0</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">        head = self.s.partition(head, <span class="number">1</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;3-&gt;4"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_5</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">        head = self.s.partition(head, <span class="number">2</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_6</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">        head = self.s.partition(head, <span class="number">1</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L24 Swap Nodes in Pairs</title>
      <link href="/2017-12-23-L24-Swap-Nodes-in-Pairs/"/>
      <url>/2017-12-23-L24-Swap-Nodes-in-Pairs/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/swap-nodes-in-pairs/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list, swap every two adjacent nodes and return its head.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br><span class="line"></span><br><span class="line">Your algorithm should use only constant space. </span><br><span class="line">You may not modify the values in the list, only nodes itself can be changed.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用三个指针进行处理，prev为前一个节点，p1和p2表示pair，将p1和p2指向进行交换</li><li>使用递归的方法,将newHead设置为head，递归head.next.next返回node，将newHead、head以及node的指针调整一下<a id="more"></a></li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        p1 = head</span><br><span class="line">        p2 = head.next</span><br><span class="line">        newHead = <span class="keyword">None</span></span><br><span class="line">        prev = ListNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p2:</span><br><span class="line">            p1.next = p2.next</span><br><span class="line">            p2.next = p1</span><br><span class="line">            prev.next = p2</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> newHead:</span><br><span class="line">                newHead = prev</span><br><span class="line">            prev = p1</span><br><span class="line">            p1 = p1.next</span><br><span class="line">            <span class="keyword">if</span> p1:</span><br><span class="line">                p2 = p1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        head = self.s.swapPairs(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;1-&gt;4-&gt;3"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">        head = self.s.swapPairs(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">        head = self.s.swapPairs(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;1-&gt;3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="Python递归实现"><a href="#Python递归实现" class="headerlink" title="Python递归实现"></a>Python递归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        newHead = head.next</span><br><span class="line">        node = self.swapPairs(head.next.next)</span><br><span class="line">        newHead.next = head</span><br><span class="line">        head.next = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L82 Remove Duplicates from Sorted List II</title>
      <link href="/2017-12-23-L82-Remove-Duplicates-from-Sorted-List-II/"/>
      <url>/2017-12-23-L82-Remove-Duplicates-from-Sorted-List-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given a sorted linked list, delete all nodes that have duplicate numbers, </span><br><span class="line">leaving only distinct numbers from the original list.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.</span><br><span class="line">Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/submissions/1/" target="_blank" rel="external">相似题目 L83 Remove Duplicates from Sorted List</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>在L83中，是删除重复的节点，但是保留一个节点，本题目是不保留，所有都删除</li><li>在L83中是slow和fast两个指针就足够</li><li>在本题目需要使用3个指针，增加一个prev指针，记录slow前一个节点，slow和fast进行比较</li></ul><a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.next</span><br><span class="line">        prev = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">while</span> fast <span class="keyword">and</span> fast.val == slow.val:</span><br><span class="line">                slow.next = fast.next</span><br><span class="line">                fast = fast.next</span><br><span class="line">                flag = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                prev = slow</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> prev:</span><br><span class="line">                    prev.next = fast</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    head = fast</span><br><span class="line">            <span class="keyword">if</span> fast:</span><br><span class="line">                slow = slow.next</span><br><span class="line">                fast = fast.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        head = self.s.deleteDuplicates(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">        head = self.s.deleteDuplicates(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;3"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">        head = self.s.deleteDuplicates(head)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 49 ms, beats 67.2% of python submissions</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L61 Rotate List</title>
      <link href="/2017-12-22-L61-Rotate-List/"/>
      <url>/2017-12-22-L61-Rotate-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/rotate-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given a list, rotate the list to the right by k places, where k is non-negative.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL and k = 2,</span><br><span class="line"></span><br><span class="line">return 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h4><ul><li>计算链表的长度，重新设置k=k%n，保证k都比n小</li><li>使用slow和fast两个指针，初始化为head</li><li>fast移动k步之后，判断fast是否为空，若为空，直接返回head</li><li>否则，将fast和slow都移动至fast为链表的最后一个节点</li><li>将fast.next指向head，然后slow.next为新的head，将slow.next断开</li></ul><h4 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h4><ul><li>将链表收尾相连</li><li>从head开始走n-k%n步之后，将链表断开<a id="more"></a></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python实现1"><a href="#Python实现1" class="headerlink" title="Python实现1"></a>Python实现1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        current = head</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            current = current.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        k = k % n</span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> idx &lt; k:</span><br><span class="line">            fast = fast.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast.next:</span><br><span class="line">            fast = fast.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        fast.next = head</span><br><span class="line">        fast = slow.next</span><br><span class="line">        slow.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> fast</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        ret = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            ret += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        ret += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1-&gt;2-&gt;3-&gt;4-&gt;5"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        head = self.s.rotateRight(head, <span class="number">2</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"4-&gt;5-&gt;1-&gt;2-&gt;3"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        head = self.s.rotateRight(head, <span class="number">4</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        <span class="keyword">print</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>])</span><br><span class="line">        head = self.s.rotateRight(head, <span class="number">99</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_5</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">        head = self.s.rotateRight(head, <span class="number">1</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_6</span><span class="params">(self)</span>:</span></span><br><span class="line">        head = self.s.initList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">        head = self.s.rotateRight(head, <span class="number">2000000000</span>)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"2-&gt;3-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="Python实现2"><a href="#Python实现2" class="headerlink" title="Python实现2"></a>Python实现2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        current = head</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> current.next:</span><br><span class="line">            current = current.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        current.next = head</span><br><span class="line">        k = n - k % n</span><br><span class="line">        current = head</span><br><span class="line">        idx = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; k:</span><br><span class="line">            current = current.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        newHead = current.next</span><br><span class="line">        current.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> newHead</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L23 Merge k Sorted Lists</title>
      <link href="/2017-12-21-L23-Merge-k-Sorted-Lists/"/>
      <url>/2017-12-21-L23-Merge-k-Sorted-Lists/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Merge k sorted linked lists and return it as one sorted list. </span><br><span class="line">Analyze and describe its complexity.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>选择首个非空list作为head，将其他list的数据有序的插入到list中，时间复杂度O(n*k),空间复杂为O(1)</li><li>递归合并两个list，合并list算法使用O(m+n)=O(N)时间复杂度，再加上合并时间复杂度O(logK)，总的复杂度为O(N*logN)</li><li>LeetCode上Discuss中有使用Python库实现的，更快的方法 <a href="https://discuss.leetcode.com/topic/10448/python-133ms-solution" target="_blank" rel="external">https://discuss.leetcode.com/topic/10448/python-133ms-solution</a><a id="more"></a></li></ul><h3 id="Python实现-O-n-k"><a href="#Python实现-O-n-k" class="headerlink" title="Python实现 O(n*k)"></a>Python实现 O(n*k)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        head = lists[<span class="number">0</span>]</span><br><span class="line">        idx = <span class="number">1</span></span><br><span class="line">        n = len(lists)</span><br><span class="line">        <span class="keyword">while</span> idx &lt; n:</span><br><span class="line">            current = lists[idx]</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = current</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> current:</span><br><span class="line">                    next = current.next</span><br><span class="line">                    head = self.insertNode(head, current)</span><br><span class="line">                    current = next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(self, head, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        current = head</span><br><span class="line">        prev = head</span><br><span class="line">        <span class="keyword">while</span> current <span class="keyword">and</span> node.val &gt; current.val:</span><br><span class="line">            prev = current</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">if</span> prev != current:</span><br><span class="line">            prev.next = node</span><br><span class="line">            node.next = current</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.next = prev</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initList</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = ListNode(n)</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                current.next = node</span><br><span class="line">                current = node</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> str</span><br><span class="line">        <span class="keyword">while</span> head.next:</span><br><span class="line">            str += <span class="string">"%d-&gt;"</span> % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        str += <span class="string">"%d"</span> % head.val</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        lists = [self.s.initList([]), self.s.initList([<span class="number">-1</span>, <span class="number">5</span>, <span class="number">11</span>]),</span><br><span class="line">                 self.s.initList([]), self.s.initList([<span class="number">6</span>, <span class="number">10</span>])]</span><br><span class="line"></span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"-1-&gt;5-&gt;6-&gt;10-&gt;11"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        lists = [self.s.initList([]), self.s.initList([])]</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></span><br><span class="line">        lists = [self.s.initList([<span class="number">0</span>]), self.s.initList([<span class="number">1</span>])]</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"0-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></span><br><span class="line">        lists = [self.s.initList([<span class="number">1</span>]), self.s.initList([<span class="number">0</span>])]</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, <span class="string">"0-&gt;1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>使用Python单元测试<br>Runtime: Runtime: 6182 ms</p></blockquote><h3 id="Python实现2"><a href="#Python实现2" class="headerlink" title="Python实现2"></a>Python实现2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.partion(lists, <span class="number">0</span>, len(lists)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partion</span><span class="params">(self, lists, low, high)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> low == high:</span><br><span class="line">            <span class="keyword">return</span> lists[low]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> low&lt;high:</span><br><span class="line">                mid = (low+high)/<span class="number">2</span></span><br><span class="line">                node1 = self.partion(lists, low, mid)</span><br><span class="line">                node2 = self.partion(lists, mid+<span class="number">1</span>, high)</span><br><span class="line">                <span class="keyword">return</span> self.mergeList(node1, node2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeList</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> q</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">and</span> q:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                <span class="keyword">if</span> p.val &lt; q.val:</span><br><span class="line">                    head = p</span><br><span class="line">                    p = p.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    head = q</span><br><span class="line">                    q = q.next</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> p.val &lt; q.val:</span><br><span class="line">                    current.next = p</span><br><span class="line">                    p = p.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    current.next = q</span><br><span class="line">                    q = q.next</span><br><span class="line">                current = current.next</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            current.next = p</span><br><span class="line">            p = p.next</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            current.next = q</span><br><span class="line">            q = q.next</span><br><span class="line">            current = current.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 145 ms</p><p>###Python实现3-全部使用递归</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line">import unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListNode(object):</span><br><span class="line">    def __init__(self, x):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def mergeKLists(self, lists):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type lists: List[ListNode]</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not lists:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.partion(lists, 0, len(lists)-1)</span><br><span class="line"></span><br><span class="line">    def partion(self, lists, low, high):</span><br><span class="line">        if low == high:</span><br><span class="line">            return lists[low]</span><br><span class="line">        else:</span><br><span class="line">            if low&lt;high:</span><br><span class="line">                mid = (low+high)/2</span><br><span class="line">                node1 = self.partion(lists, low, mid)</span><br><span class="line">                node2 = self.partion(lists, mid+1, high)</span><br><span class="line">                return self.mergeList(node1, node2)</span><br><span class="line">            else:</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">    def mergeList(self, p, q):</span><br><span class="line">        if not p:</span><br><span class="line">            return q</span><br><span class="line">        if not q:</span><br><span class="line">            return p</span><br><span class="line"></span><br><span class="line">        if p.val &lt; q.val:</span><br><span class="line">            p.next = self.mergeList(p.next, q)</span><br><span class="line">            return p</span><br><span class="line">        else:</span><br><span class="line">            q.next = self.mergeList(p, q.next)</span><br><span class="line">            return q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def insertNode(self, head, node):</span><br><span class="line">        if not head:</span><br><span class="line">            return node</span><br><span class="line"></span><br><span class="line">        current = head</span><br><span class="line">        prev = head</span><br><span class="line">        while current and node.val &gt; current.val:</span><br><span class="line">            prev = current</span><br><span class="line">            current = current.next</span><br><span class="line">        if prev != current:</span><br><span class="line">            prev.next = node</span><br><span class="line">            node.next = current</span><br><span class="line">            return head</span><br><span class="line">        else:</span><br><span class="line">            node.next = prev</span><br><span class="line">            return node</span><br><span class="line"></span><br><span class="line">    def initList(self, twoDArr):</span><br><span class="line">        lists = []</span><br><span class="line"></span><br><span class="line">        for nums in twoDArr:</span><br><span class="line">            if not nums:</span><br><span class="line">                lists.append(None)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            head = None</span><br><span class="line">            current = None</span><br><span class="line"></span><br><span class="line">            for n in nums:</span><br><span class="line">                if not head:</span><br><span class="line">                    head = ListNode(n)</span><br><span class="line">                    current = head</span><br><span class="line">                else:</span><br><span class="line">                    node = ListNode(n)</span><br><span class="line">                    current.next = node</span><br><span class="line">                    current = node</span><br><span class="line">            lists.append(head)</span><br><span class="line">        return lists</span><br><span class="line"></span><br><span class="line">    def printList(self, head):</span><br><span class="line">        str = &quot;&quot;</span><br><span class="line">        if not head:</span><br><span class="line">            return str</span><br><span class="line">        while head.next:</span><br><span class="line">            str += &quot;%d-&gt;&quot; % head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        str += &quot;%d&quot; % head.val</span><br><span class="line">        return str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Test(unittest.TestCase):</span><br><span class="line">    s = Solution()</span><br><span class="line"></span><br><span class="line">    def test_1(self):</span><br><span class="line">        lists = self.s.initList([[], [-1, 5, 11], [], [6, 10]])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, &quot;-1-&gt;5-&gt;6-&gt;10-&gt;11&quot;)</span><br><span class="line"></span><br><span class="line">    def test_2(self):</span><br><span class="line">        lists = self.s.initList([[], []])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">    def test_3(self):</span><br><span class="line">        lists = self.s.initList([[0], [1]])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, &quot;0-&gt;1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_4(self):</span><br><span class="line">        lists = self.s.initList([[1], [0]])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, &quot;0-&gt;1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_5(self):</span><br><span class="line">        lists = self.s.initList([[1, 2, 2], [1, 1, 2]])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        self.assertEqual(ret, &quot;1-&gt;1-&gt;1-&gt;2-&gt;2-&gt;2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_6(self):</span><br><span class="line">        lists = self.s.initList([[1], [2]])</span><br><span class="line">        head = self.s.mergeKLists(lists)</span><br><span class="line">        ret = self.s.printList(head)</span><br><span class="line">        print ret</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><blockquote><p>将测试用例修改下，输入为二维数组，但是全部递归的程序，触发RuntimeError: maximum recursion depth exceeded</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L19 Remove Nth Node From End of List</title>
      <link href="/2017-12-20-L19-Remove-Nth-Node-From-End-of-List/"/>
      <url>/2017-12-20-L19-Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list, remove the nth node from the end of list and return its head.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line"></span><br><span class="line">   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br><span class="line">Note:</span><br><span class="line">Given n will always be valid.</span><br><span class="line">Try to do this in one pass.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先获取List的长度，获取需要删除的第n个节点的前一个节点</li><li>如果当前节点是head，返回head.next</li><li>否则，将prev.next设置为current.next</li></ul><a id="more"></a><h3 id="Python实现1"><a href="#Python实现1" class="headerlink" title="Python实现1"></a>Python实现1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        current = head</span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            length+=<span class="number">1</span></span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n&gt;=length:</span><br><span class="line">            n = n%length</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = length-n</span><br><span class="line"></span><br><span class="line">        current = head</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        prev = current</span><br><span class="line">        <span class="keyword">while</span> idx&lt;n:</span><br><span class="line">            prev = current</span><br><span class="line">            current = current.next</span><br><span class="line">            idx+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current != head:</span><br><span class="line">            prev.next = current.next</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 59 ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L326 Power of Three</title>
      <link href="/2017-12-20-L326-Power-of-Three/"/>
      <url>/2017-12-20-L326-Power-of-Three/</url>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L203 Range Sum Query Immutable</title>
      <link href="/2017-12-20-L303-Range-Sum-Query-Immutable/"/>
      <url>/2017-12-20-L303-Range-Sum-Query-Immutable/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/range-sum-query-immutable/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">Given nums = [-2, 0, 3, -5, 2, -1]</span><br><span class="line"></span><br><span class="line">sumRange(0, 2) -&gt; 1</span><br><span class="line">sumRange(2, 5) -&gt; -1</span><br><span class="line">sumRange(0, 5) -&gt; -3</span><br><span class="line">Note:</span><br><span class="line">You may assume that the array does not change.</span><br><span class="line">There are many calls to sumRange function.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>针对每次输入都计算直接使用sum <strong>无需额外空间</strong></li><li>计算sum值，根据index输入输出 <strong>需要空间</strong></li></ul><a id="more"></a><h3 id="Python实现1"><a href="#Python实现1" class="headerlink" title="Python实现1"></a>Python实现1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> sum(self.nums[i:j+<span class="number">1</span>])</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 959 ms</p></blockquote><h3 id="Python实现2"><a href="#Python实现2" class="headerlink" title="Python实现2"></a>Python实现2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sums =[]</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            s+=n</span><br><span class="line">            self.sums.append(s)</span><br><span class="line">        <span class="keyword">print</span> self.sums</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.sums[j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.sums[j]-self.sums[i<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 109 ms</p></blockquote><h3 id="Python实现3"><a href="#Python实现3" class="headerlink" title="Python实现3"></a>Python实现3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sums = [<span class="number">0</span>]*(len(nums)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,len(nums)+<span class="number">1</span>):</span><br><span class="line">            self.sums[i] = self.sums[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.sums[j+<span class="number">1</span>]-self.sums[i]</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 62ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Word Pattern</title>
      <link href="/2017-12-19-L290-Word-Pattern/"/>
      <url>/2017-12-19-L290-Word-Pattern/</url>
      <content type="html"><![CDATA[<h3 id="L290题目描述"><a href="#L290题目描述" class="headerlink" title="L290题目描述"></a><a href="https://leetcode.com/problems/word-pattern/description/" target="_blank" rel="external">L290题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given a pattern and a string str, find if str follows the same pattern.</span><br><span class="line"></span><br><span class="line">Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot; should return true.</span><br><span class="line">pattern = &quot;abba&quot;, str = &quot;dog cat cat fish&quot; should return false.</span><br><span class="line">pattern = &quot;aaaa&quot;, str = &quot;dog cat cat dog&quot; should return false.</span><br><span class="line">pattern = &quot;abba&quot;, str = &quot;dog dog dog dog&quot; should return false.</span><br><span class="line">Notes:</span><br><span class="line">You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用map进行判断，将pattern每个字符作为key，判断对应的str上字符串val</li><li>如果pattern中单个字符不在map中，判断对应的val是否已经存在</li><li>如果pattern中字符在map中，判断当前的val和map对应的val是否相同</li></ul><a id="more"></a><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern, str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type pattern: str</span></span><br><span class="line"><span class="string">        :type str: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = &#123;&#125;</span><br><span class="line">        tmp_list = str.split()</span><br><span class="line">        n = len(pattern)</span><br><span class="line">        <span class="keyword">if</span> len(pattern) != len(tmp_list):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            k = pattern[i]</span><br><span class="line">            v = tmp_list[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> m:</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">in</span> m.values():</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    m[k] = v</span><br><span class="line">            <span class="keyword">elif</span> m[k] != v:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="keyword">print</span> s.wordPattern(<span class="string">"abba"</span>, <span class="string">"dog cat cat dog"</span>)</span><br><span class="line"><span class="keyword">print</span> s.wordPattern(<span class="string">"abba"</span>, <span class="string">"dog cat cat fish"</span>)</span><br><span class="line"><span class="keyword">print</span> s.wordPattern(<span class="string">"aaaa"</span>, <span class="string">"dog cat cat dog"</span>)</span><br><span class="line"><span class="keyword">print</span> s.wordPattern(<span class="string">"abba"</span>, <span class="string">"dog dog dog dog"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 32 ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L283 Move Zeroes</title>
      <link href="/2017-12-19-L283-Move-Zeroes/"/>
      <url>/2017-12-19-L283-Move-Zeroes/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given an array nums, write a function to move all 0&apos;s to the end of it while maintaining the relative order of the non-zero elements.</span><br><span class="line"></span><br><span class="line">For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You must do this in-place without making a copy of the array.</span><br><span class="line">Minimize the total number of operations.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>逐个判断，如果当前数为0，在其后面的数中一个不为0的数与其交换。时间复杂度O(n*2)，无额外空间</li><li><p>使用两个索引进行i,j</p><blockquote><p>初始化i=0,j=1<br>如果nums[i]和nums[j]两个数都为非0，i++,j++<br>如果nums[i]为0，nums[j]非零，将i和j交换，i++,j++<br>如果nums[i]非零，nums[j]为0，将i++<br>如果nums[i]为0，nums[j]非零，将j++</p></blockquote></li><li><p>使用两个索引</p><blockquote><p>初始化pos=0，i=0<br>当遇到nums[i]不为0的时候，将nums[i]赋值给nums[pos]， pos++,i++<br>如果遇到nums[i]为0的时候，将i++<br>将pos到list尾部所有元素，赋值为0</p><a id="more"></a></blockquote></li></ul><h3 id="Python实现O-n-2"><a href="#Python实现O-n-2" class="headerlink" title="Python实现O(n*2)"></a>Python实现O(n*2)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        n = len(nums)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                k = i+<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> k&lt;n:</span><br><span class="line">                    <span class="keyword">if</span> nums[k]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    k+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> k&lt;n <span class="keyword">and</span> nums[k]:</span><br><span class="line">                    nums[i],nums[k] = nums[k], nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="comment">#nums = [0,0,1]</span></span><br><span class="line">nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">12</span>]</span><br><span class="line">s.moveZeroes(nums)</span><br><span class="line"><span class="keyword">print</span> nums</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 423 ms</p></blockquote><h3 id="Python实现-O-n"><a href="#Python实现-O-n" class="headerlink" title="Python实现-O(n)"></a>Python实现-O(n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        n = len(nums)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;n<span class="number">-1</span> <span class="keyword">and</span> j&lt;n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">and</span> nums[j]:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] == <span class="number">0</span> <span class="keyword">and</span> nums[j]:</span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] <span class="keyword">and</span> nums[j] == <span class="number">0</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="comment">#nums = [2,1]</span></span><br><span class="line"><span class="comment">#nums = [0,1,0,3,12]</span></span><br><span class="line">nums = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">s.moveZeroes(nums)</span><br><span class="line"><span class="keyword">print</span> nums</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 76 ms</p></blockquote><h3 id="Python实现-赋值法O-n"><a href="#Python实现-赋值法O-n" class="headerlink" title="Python实现-赋值法O(n)"></a>Python实现-赋值法O(n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        n = len(nums)</span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span>:</span><br><span class="line">                nums[pos] = nums[i]</span><br><span class="line">                pos+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> pos&lt;n:</span><br><span class="line">            nums[pos]=<span class="number">0</span></span><br><span class="line">            pos+=<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 75 ms</p></blockquote><p><strong>LeetCode上最优的方案</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums == []:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num != <span class="number">0</span>:</span><br><span class="line">                nums[pos] = num</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - pos):</span><br><span class="line">            nums[-i<span class="number">-1</span>]=<span class="number">0</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Runtime: 46 ms</p></blockquote><p>使用range迭代的效果更高</p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L263 Ugly Number</title>
      <link href="/2017-12-18-L263-Ugly-Number/"/>
      <url>/2017-12-18-L263-Ugly-Number/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/ugly-number/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Write a program to check whether a given number is an ugly number.</span><br><span class="line">Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. </span><br><span class="line">For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</span><br><span class="line">Note that 1 is typically treated as an ugly number.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>判断n是否能被2，3，5整除，如果不可以直接返回false</li><li>如果可以将n替换为n/[2,3,5]后，再进行判断</li></ul><a id="more"></a><h3 id="Go实现1"><a href="#Go实现1" class="headerlink" title="Go实现1"></a>Go实现1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isUgly</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num&lt;=<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num &gt;<span class="number">1</span> &#123;</span><br><span class="line">        flag:= <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> _,x := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;&#123;</span><br><span class="line">            <span class="keyword">if</span> num%x==<span class="number">0</span> &#123;</span><br><span class="line">                num = num/x</span><br><span class="line">                flag=<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !flag &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现2"><a href="#Go实现2" class="headerlink" title="Go实现2"></a>Go实现2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isUgly</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num&lt;=<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,x := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;&#123;</span><br><span class="line">        <span class="keyword">for</span> num%x==<span class="number">0</span> &#123;</span><br><span class="line">            num = num/x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L204 Count Primes</title>
      <link href="/2017-12-18-L204-Count-Primes/"/>
      <url>/2017-12-18-L204-Count-Primes/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Count the number of prime numbers less than a non-negative number, n.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>遍历n-1到2判断其是否为prime，如果是进行count++。<strong>此算法在n&gt;=499979以上会出现超时。</strong></li><li>使用数学算法 <a href="https://open.163.com/movie/2012/10/0/6/M99VJKUHC_M9ENDUB06.html" target="_blank" rel="external">https://open.163.com/movie/2012/10/0/6/M99VJKUHC_M9ENDUB06.html</a><a id="more"></a></li></ul><h3 id="Go实现——逐一判断"><a href="#Go实现——逐一判断" class="headerlink" title="Go实现——逐一判断"></a>Go实现——逐一判断</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span>  &#123;</span><br><span class="line">    sqrt := <span class="keyword">int</span>(math.Sqrt(<span class="keyword">float64</span>(n)))</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> sqrt&gt;<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n%sqrt==<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        sqrt--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPrimes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    n = n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> isPrime(n) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        n--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(isPrime(<span class="number">3</span>))</span><br><span class="line">    <span class="comment">//在MacAir测试执行时间会超过2s</span></span><br><span class="line">    fmt.Println(countPrimes(<span class="number">499979</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现——埃拉托斯特尼筛法"><a href="#Go实现——埃拉托斯特尼筛法" class="headerlink" title="Go实现——埃拉托斯特尼筛法"></a>Go实现——埃拉托斯特尼筛法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPrimes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    m :=<span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">2</span>; i&lt;=<span class="keyword">int</span>(math.Sqrt(<span class="keyword">float64</span>(n)));i++ &#123;</span><br><span class="line">        k:=i</span><br><span class="line">        j:=<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> k*j&lt;n &#123;</span><br><span class="line">            <span class="keyword">if</span> m[k*j] ==<span class="number">0</span> &#123;</span><br><span class="line">                m[k*j] = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v :=<span class="keyword">range</span> m[<span class="number">2</span>:n]&#123;</span><br><span class="line">        <span class="keyword">if</span> v==<span class="number">0</span> &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L235 Lowest Common Ancestor of a Binary Search Tree</title>
      <link href="/2017-12-18-L235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/"/>
      <url>/2017-12-18-L235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</span><br><span class="line"></span><br><span class="line">According to the definition of LCA on Wikipedia: </span><br><span class="line">“The lowest common ancestor is defined between two nodes v and w as the lowest </span><br><span class="line">node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</span><br><span class="line"></span><br><span class="line">        _______6______</span><br><span class="line">       /              \</span><br><span class="line">    ___2__          ___8__</span><br><span class="line">   /      \        /      \</span><br><span class="line">   0      _4       7       9</span><br><span class="line">         /  \</span><br><span class="line">         3   5</span><br><span class="line">For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. </span><br><span class="line">Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="DFS-Level-适合通用的二叉树"><a href="#DFS-Level-适合通用的二叉树" class="headerlink" title="DFS+Level(适合通用的二叉树)"></a>DFS+Level(适合通用的二叉树)</h4><ul><li>使用DFS遍历，将各个节点对应的父节点信息保存到map中</li><li>使用递归的前序遍历，将各个节点对应的level信息保存到map （由于没有想到如何从DFS遍历中获取level信息，故从新递归计算）</li><li>将p和q移动到同一个level，然后逐步回溯其父节点</li></ul><h4 id="利用二叉搜索树的特性"><a href="#利用二叉搜索树的特性" class="headerlink" title="利用二叉搜索树的特性"></a>利用二叉搜索树的特性</h4><ul><li>保持p.val&lt;q.val</li><li>如果p.val&gt;root.val，说明p和q都分布在root右边，向右遍历</li><li>如果q.val&lt;root.val，说明p和q都分布在root左边，向左遍历</li><li>如果root在p和q之间，这个root就是p和q的LCA<a id="more"></a></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python实现——DFS-Level"><a href="#Python实现——DFS-Level" class="headerlink" title="Python实现——DFS+Level"></a>Python实现——DFS+Level</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取各个节点对应的parent</span></span><br><span class="line">        stack = []</span><br><span class="line">        stack.append(root)</span><br><span class="line">        parent = &#123;root: <span class="keyword">None</span>&#125;</span><br><span class="line">        level = &#123;&#125;</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> len(stack)&gt;<span class="number">0</span>:</span><br><span class="line">            current = stack[len(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> current.right:</span><br><span class="line">                stack.append(current.right)</span><br><span class="line">                parent[current.right] = current</span><br><span class="line">            <span class="keyword">if</span> current.left:</span><br><span class="line">                stack.append(current.left)</span><br><span class="line">                parent[current.left] = current</span><br><span class="line"></span><br><span class="line">        self.levelorder(root, level, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#保证p的level大于q</span></span><br><span class="line">        <span class="keyword">if</span> level[p] &lt; level[q]:</span><br><span class="line">            p, q = q,p</span><br><span class="line">        <span class="comment">#将p和q移动同一个level</span></span><br><span class="line">        <span class="keyword">while</span> level[p] != level[q]:</span><br><span class="line">            p = parent[p]</span><br><span class="line">        <span class="comment">#回溯父节点</span></span><br><span class="line">        <span class="keyword">while</span> p!=q:</span><br><span class="line">            p = parent[p]</span><br><span class="line">            q = parent[q]</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initTree</span><span class="params">(self, root, nums, i, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">-1</span>:</span><br><span class="line">                root = <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">return</span> root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                root = TreeNode(nums[i])</span><br><span class="line">                root.left = self.initTree(root.left, nums, <span class="number">2</span>*i+<span class="number">1</span>, n)</span><br><span class="line">                root.right = self.initTree(root.right, nums, <span class="number">2</span>*i+<span class="number">2</span>, n)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment">#获取各个节点对应的level</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelorder</span><span class="params">(self, root, level, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        level[root] = n</span><br><span class="line">        self.levelorder(root.left, level, n+<span class="number">1</span>)</span><br><span class="line">        self.levelorder(root.right, level, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%d "</span> % root.val,</span><br><span class="line">        path.append(root)</span><br><span class="line">        self.preorder(root.left, path)</span><br><span class="line">        self.preorder(root.right, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">nums = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>]</span><br><span class="line">root = s.initTree(<span class="keyword">None</span>, nums, <span class="number">0</span>, len(nums))</span><br><span class="line">path = []</span><br><span class="line">s.preorder(root, path)</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line">ret = s.lowestCommonAncestor(root, path[<span class="number">3</span>],path[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> ret.val</span><br></pre></td></tr></table></figure><h4 id="Python实现——利用二叉查找树有序的特性-递归版"><a href="#Python实现——利用二叉查找树有序的特性-递归版" class="headerlink" title="Python实现——利用二叉查找树有序的特性(递归版)"></a>Python实现——利用二叉查找树有序的特性(递归版)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def lowestCommonAncestor(self, root, p, q):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type root: TreeNode</span><br><span class="line">        :type p: TreeNode</span><br><span class="line">        :type q: TreeNode</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if p.val &gt; q.val:</span><br><span class="line">            p, q = q, p</span><br><span class="line"></span><br><span class="line">        if q.val &lt; root.val:</span><br><span class="line">            return self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        elif p.val &gt; root.val:</span><br><span class="line">            return self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        else:</span><br><span class="line">            return root</span><br></pre></td></tr></table></figure><h4 id="Python实现——利用二叉查找树有序的特性-非递归版"><a href="#Python实现——利用二叉查找树有序的特性-非递归版" class="headerlink" title="Python实现——利用二叉查找树有序的特性(非递归版)"></a>Python实现——利用二叉查找树有序的特性(非递归版)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def lowestCommonAncestor(self, root, p, q):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type root: TreeNode</span><br><span class="line">        :type p: TreeNode</span><br><span class="line">        :type q: TreeNode</span><br><span class="line">        :rtype: TreeNode</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        while root:</span><br><span class="line">            if root.val &gt; p.val and root.val &gt; q.val:</span><br><span class="line">                root = root.left</span><br><span class="line">            elif root.val &lt; p.val and root.val &lt; q.val:</span><br><span class="line">                root = root.right</span><br><span class="line">            else:</span><br><span class="line">                return root</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L268 Missing Number</title>
      <link href="/2017-12-15-L268-Missing-Number/"/>
      <url>/2017-12-15-L268-Missing-Number/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/missing-number/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.</span><br><span class="line"></span><br><span class="line">Example 1</span><br><span class="line"></span><br><span class="line">Input: [3,0,1]</span><br><span class="line">Output: 2</span><br><span class="line">Example 2</span><br><span class="line"></span><br><span class="line">Input: [9,6,4,2,3,5,7,0,1]</span><br><span class="line">Output: 8</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用额外数组表示每一个位，判断其是否为1</li><li>计算总和，然后通过减法获取缺失的数</li></ul><a id="more"></a><h3 id="Go实现——使用额外空间"><a href="#Go实现——使用额外空间" class="headerlink" title="Go实现——使用额外空间"></a>Go实现——使用额外空间</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums)+<span class="number">1</span>)</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        arr[v] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> v==<span class="number">0</span> &#123;</span><br><span class="line">            ret = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###Go实现——使用n*(n-1)/2获取和，然后计算缺失的数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxInt:=<span class="number">0</span></span><br><span class="line">    s :=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,v:= <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> maxInt &lt; v&#123;</span><br><span class="line">            maxInt=v</span><br><span class="line">        &#125;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> maxInt == <span class="built_in">len</span>(nums)&#123;</span><br><span class="line">        <span class="keyword">return</span> maxInt*(maxInt+<span class="number">1</span>)/<span class="number">2</span>-s</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="params">(output <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    l := <span class="built_in">len</span>(nums)</span><br><span class="line">    output = (l * (l + <span class="number">1</span>)) / <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        output -= n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L258 Add Digits</title>
      <link href="/2017-12-14-L258-Add-Digits/"/>
      <url>/2017-12-14-L258-Add-Digits/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/add-digits/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">Could you do it without any loop/recursion in O(1) runtime?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用递归的方式，计算各个位数和s是否小于10，如果小于10返回，否则递归求s的各位数和</li><li><strong>数根</strong>：使用数学公式<a href="https://en.wikipedia.org/wiki/Digital_root#Congruence_formula" target="_blank" rel="external">https://en.wikipedia.org/wiki/Digital_root#Congruence_formula</a><a id="more"></a></li></ul><p><img src="/images/L258.png" alt="L258"></p><h3 id="Go递归"><a href="#Go递归" class="headerlink" title="Go递归"></a>Go递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func addDigits(num int) int &#123;</span><br><span class="line">    s:=0</span><br><span class="line"></span><br><span class="line">    for num&gt;0 &#123;</span><br><span class="line">        s += num%10</span><br><span class="line">        num /= 10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if s&lt;10 &#123;</span><br><span class="line">        return s</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return addDigits(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现O-1-算法"><a href="#Go实现O-1-算法" class="headerlink" title="Go实现O(1)算法"></a>Go实现O(1)算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func addDigits(num int) int &#123;</span><br><span class="line">    return 1 + (num - 1) % 9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L257 Binary Tree Paths</title>
      <link href="/2017-12-14-L257-Binary-Tree-Paths/"/>
      <url>/2017-12-14-L257-Binary-Tree-Paths/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/binary-tree-paths/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, return all root-to-leaf paths.</span><br><span class="line"></span><br><span class="line">For example, given the following binary tree:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br><span class="line">All root-to-leaf paths are:</span><br><span class="line"></span><br><span class="line">[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>递归深度遍历</li><li>使用循环深度遍历，通过map记录各个节点的父节点<br>，当子节点为叶子节点，根据当前叶子节点和map回溯到root节点<a id="more"></a></li></ul><h3 id="Go递归遍历"><a href="#Go递归遍历" class="headerlink" title="Go递归遍历"></a>Go递归遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, path []<span class="keyword">int</span>, ret *[]<span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">        s := <span class="string">""</span></span><br><span class="line">        n := <span class="built_in">len</span>(path)</span><br><span class="line">        <span class="keyword">for</span> i:= <span class="number">0</span>; i&lt;n; i++&#123;</span><br><span class="line">            <span class="keyword">if</span> i&lt;n<span class="number">-1</span> &#123;</span><br><span class="line">                s += strconv.Itoa(path[i]) + <span class="string">"-&gt;"</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s += strconv.Itoa(path[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *ret = <span class="built_in">append</span>(*ret, s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, path, ret)</span><br><span class="line">    DFS(root.Right, path, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(root *TreeNode)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    ret := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    DFS(root, path, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go循环实现"><a href="#Go循环实现" class="headerlink" title="Go循环实现"></a>Go循环实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPath</span><span class="params">(current*TreeNode, parent <span class="keyword">map</span>[*TreeNode]*TreeNode)</span><span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    p := current</span><br><span class="line">    <span class="keyword">for</span> p!=<span class="literal">nil</span> &#123;</span><br><span class="line">        path = <span class="built_in">append</span>(path, p.Val)</span><br><span class="line">        p = parent[p]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(path)<span class="number">-1</span></span><br><span class="line">    ret := <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> n&gt;=<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">            ret += strconv.Itoa(path[n]) + <span class="string">"-&gt;"</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ret += strconv.Itoa(path[n])</span><br><span class="line">        &#125;</span><br><span class="line">        n--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(root *TreeNode)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    ret := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line"></span><br><span class="line">    parent := <span class="keyword">map</span>[*TreeNode]*TreeNode&#123;&#125;</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">    parent[root] = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left==<span class="literal">nil</span> &amp;&amp; current.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">            path := getPath(current, parent)</span><br><span class="line">            ret = <span class="built_in">append</span>(ret,path)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            parent[current.Right] = current</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">            parent[current.Left] = current</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L242 Valid Anagram</title>
      <link href="/2017-12-14-L242-Valid/"/>
      <url>/2017-12-14-L242-Valid/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/valid-anagram/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given two strings s and t, write a function to determine if t is an anagram of s.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">s = &quot;anagram&quot;, t = &quot;nagaram&quot;, return true.</span><br><span class="line">s = &quot;rat&quot;, t = &quot;car&quot;, return false.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You may assume the string contains only lowercase alphabets.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">What if the inputs contain unicode characters? How would you adapt your solution to such case?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>由于题目说明都是小写字母，使用两个26维数组代表a-z，初始化都是0</li><li>将字符串转换为对应的26维数组，将字母出现次进行累加统计</li><li>比较两个数组对应的数是否相同，不同则返回false，反之全部相同返回true</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">26</span>)</span><br><span class="line">    t1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(s);i++ &#123;</span><br><span class="line">        s1[s[i]-<span class="string">'a'</span>] += <span class="number">1</span></span><br><span class="line">        t1[t[i]-<span class="string">'a'</span>] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(s1);i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s1[i] != t1[i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L234 Palindrome Linked List</title>
      <link href="/2017-12-12-L234-Palindrome-Linked-List/"/>
      <url>/2017-12-12-L234-Palindrome-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/palindrome-linked-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given a singly linked list, determine if it is a palindrome.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">Could you do it in O(n) time and O(1) space?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>借助O(n)空间的话，先Linked List的元素转换为数组，然后通过low和high指针判断回文</li><li>将Linked List链表进行拆分，对后半部分的链表进行翻转，然后判断其是否相同</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    newHead := reverse(head.Next)</span><br><span class="line">    head.Next.Next = head</span><br><span class="line">    head.Next = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(head *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    tmp:=head</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tmp != <span class="literal">nil</span> &#123;</span><br><span class="line">        n++</span><br><span class="line">        tmp = tmp.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newHead := head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=n/<span class="number">2</span><span class="number">-1</span> ;i++  &#123;</span><br><span class="line">            newHead = newHead.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n/<span class="number">2</span> ;i++  &#123;</span><br><span class="line">            newHead = newHead.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newHead = reverse(newHead)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> newHead != <span class="literal">nil</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span> head.Val != newHead.Val&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">        newHead = newHead.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L231 Power of Two</title>
      <link href="/2017-12-12-L231-Power-of-Two/"/>
      <url>/2017-12-12-L231-Power-of-Two/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given an integer, write a function to determine if it is a power of two.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>n=n/2，算n%2获取的商是否为1，1的话返回true，其他返回false</li><li>判断其是否是2的幂，例如8对应的二进制表示为：1000，7对应的二进制表示是0111，8&amp;7==0 所以8是2的幂</li></ul><a id="more"></a><h3 id="Go实现1"><a href="#Go实现1" class="headerlink" title="Go实现1"></a>Go实现1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func isPowerOfTwo(n int) bool &#123;</span><br><span class="line">    if n&lt;=0 &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for n%2 == 0 &#123;</span><br><span class="line">        n = n/2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if n == 1&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现2"><a href="#Go实现2" class="headerlink" title="Go实现2"></a>Go实现2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func isPowerOfTwo(n int) bool &#123;</span><br><span class="line">    if n&lt;=0 &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if n==1 &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return n&amp;(n-1) == 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L225 Implement Stack using Queues</title>
      <link href="/2017-12-11-L225-Implement-Stack-using-Queues/"/>
      <url>/2017-12-11-L225-Implement-Stack-using-Queues/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/implement-stack-using-queues/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Implement the following operations of a stack using queues.</span><br><span class="line"></span><br><span class="line">push(x) -- Push element x onto stack.</span><br><span class="line">pop() -- Removes the element on top of the stack.</span><br><span class="line">top() -- Get the top element.</span><br><span class="line">empty() -- Return whether the stack is empty.</span><br><span class="line">Notes:</span><br><span class="line">You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.</span><br><span class="line">Depending on your language, queue may not be supported natively. </span><br><span class="line">You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</span><br><span class="line">You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).`</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用Go的list结构</li><li>使用Python实现</li></ul><a id="more"></a><p>###Go实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"container/list"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    stack  *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MyStack</span></span> &#123;</span><br><span class="line">    mystack := MyStack&#123;&#125;</span><br><span class="line">    mystack.stack = list.New()</span><br><span class="line">    <span class="keyword">return</span> mystack</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x onto stack. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    this.stack.PushBack(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    front := this.stack.Front()</span><br><span class="line">    this.stack.Remove(front)</span><br><span class="line">    <span class="keyword">return</span> front.Value.(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the top element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !this.Empty() &#123;</span><br><span class="line">        front := this.stack.Back()</span><br><span class="line">        <span class="keyword">return</span> front.Value.(<span class="keyword">int</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"Empty"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStack)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.stack.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Top();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    obj := Constructor()</span><br><span class="line">    obj.Push(<span class="number">1</span>)</span><br><span class="line">    obj.Push(<span class="number">1</span>)</span><br><span class="line">    obj.Push(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(obj.Top())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.empty():</span><br><span class="line">            val = self.stack[<span class="number">-1</span>]</span><br><span class="line">            self.stack = self.stack[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.empty():</span><br><span class="line">            val = self.stack[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L226 Invert Binary Tree</title>
      <link href="/2017-12-11-L226-Invert-Binary-Tree/"/>
      <url>/2017-12-11-L226-Invert-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/invert-binary-tree/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Invert a binary tree.</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">to</span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br><span class="line">Trivia:</span><br><span class="line">This problem was inspired by this original tweet by Max Howell:</span><br><span class="line">Google: 90% of our engineers use the software you wrote (Homebrew), </span><br><span class="line">but you can’t invert a binary tree on a whiteboard so fuck off.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>递归方式</li><li>非递归方式</li></ul><a id="more"></a><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将左右节点交换</span></span><br><span class="line">    root.Left, root.Right = root.Right, root.Left</span><br><span class="line">    <span class="comment">//递归访问root.Left</span></span><br><span class="line">    root.Left = invertTree(root.Left)</span><br><span class="line">    <span class="comment">//递归访问root.right</span></span><br><span class="line">    root.Right = invertTree(root.Right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go非递归实现"><a href="#Go非递归实现" class="headerlink" title="Go非递归实现"></a>Go非递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> current != <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="comment">//关键就是交换左右</span></span><br><span class="line">            current.Left, current.Right = current.Right, current.Left</span><br><span class="line">            <span class="comment">//这里先压入左或者先压入右一样</span></span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思想很简单，从根节点遍历树，将左右节点交换后，然后将其压入栈</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L205 Isomorphic Strings</title>
      <link href="/2017-12-11-L205-Isomorphic-Strings/"/>
      <url>/2017-12-11-L205-Isomorphic-Strings/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/isomorphic-strings/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Given two strings s and t, determine if they are isomorphic.</span><br><span class="line"></span><br><span class="line">Two strings are isomorphic if the characters in s can be replaced to get t.</span><br><span class="line"></span><br><span class="line">All occurrences of a character must be replaced with another character while preserving the order of characters. </span><br><span class="line">No two characters may map to the same character but a character may map to itself.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given &quot;egg&quot;, &quot;add&quot;, return true.</span><br><span class="line"></span><br><span class="line">Given &quot;foo&quot;, &quot;bar&quot;, return false.</span><br><span class="line"></span><br><span class="line">Given &quot;paper&quot;, &quot;title&quot;, return true.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You may assume both s and t have the same length.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用map进行映射的判断，相同的字符是否映射相同</li><li>使用数组解决</li></ul><a id="more"></a><h3 id="Go实现——使用map"><a href="#Go实现——使用map" class="headerlink" title="Go实现——使用map"></a>Go实现——使用map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsVal</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> m&#123;</span><br><span class="line">        <span class="keyword">if</span> val == v&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isIsomorphic</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(s);i++ &#123;</span><br><span class="line">        c1 := <span class="keyword">int</span>(s[i])</span><br><span class="line">        c2 := <span class="keyword">int</span>(t[i])</span><br><span class="line">        <span class="keyword">if</span> _,ok:=m[c1]; ok&#123;</span><br><span class="line">            <span class="keyword">if</span> m[c1] != c2 &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> containsVal(m, c2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m[c1] = c2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func isIsomorphic(s string, t string) bool &#123;</span><br><span class="line">    if len(s) != len(t) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m1 := make([]int, 256)</span><br><span class="line">    m2 := make([]int, 256)</span><br><span class="line"></span><br><span class="line">    for i:=0;i&lt;len(s); i++  &#123;</span><br><span class="line">        if m1[s[i]] != m2[t[i]] &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m1[s[i]] = i+1</span><br><span class="line">        m2[t[i]] = i+1</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="http://www.cnblogs.com/grandyang/p/4465779.html" target="_blank" rel="external">http://www.cnblogs.com/grandyang/p/4465779.html</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L206 Reverse Linked List</title>
      <link href="/2017-12-11-L206-Reverse-Linked-List/"/>
      <url>/2017-12-11-L206-Reverse-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-linked-list/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Reverse a singly linked list.</span><br><span class="line">Hint:</span><br><span class="line">A linked list can be reversed either iteratively or recursively. Could you implement both?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用循环的方式，使用newHead保存新的链表，将newHead的位置插入current节点</li><li>使用递归的方式, 使用prev和current指针，初始prev为nil</li></ul><a id="more"></a><ul><li>使用递归方式，先递归到最后一个节点，调整head节点的next-&gt;next为head，将当前head的next设置为NULL，返回上一层</li></ul><p><img src="/images/reverse_list.png" alt="reverse_list"></p><h3 id="Go——循环方式"><a href="#Go——循环方式" class="headerlink" title="Go——循环方式"></a>Go——循环方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newHead *ListNode</span><br><span class="line">    current := head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span>&#123;</span><br><span class="line">        next := current.Next</span><br><span class="line">        current.Next = newHead</span><br><span class="line">        newHead = current</span><br><span class="line">        current = next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go——递归实现"><a href="#Go——递归实现" class="headerlink" title="Go——递归实现"></a>Go——递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(current *ListNode, prev *ListNode)</span> *<span class="title">ListNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> current.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        current.Next = prev</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node := current.Next</span><br><span class="line">    current.Next = prev</span><br><span class="line">    <span class="keyword">return</span> reverse(node, current)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse(head, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go——递归实现2"><a href="#Go——递归实现2" class="headerlink" title="Go——递归实现2"></a>Go——递归实现2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    newHead := reverseList(head.Next)</span><br><span class="line">    head.Next.Next = head</span><br><span class="line">    head.Next = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L203 Remove Linked List Elements</title>
      <link href="/2017-12-10-L203-Remove-Linked-List-Elements/"/>
      <url>/2017-12-10-L203-Remove-Linked-List-Elements/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Remove all elements from a linked list of integers that have value val.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given: 1 --&gt; 2 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 6, val = 6</span><br><span class="line">Return: 1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用prev指针记录当前节点的前一个节点，current表示当前节点</li><li>需要判断当前节点是否为head节点</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val <span class="keyword">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(head *ListNode,val <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        head = <span class="built_in">new</span>(ListNode)</span><br><span class="line">        head.Val = val</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tmp := head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tmp.Next!=<span class="literal">nil</span> &#123;</span><br><span class="line">            tmp = tmp.Next</span><br><span class="line">        &#125;</span><br><span class="line">        node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        node.Val = val</span><br><span class="line">        tmp.Next = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(head *ListNode, val <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    current:=head</span><br><span class="line">    prev := head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> current.Val == val &#123;</span><br><span class="line">            <span class="keyword">if</span> current == head&#123;</span><br><span class="line">                prev = current.Next</span><br><span class="line">                head = prev</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prev.Next = current.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev = current</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(head *ListNode)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span> head.Next!=<span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"%d -&gt; "</span>, head.Val)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fmt.Println(head.Val)</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//nums := []int&#123;1,2,6,3,4,5,6&#125;, val=6</span></span><br><span class="line">    <span class="comment">//nums := []int&#123;1,2&#125;, val=1</span></span><br><span class="line">    <span class="comment">//nums := []int&#123;1&#125;, val=1</span></span><br><span class="line">    <span class="comment">//nums := []int&#123;1,1&#125;, val=1</span></span><br><span class="line">    <span class="comment">//nums :=[]int&#123;1,2&#125;, val=2</span></span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> head *ListNode</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        head = insertNode(head, v)</span><br><span class="line">    &#125;</span><br><span class="line">    printList(head)</span><br><span class="line">    head=removeElements(head, <span class="number">2</span>)</span><br><span class="line">    printList(head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L191 Number of 1 Bits</title>
      <link href="/2017-12-08-L191-Number-of-1-Bits/"/>
      <url>/2017-12-08-L191-Number-of-1-Bits/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/number-of-1-bits/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Write a function that takes an unsigned integer and returns the number of ’1&apos; bits </span><br><span class="line">it has (also known as the Hamming weight).</span><br><span class="line"></span><br><span class="line">For example, the 32-bit integer ’11&apos; </span><br><span class="line">has binary representation 00000000000000000000000000001011, </span><br><span class="line">so the function should return 3.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>计算二进制，判断当前是否需要计数</li><li>使用n&amp;n-1<a id="more"></a></li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n%<span class="number">2</span>:</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">            n /= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">            n = n &amp;(n<span class="number">-1</span>)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L190 Reverse Bits</title>
      <link href="/2017-12-08-L190-Reverse-Bits/"/>
      <url>/2017-12-08-L190-Reverse-Bits/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Reverse bits of a given 32 bits unsigned integer.</span><br><span class="line"></span><br><span class="line">For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), </span><br><span class="line">return 964176192 (represented in binary as 00111001011110000010100101000000).</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">If this function is called many times, how would you optimize it?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解题思路1——使用list记录然后reverse重新计算10进制数值"><a href="#解题思路1——使用list记录然后reverse重新计算10进制数值" class="headerlink" title="解题思路1——使用list记录然后reverse重新计算10进制数值"></a>解题思路1——使用list记录然后reverse重新计算10进制数值</h4><ul><li>先计算出n对应的二进制数保存到list中，对于不满足32位的数设置0</li><li>将list翻转后，再重新计算10进制数值</li></ul><h4 id="不使用List"><a href="#不使用List" class="headerlink" title="不使用List"></a>不使用List</h4><ul><li>先数值计算</li><li>然后判断位数是否小于32，进行左移位</li></ul><h4 id="使用bin和zfill函数"><a href="#使用bin和zfill函数" class="headerlink" title="使用bin和zfill函数"></a>使用bin和zfill函数</h4><ul><li>使用bin获取int对应的二进制</li><li>使用zfill补齐零</li><li>使用int计算二进制对应的十进制</li></ul><a id="more"></a><h3 id="Python实现——使用List"><a href="#Python实现——使用List" class="headerlink" title="Python实现——使用List"></a>Python实现——使用List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            ret.append(n%<span class="number">2</span>)</span><br><span class="line">            n = n/<span class="number">2</span></span><br><span class="line">        n = len(ret)</span><br><span class="line">        <span class="keyword">while</span> n &lt; <span class="number">32</span>:</span><br><span class="line">            ret.append(<span class="number">0</span>)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        reversed(ret)</span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> ret:</span><br><span class="line">            v = v*<span class="number">2</span> + bit</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="keyword">print</span> s.reverseBits(<span class="number">43261596</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 38 ms</p></blockquote><h3 id="Python实现——不使用List"><a href="#Python实现——不使用List" class="headerlink" title="Python实现——不使用List"></a>Python实现——不使用List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        flag = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                idx+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag = <span class="keyword">True</span></span><br><span class="line">                idx +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                s = s*<span class="number">2</span> + n%<span class="number">2</span></span><br><span class="line">            n /= <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> idx&lt;<span class="number">32</span>:</span><br><span class="line">            s = s&lt;&lt;<span class="number">32</span>-idx</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="keyword">print</span> s.reverseBits(<span class="number">43261596</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 55 ms</p></blockquote><h3 id="使用标准函数库"><a href="#使用标准函数库" class="headerlink" title="使用标准函数库"></a>使用标准函数库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param n, an integer</span></span><br><span class="line">    <span class="comment"># @return an integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        ret= bin(n)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> int(ret, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 36 ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L189 Rotate Array</title>
      <link href="/2017-12-07-L189-Rotate-Array/"/>
      <url>/2017-12-07-L189-Rotate-Array/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/rotate-array/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Rotate an array of n elements to the right by k steps.</span><br><span class="line"></span><br><span class="line">For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</span><br><span class="line"></span><br><span class="line">测试案例：</span><br><span class="line">[1,2] 0 [1,2]</span><br><span class="line">[1,2] 1 [2,1]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="O-n-时间复杂度-O-n-空间复杂度"><a href="#O-n-时间复杂度-O-n-空间复杂度" class="headerlink" title="O(n)时间复杂度+ O(n)空间复杂度"></a>O(n)时间复杂度+ O(n)空间复杂度</h4><h4 id="O-n-k-时间复杂度-O-1-空间复杂度"><a href="#O-n-k-时间复杂度-O-1-空间复杂度" class="headerlink" title="O(n*k)时间复杂度 + O(1)空间复杂度"></a>O(n*k)时间复杂度 + O(1)空间复杂度</h4><ul><li>将最后一个元素保存，然后从N-1开始将前面一个元素往后移动一个位置，然后将最后一个元素放在首位置</li><li>重复k次操作</li><li>冒泡排序的思想</li></ul><h4 id="O-n-时间复杂度-O-1-空间复杂度"><a href="#O-n-时间复杂度-O-1-空间复杂度" class="headerlink" title="O(n)时间复杂度 + O(1)空间复杂度"></a>O(n)时间复杂度 + O(1)空间复杂度</h4><ul><li>将nums[0:n-k]翻转，将nums[n-k:]翻转</li><li>再将nums翻转</li><li>问题的关键是n-k翻转，还是k翻转？</li></ul><h4 id="O-n-时间复杂度-O-1-空间复杂度-1"><a href="#O-n-时间复杂度-O-1-空间复杂度-1" class="headerlink" title="O(n)时间复杂度 + O(1)空间复杂度"></a>O(n)时间复杂度 + O(1)空间复杂度</h4><ul><li>将每个元素向后移动k个位置 </li></ul><a id="more"></a><h3 id="Go实现-O-n-时间复杂度-O-n-空间复杂度"><a href="#Go实现-O-n-时间复杂度-O-n-空间复杂度" class="headerlink" title="Go实现-O(n)时间复杂度+ O(n) 空间复杂度"></a>Go实现-O(n)时间复杂度+ O(n) 空间复杂度</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    arr :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        arr = <span class="built_in">append</span>(arr, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">        nums[(i+k)%n] = arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">    <span class="built_in">copy</span>(arr, nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n ; i++ &#123;</span><br><span class="line">        nums[(i+k)%n] = arr[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现-O-n-k"><a href="#Go实现-O-n-k" class="headerlink" title="Go实现-O(n*k)"></a>Go实现-O(n*k)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;k ;i++  &#123;</span><br><span class="line">        t := nums[n<span class="number">-1</span>]</span><br><span class="line">        j := n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> j&gt;=<span class="number">1</span>  &#123;</span><br><span class="line">            nums[j] = nums[j<span class="number">-1</span>]</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j] = t</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runtime: 462 ms</p></blockquote><h3 id="Go实现-翻转"><a href="#Go实现-翻转" class="headerlink" title="Go实现-翻转"></a>Go实现-翻转</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> low&lt;high &#123;</span><br><span class="line">        nums[low], nums[high] = nums[high], nums[low]</span><br><span class="line">        low++</span><br><span class="line">        high--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n:= <span class="built_in">len</span>(nums)</span><br><span class="line">    k = k%n</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> || k%n==<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k&lt;n &#123;</span><br><span class="line">        reverse(nums[<span class="number">0</span>:n-k])</span><br><span class="line">        reverse(nums[n-k:])</span><br><span class="line">        reverse(nums)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现-每个元素向后移动k个位置"><a href="#Go实现-每个元素向后移动k个位置" class="headerlink" title="Go实现-每个元素向后移动k个位置"></a>Go实现-每个元素向后移动k个位置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> || n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    k = k % n</span><br><span class="line">    idx := <span class="number">0</span></span><br><span class="line">    distance := <span class="number">0</span></span><br><span class="line">    cur := nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">        idx = (idx+k) % n</span><br><span class="line">        nums[idx], cur = cur, nums[idx]</span><br><span class="line"></span><br><span class="line">        distance = (distance+k) % n</span><br><span class="line">        <span class="keyword">if</span> distance == <span class="number">0</span> &#123;</span><br><span class="line">            idx = (idx+<span class="number">1</span>) % n</span><br><span class="line">            cur = nums[idx]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L172 Factorial Trailing Zeroes</title>
      <link href="/2017-12-07-L172-Factorial-Trailing-Zeroes/"/>
      <url>/2017-12-07-L172-Factorial-Trailing-Zeroes/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/factorial-trailing-zeroes/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given an integer n, return the number of trailing zeroes in n!.</span><br><span class="line"></span><br><span class="line">Note: Your solution should be in logarithmic time complexity.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先不考虑时间复杂度，最简单的方法是计算出n的阶乘值，然后再计算出尾部0的个数<a id="more"></a></li><li>使用非O(n)的算法</li></ul><table><thead><tr><th>N</th><th>N的阶乘值</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>5</td><td>5*2</td><td>1</td></tr><tr><td>9</td><td>5*2</td><td>1</td></tr><tr><td>10</td><td>10,5*2</td><td>2</td></tr><tr><td>11</td><td>10,5*2</td><td>2</td></tr><tr><td>15</td><td>10,15<em>2, 5</em>4</td><td>3</td></tr><tr><td>19</td><td>10, 15<em>2, 5</em>4</td><td>3</td></tr><tr><td>20</td><td>20,10,15<em>2, 5</em>4</td><td>4</td></tr><tr><td>30</td><td>30,20,10,25=5<em>5(5</em>2,5<em>4),15</em>6,5*8</td><td>7</td></tr></tbody></table><h3 id="Go实现-计算阶乘"><a href="#Go实现-计算阶乘" class="headerlink" title="Go实现-计算阶乘"></a>Go实现-计算阶乘</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> || n==<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trailingZeroes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    f := factorial(n)</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f%<span class="number">10</span>==<span class="number">0</span> &#123;</span><br><span class="line">        f = f/<span class="number">10</span></span><br><span class="line">        ret++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(trailingZeroes(<span class="number">30</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用阶乘的方法计算，在30!的时候会出现数越界，导致其结果输出为0</p></blockquote><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trailingZeroes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">        ret += n/<span class="number">5</span></span><br><span class="line">        n = n/<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Println(trailingZeroes(v))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel Sheet</title>
      <link href="/2017-12-07-Excel-Sheet/"/>
      <url>/2017-12-07-Excel-Sheet/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L168-Excel-Sheet-Column-Title"><a href="#L168-Excel-Sheet-Column-Title" class="headerlink" title="L168. Excel Sheet Column Title"></a><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">L168. Excel Sheet Column Title</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given a positive integer, return its corresponding column title as appear in an Excel sheet.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">    1 -&gt; A</span><br><span class="line">    2 -&gt; B</span><br><span class="line">    3 -&gt; C</span><br><span class="line">    ...</span><br><span class="line">    26 -&gt; Z</span><br><span class="line">    27 -&gt; AA</span><br><span class="line">    28 -&gt; AB</span><br></pre></td></tr></table></figure><h4 id="L171-Excel-Sheet-Column-Number"><a href="#L171-Excel-Sheet-Column-Number" class="headerlink" title="L171. Excel Sheet Column Number"></a><a href="https://leetcode.com/problems/excel-sheet-column-number/description/" target="_blank" rel="external">L171. Excel Sheet Column Number</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Related to question [Excel Sheet Column Title](https://leetcode.com/problems/excel-sheet-column-title/description/)</span><br><span class="line"></span><br><span class="line">Given a column title as appear in an Excel sheet, return its corresponding column number.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">    A -&gt; 1</span><br><span class="line">    B -&gt; 2</span><br><span class="line">    C -&gt; 3</span><br><span class="line">    ...</span><br><span class="line">    Z -&gt; 26</span><br><span class="line">    AA -&gt; 27</span><br><span class="line">    AB -&gt; 28</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>26进制计算</li><li>注意从1开始</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToTitle</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    ret:=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n&gt;<span class="number">0</span> &#123;</span><br><span class="line">        ret = <span class="keyword">string</span>(<span class="string">'A'</span>+(n<span class="number">-1</span>)%<span class="number">26</span>) + ret</span><br><span class="line">        n = (n<span class="number">-1</span>)/<span class="number">26</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">titleToNumber</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">        ret = ret*<span class="number">26</span> + <span class="keyword">int</span>(s[i] - <span class="string">'A'</span>) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(convertToTitle(<span class="number">26</span>))</span><br><span class="line">    fmt.Println(convertToTitle(<span class="number">27</span>))</span><br><span class="line">    fmt.Println(convertToTitle(<span class="number">28</span>))</span><br><span class="line">    fmt.Println(convertToTitle(<span class="number">52</span>))</span><br><span class="line">    fmt.Println(convertToTitle(<span class="number">53</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(titleToNumber(<span class="string">"A"</span>))</span><br><span class="line">    fmt.Println(titleToNumber(<span class="string">"AA"</span>))</span><br><span class="line">    fmt.Println(titleToNumber(<span class="string">"AB"</span>))</span><br><span class="line">    fmt.Println(titleToNumber(<span class="string">"AZ"</span>))</span><br><span class="line">    fmt.Println(titleToNumber(<span class="string">"BA"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L169 Majority Element</title>
      <link href="/2017-12-06-L169-Majority/"/>
      <url>/2017-12-06-L169-Majority/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/majority-element/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Given an array of size n, find the majority element. The majority element is the element that appears more than [n/2] times.</span><br><span class="line">You may assume that the array is non-empty and the majority element always exist in the array.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>将数组排序，计算连续出现数的个数是否大于n/2，如果是则返回该元素</li><li>使用map做计数，需要额外的空间</li><li>如何通过不排序进行解决呢？基于一个前提：这个元素的个数超过n/2向下取整<a id="more"></a></li></ul><h3 id="Go实现1-使用排序"><a href="#Go实现1-使用排序" class="headerlink" title="Go实现1-使用排序"></a>Go实现1-使用排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ret := nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line">        count :=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i+<span class="number">1</span>&lt;n &amp;&amp; nums[i+<span class="number">1</span>] == nums[i] &#123;</span><br><span class="line">            i++</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> count&gt;n/<span class="number">2</span> &#123;</span><br><span class="line">            ret = nums[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//nums := []int&#123;1,1,1,1,2,3,3&#125;</span></span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment">//nums :=[]int&#123;2,2&#125;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(majorityElement(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go实现2-无排序"><a href="#Go实现2-无排序" class="headerlink" title="Go实现2-无排序"></a>Go实现2-无排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> majorityElement(nums []<span class="keyword">int</span>) <span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> count==<span class="number">0</span> &#123;</span><br><span class="line">            num = v</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> num == v &#123;</span><br><span class="line">                count++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个算法成立的前提是这个元素超过一半以上，例如下面的案例<br>[1 2 1 2 3 2 3 2 2 3]<br>此算法输出的结果为3，而实际上更多的元素是2</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L167 Two Sum II</title>
      <link href="/2017-12-06-L167-Two-Sum-II/"/>
      <url>/2017-12-06-L167-Two-Sum-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</span><br><span class="line"></span><br><span class="line">The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</span><br><span class="line"></span><br><span class="line">You may assume that each input would have exactly one solution and you may not use the same element twice.</span><br><span class="line"></span><br><span class="line">Input: numbers=&#123;2, 7, 11, 15&#125;, target=9</span><br><span class="line">Output: index1=1, index2=2</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个索引，判断其和和target关系</li><li>比target大，low++</li><li>比target小，high–</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(numbers []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(numbers)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;high &#123;</span><br><span class="line">        sum := numbers[low] + numbers[high]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, low+<span class="number">1</span>)</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, high+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;</span><br><span class="line">    target := <span class="number">9</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(twoSum(nums, target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L160 Intersection of Two Linked Lists</title>
      <link href="/2017-12-06-L160-Intersection-of-Two-Linked-Lists/"/>
      <url>/2017-12-06-L160-Intersection-of-Two-Linked-Lists/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Write a program to find the node at which the intersection of two singly linked lists begins.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For example, the following two linked lists:</span><br><span class="line"></span><br><span class="line">A:          a1 → a2</span><br><span class="line">                   ↘</span><br><span class="line">                     c1 → c2 → c3</span><br><span class="line">                   ↗            </span><br><span class="line">B:     b1 → b2 → b3</span><br><span class="line">begin to intersect at node c1.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line"></span><br><span class="line">If the two linked lists have no intersection at all, return null.</span><br><span class="line">The linked lists must retain their original structure after the function returns.</span><br><span class="line">You may assume there are no cycles anywhere in the entire linked structure.</span><br><span class="line">Your code should preferably run in O(n) time and use only O(1) memory.</span><br><span class="line">Credits:</span><br><span class="line">Special thanks to @stellari for adding this problem and creating all test cases.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="计算长度，起点对齐"><a href="#计算长度，起点对齐" class="headerlink" title="计算长度，起点对齐"></a>计算长度，起点对齐</h4><ul><li>先遍历两个链表，获取各自的长度LenA和LenB</li><li>遍历到最后一个节点，如果两个节点相同，说明存在交叉节点，否则返回None</li><li>对于较长的链表先行，移动到两者相同的长度</li><li>两个链表同时移动，遇到相同的节点时候就是交叉点，直接返回</li></ul><h4 id="交换head，起点对齐"><a href="#交换head，起点对齐" class="headerlink" title="交换head，起点对齐"></a>交换head，起点对齐</h4><a id="more"></a><ul><li>主要补充图说明</li></ul><p><img src="/images/intersection_list1.png" alt="intersection_list1"></p><blockquote><p>两者的时间复杂度相同，只是第二种代码简洁些。</p></blockquote><h3 id="Python实现1"><a href="#Python实现1" class="headerlink" title="Python实现1"></a>Python实现1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head1, head1: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        lenA = <span class="number">0</span></span><br><span class="line">        lenB = <span class="number">0</span></span><br><span class="line">        tmpA = headA</span><br><span class="line">        tmpB = headB</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tmpA.next:</span><br><span class="line">            lenA += <span class="number">1</span></span><br><span class="line">            tmpA = tmpA.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tmpB.next:</span><br><span class="line">            lenB += <span class="number">1</span></span><br><span class="line">            tmpB  = tmpB.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tmpA <span class="keyword">is</span> tmpB:</span><br><span class="line">            <span class="keyword">if</span> lenA&gt;lenB:</span><br><span class="line">                lenA, lenB = lenB, lenA</span><br><span class="line">                headA, headB = headB, headA</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> lenB&gt;lenA:</span><br><span class="line">                lenB -= <span class="number">1</span></span><br><span class="line">                headB = headB.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> headA <span class="keyword">is</span> <span class="keyword">not</span> headB:</span><br><span class="line">                headA = headA.next</span><br><span class="line">                headB = headB.next</span><br><span class="line">            <span class="keyword">return</span> headA</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p>Run Time 408ms</p></blockquote><h3 id="Python实现2"><a href="#Python实现2" class="headerlink" title="Python实现2"></a>Python实现2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA, headB)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head1, head1: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        p_a = headA</span><br><span class="line">        p_b = headB</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p_a <span class="keyword">is</span> <span class="keyword">not</span> p_b:</span><br><span class="line">            p_a = headB <span class="keyword">if</span> p_a <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> p_a.next</span><br><span class="line">            p_b = headA <span class="keyword">if</span> p_b <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> p_b.next</span><br><span class="line">        <span class="keyword">return</span> p_a</span><br></pre></td></tr></table></figure><blockquote><p>Run Time 408ms</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Min Stack</title>
      <link href="/2017-12-06-Min-Stack/"/>
      <url>/2017-12-06-Min-Stack/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</span><br><span class="line"></span><br><span class="line">push(x) -- Push element x onto stack.</span><br><span class="line">pop() -- Removes the element on top of the stack.</span><br><span class="line">top() -- Get the top element.</span><br><span class="line">getMin() -- Retrieve the minimum element in the stack.</span><br><span class="line">Example:</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 0.</span><br><span class="line">minStack.getMin();   --&gt; Returns -2.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用数组保存所有元素</li><li>一个len记录stack中元素数目</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MinStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    stack []<span class="keyword">int</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MinStack</span></span> &#123;</span><br><span class="line">    s := <span class="built_in">new</span>(MinStack)</span><br><span class="line">    <span class="keyword">return</span> *s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">        this.stack = <span class="built_in">append</span>(this.stack, x)</span><br><span class="line">        this.<span class="built_in">len</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Pop</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    this.<span class="built_in">len</span>--</span><br><span class="line">    this.stack = this.stack[<span class="number">0</span>:this.<span class="built_in">len</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> this.<span class="built_in">len</span>&gt;<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> this.stack[this.<span class="built_in">len</span><span class="number">-1</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"stack empty"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">GetMin</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    minVal := <span class="number">2147483647</span></span><br><span class="line">    n := this.<span class="built_in">len</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n &gt;=<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> this.stack[n] &lt; minVal&#123;</span><br><span class="line">            minVal = this.stack[n]</span><br><span class="line">        &#125;</span><br><span class="line">        n--</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">    s := <span class="built_in">new</span>(MinStack)</span><br><span class="line">    s.Push(<span class="number">-2</span>)</span><br><span class="line">    s.Push(<span class="number">0</span>)</span><br><span class="line">    s.Push(<span class="number">-3</span>)</span><br><span class="line">    fmt.Println(s.GetMin())</span><br><span class="line">    s.Pop()</span><br><span class="line">    fmt.Println(s.Top())</span><br><span class="line">    fmt.Println(s.GetMin())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linked List Cycle</title>
      <link href="/2017-12-04-Linked-List-Cycle/"/>
      <url>/2017-12-04-Linked-List-Cycle/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L141"><a href="#L141" class="headerlink" title="L141"></a><a href="https://leetcode.com/problems/linked-list-cycle/description/" target="_blank" rel="external">L141</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list, determine if it has a cycle in it.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">Can you solve it without using extra space?</span><br></pre></td></tr></table></figure><h4 id="L142"><a href="#L142" class="headerlink" title="L142"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/description/" target="_blank" rel="external">L142</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</span><br><span class="line"></span><br><span class="line">Note: Do not modify the linked list.</span><br><span class="line"></span><br><span class="line">Follow up:</span><br><span class="line">Can you solve it without using extra space?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解题思路步骤"><a href="#解题思路步骤" class="headerlink" title="解题思路步骤"></a>解题思路步骤</h4><ul><li>使用两个指针slow和fast</li><li>slow每次移动一次，fast每次移动二次，直到两者相遇（可以从示例中看到当前相遇的节点不一定是cycle开始的节点）</li><li>将slow移动到head，fast和slow每次移动一次，直到两者相遇</li></ul><a id="more"></a><h4 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h4><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p><img src="/images/linked_list_cycle.jpg" alt="linked_list_cycle"></p><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p><img src="/images/linked_list_cycle1.png" alt="linked_list_cycle1"></p><blockquote><p>如何保证slow和fast一定会相遇呢？</p></blockquote><h4 id="公式说明"><a href="#公式说明" class="headerlink" title="公式说明"></a>公式说明</h4><p><img src="/images/linked_list_cycle2.png" alt="linked_list_cycle1"></p><ul><li>L1为H到E的距离</li><li>L2为M到E的距离</li><li>C为环的周长</li><li>n为快慢指针首次相遇，快指针在环中绕行的次数</li><li>慢指针的路径长度为L1+L2</li><li>快指针的路径长度为L1+L2+n*C</li></ul><p>由于快指针是慢指针进行距离的2倍，因此：</p><span>$$(L1 + L2)*2 = L1 + L2 + n * C  =&gt;L1 + L2 = n * C  =&gt;L1 = (n - 1) * C + (C - L2)$$</span><!-- Has MathJax --><blockquote><p>参考文档：<a href="http://bookshadow.com/weblog/2015/07/10/leetcode-linked-list-cycle-ii/" target="_blank" rel="external">http://bookshadow.com/weblog/2015/07/10/leetcode-linked-list-cycle-ii/</a></p></blockquote><h3 id="L141-Python-实现"><a href="#L141-Python-实现" class="headerlink" title="L141 Python 实现"></a>L141 Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        prev = head</span><br><span class="line">        next = prev</span><br><span class="line">        <span class="keyword">while</span> prev <span class="keyword">and</span> next:</span><br><span class="line">            prev = prev.next</span><br><span class="line">            <span class="keyword">if</span> next.next:</span><br><span class="line">                next = next.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> prev == next:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(head, v)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        head = ListNode(v)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        current=head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> current.next:</span><br><span class="line">            current = current.next</span><br><span class="line">        node = ListNode(v)</span><br><span class="line">        current.next = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">s  = Solution()</span><br><span class="line">nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-4</span>]</span><br><span class="line">head = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> nums:</span><br><span class="line">    head = insertNode(head, v)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tmp = head</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while tmp.next:</span></span><br><span class="line"><span class="comment">#     tmp = tmp.next</span></span><br><span class="line"><span class="comment"># tmp.next = head</span></span><br><span class="line"><span class="keyword">print</span> s.hasCycle(head)</span><br></pre></td></tr></table></figure><h3 id="L142-Python-实现"><a href="#L142-Python-实现" class="headerlink" title="L142 Python 实现"></a>L142 Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        slow = fast = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> slow <span class="keyword">is</span> fast:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        slow = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> slow:</span><br><span class="line">            fast = fast.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo相关使用</title>
      <link href="/2017-12-01-Hexo/"/>
      <url>/2017-12-01-Hexo/</url>
      <content type="html"><![CDATA[<h3 id="Hexo使用数学公式"><a href="#Hexo使用数学公式" class="headerlink" title="Hexo使用数学公式"></a>Hexo使用数学公式</h3><p>在hexo安装目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后编辑站点根目录下的_config.yml，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  engine: &apos;mathjax&apos; # or &apos;katex&apos;</span><br><span class="line">  mathjax:</span><br><span class="line">    src: custom_mathjax_source</span><br><span class="line">    config:</span><br><span class="line">      # MathJax config</span><br></pre></td></tr></table></figure><p>之后进入theme的目录，编辑主题的_config.yml，找到mathjax字段。<br>NexT 5.0.1中默认mathjax是禁用，需要改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">   enable: true</span><br></pre></td></tr></table></figure><p>最后hexo g，就可以部署或者运行server查看效果了。</p><p>几个测试例子<br>使用$的一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">Simple inline $a = b + c$.</span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><p>Simple inline $a = b + c$.</p><p>参考资料：<a href="http://zjubank.com/2016/08/16/hexo-use-mathjax/" target="_blank" rel="external">http://zjubank.com/2016/08/16/hexo-use-mathjax/</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L136_Single_Number</title>
      <link href="/2017-12-01-L136-Single-Number/"/>
      <url>/2017-12-01-L136-Single-Number/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers, every element appears twice except for one. Find that single one.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先将数组排序，然后前后比较，如果相同则都跳过，如果不同，则返回前者</li><li>使用Map</li><li>使用位运算</li></ul><a id="more"></a><h3 id="Go实现-排序比较"><a href="#Go实现-排序比较" class="headerlink" title="Go实现-排序比较"></a>Go实现-排序比较</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ret:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n;i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i&lt;n<span class="number">-1</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> i==n<span class="number">-1</span> &#123;</span><br><span class="line">            ret = nums[i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ret = nums[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    fmt.Println(singleNumber(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(nlogn)+O(n)</p></blockquote><h3 id="Go实现-Map"><a href="#Go实现-Map" class="headerlink" title="Go实现-Map"></a>Go实现-Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[v];!ok &#123;</span><br><span class="line">            m[v] = <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            m[v] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> m&#123;</span><br><span class="line">        <span class="keyword">if</span> m[k] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> k</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(n)，空间复杂度O(n)</p></blockquote><h3 id="使用位运算"><a href="#使用位运算" class="headerlink" title="使用位运算"></a>使用位运算</h3><ul><li><p>某个数和0进行异或运算，其返回值为这个数<br>  $a ⊕ $0 = a</p></li><li><p>相同的两个数异或运算，其返回值为0</p><p>  $a ⊕ $a = 0</p></li><li><p>$a ⊕ $b ⊕ $a = ($a ⊕ $a) ⊕ $b = 0 ⊕ $b = $b</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        ret = ret ^ v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度O(n),空间复杂度O(1)</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L125 Valid Palindrome</title>
      <link href="/2017-12-01-L125-Valid-Palindrome/"/>
      <url>/2017-12-01-L125-Valid-Palindrome/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/valid-palindrome/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">&quot;A man, a plan, a canal: Panama&quot; is a palindrome.</span><br><span class="line">&quot;race a car&quot; is not a palindrome.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">Have you consider that the string might be empty? This is a good question to ask during an interview.</span><br><span class="line"></span><br><span class="line">For the purpose of this problem, we define empty string as valid palindrome.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用low和high两个指针进行判断</li><li>如果遇到非alphanumeric字符，进行跳过处理</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAlphanumeric</span><span class="params">(char <span class="keyword">uint8</span>)</span> <span class="title">bool</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (char &gt;= <span class="string">'A'</span> &amp;&amp; char &lt;=<span class="string">'Z'</span>) || (char&gt;=<span class="string">'a'</span> &amp;&amp; char&lt;=<span class="string">'z'</span>)||</span><br><span class="line">        (char &gt;=<span class="string">'0'</span> &amp;&amp; char&lt;=<span class="string">'9'</span>) || char==<span class="string">'_'</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lower</span><span class="params">(char <span class="keyword">uint8</span>)</span> <span class="title">uint8</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> char &gt;=<span class="string">'a'</span> &amp;&amp; char&lt;=<span class="string">'z'</span> &#123;</span><br><span class="line">        char = char-<span class="string">'a'</span>+<span class="string">'A'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> char</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> || <span class="built_in">len</span>(s) == <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    low:=<span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(s)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> low&lt;high  &#123;</span><br><span class="line">        <span class="keyword">if</span> !isAlphanumeric(s[low]) &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> !isAlphanumeric(s[high]) &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> lower(s[low]) == lower(s[high])  &#123;</span><br><span class="line">                low++</span><br><span class="line">                high--</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="comment">//fmt.Println(isPalindrome("A man, a plan, a canal: Panama"))</span></span><br><span class="line">    <span class="comment">//fmt.Println(isPalindrome("race a car"))</span></span><br><span class="line">    fmt.Println(isPalindrome(<span class="string">"0P"</span>))</span><br><span class="line">    fmt.Println(isPalindrome(<span class="string">"a."</span>))</span><br><span class="line">    <span class="comment">//fmt.Println(len("."))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><ul><li>使用基本比较</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = len(s) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> str.isalnum(str(s[low])):</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> str.isalnum(str(s[high])):</span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> str.lower(str(s[low])) == str.lower(str(s[high])):</span><br><span class="line">                    low += <span class="number">1</span></span><br><span class="line">                    high -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>遇到的错误信息:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime Error Message:</span><br><span class="line">Line 14: TypeError: descriptor &apos;isalnum&apos; requires a &apos;str&apos; object but received a &apos;unicode&apos;</span><br><span class="line">Last executed input: &quot;a.&quot;</span><br></pre></td></tr></table></figure><ul><li>使用库函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        newString = re.sub(<span class="string">"[^0-9a-zA-Z]+"</span>, <span class="string">""</span>, s)</span><br><span class="line">        <span class="keyword">return</span> newString.lower() == newString.lower()[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Best Time to Buy and Sell Stock</title>
      <link href="/2017-11-30-Best-Time-to-Buy-and-Sell-Stock/"/>
      <url>/2017-11-30-Best-Time-to-Buy-and-Sell-Stock/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L121"><a href="#L121" class="headerlink" title="L121"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="external">L121</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Say you have an array for which the ith element is the price of a given stock on day i.</span><br><span class="line"></span><br><span class="line">If you were only permitted to complete at most one transaction </span><br><span class="line">(ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: [7, 1, 5, 3, 6, 4]</span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</span><br><span class="line">Example 2:</span><br><span class="line">Input: [7, 6, 4, 3, 1]</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure><p>找出数组中的和其前面的数据之差为正整数的最大值</p><h4 id="L122"><a href="#L122" class="headerlink" title="L122"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="external">L122</a></h4><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>O(n*2)的算法：2次循环遍历获取差值，与max进行比较</li><li>O(n)的算法：记录最小值，将当期元素与最小值进行差值，然后与maxVal进行比较</li></ul><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><h4 id="O-n-2-时间复杂度"><a href="#O-n-2-时间复杂度" class="headerlink" title="O(n*2)时间复杂度"></a>O(n*2)时间复杂度</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxVal :=<span class="number">0</span></span><br><span class="line">    n := <span class="built_in">len</span>(prices)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n;i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;i; j++ &#123;</span><br><span class="line">            delta := prices[i]- prices[j]</span><br><span class="line">            <span class="keyword">if</span> delta&gt;<span class="number">0</span> &amp;&amp; delta&gt;maxVal &#123;</span><br><span class="line">                maxVal = delta</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-n-时间复杂度"><a href="#O-n-时间复杂度" class="headerlink" title="O(n)时间复杂度"></a>O(n)时间复杂度</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxVal :=<span class="number">0</span></span><br><span class="line">    n:=<span class="built_in">len</span>(prices)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxVal</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minElement := prices[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="built_in">len</span>(prices);i++&#123;</span><br><span class="line">        <span class="keyword">if</span> minElement&gt;prices[i] &#123;</span><br><span class="line">            minElement = prices[i]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delta:=prices[i]-minElement</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> delta &gt; <span class="number">0</span> &amp;&amp; delta&gt;maxVal&#123;</span><br><span class="line">            maxVal = delta</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L98 Validate Binary Search Tree</title>
      <link href="/2017-11-30-L98-Validate-Binary-Search-Tree/"/>
      <url>/2017-11-30-L98-Validate-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, determine if it is a valid binary search tree (BST).</span><br><span class="line"></span><br><span class="line">Assume a BST is defined as follows:</span><br><span class="line"></span><br><span class="line">The left subtree of a node contains only nodes with keys less than the node&apos;s key.</span><br><span class="line">The right subtree of a node contains only nodes with keys greater than the node&apos;s key.</span><br><span class="line">Both the left and right subtrees must also be binary search trees.</span><br><span class="line">Example 1:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">Binary tree [2,1,3], return true.</span><br><span class="line">Example 2:</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line">Binary tree [1,2,3], return false.</span><br></pre></td></tr></table></figure><p>判断一个二叉树是否为二叉搜索树</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用中序遍历这个二叉树，然后生成一个数组</li><li>判断这个数据是否有序</li></ul><a id="more"></a><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val <span class="keyword">int</span></span><br><span class="line">    Left *TreeNode</span><br><span class="line">    Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTree</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>, i <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> i&lt;n &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] == <span class="number">-1</span> &#123;</span><br><span class="line">            root = <span class="literal">nil</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">            root.Val = nums[i]</span><br><span class="line">            root.Left = initTree(root.Left, nums, <span class="number">2</span>*i+<span class="number">1</span>, n)</span><br><span class="line">            root.Right = initTree(root.Right, nums, <span class="number">2</span>*i+<span class="number">2</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root.Left, path)</span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    inorder(root.Right, path)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    inorder(root, &amp;path)</span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(path)</span><br><span class="line">    <span class="comment">//for i:=0;i&lt;n-1;i++ &#123;</span></span><br><span class="line">    <span class="comment">//  for j:=i+1;j&lt;n ;j++  &#123;</span></span><br><span class="line">    <span class="comment">//      if path[i]&gt;=path[j] &#123;</span></span><br><span class="line">    <span class="comment">//          return false</span></span><br><span class="line">    <span class="comment">//      &#125;</span></span><br><span class="line">    <span class="comment">//  &#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断数组是否有序O(n)算法</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++  &#123;</span><br><span class="line">        <span class="keyword">if</span> path[i]&gt;=path[i+<span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    nums :=[]<span class="keyword">int</span>&#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">20</span>&#125;</span><br><span class="line">    root := initTree(<span class="literal">nil</span>, nums, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    fmt.Println(isValidBST(root))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unique Binary Search Trees</title>
      <link href="/2017-11-30-Unique-Binary-Search-Trees/"/>
      <url>/2017-11-30-Unique-Binary-Search-Trees/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><h4 id="L95"><a href="#L95" class="headerlink" title="L95"></a><a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="external">L95</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given n, how many structurally </span><br><span class="line">unique BST&apos;s (binary search trees) that store values 1...n?</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s.</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h4 id="L96"><a href="#L96" class="headerlink" title="L96"></a><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/description/" target="_blank" rel="external">L96</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given an integer n, generate all structurally unique </span><br><span class="line">BST&apos;s (binary search trees) that store values 1...n.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given n = 3, your program should return all 5 unique BST&apos;s shown below.</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><blockquote><p>L95只需要给出这些二叉搜索树对应的总数即可，而L96需要给出这些二叉搜索树</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>通过排列算法给出分组，然后构建BST，通过前序遍历这些树，然后判断树是否唯一</li></ul><a id="more"></a><h3 id="Go解题思路"><a href="#Go解题思路" class="headerlink" title="Go解题思路"></a>Go解题思路</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span>&#123;</span><br><span class="line">    Val <span class="keyword">int</span></span><br><span class="line">    Left *TreeNode</span><br><span class="line">    Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Perm</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>, n <span class="keyword">int</span>, path *[]<span class="keyword">int</span>, ret *[]*TreeNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> k==n &#123;</span><br><span class="line">        s:=<span class="number">0</span></span><br><span class="line">        root := createBST(<span class="literal">nil</span>, nums)</span><br><span class="line">        preorder(root,&amp;s)</span><br><span class="line">        tag := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> _,v := <span class="keyword">range</span> *path &#123;</span><br><span class="line">            <span class="keyword">if</span> v == s &#123;</span><br><span class="line">                tag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tag &#123;</span><br><span class="line">            *path = <span class="built_in">append</span>(*path, s)</span><br><span class="line">            *ret = <span class="built_in">append</span>(*ret, root)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=k; i&lt;=n;i++  &#123;</span><br><span class="line">            nums[i], nums[k] = nums[k], nums[i]</span><br><span class="line">            Perm(nums, k+<span class="number">1</span>, n, path, ret)</span><br><span class="line">            nums[i], nums[k] = nums[k], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(root *TreeNode, val <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        root = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">        root.Val = val</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Val&gt;val &#123;</span><br><span class="line">        root.Left = insertNode(root.Left, val)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root.Right = insertNode(root.Right, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createBST</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums  &#123;</span><br><span class="line">        root = insertNode(root, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorder</span><span class="params">(root *TreeNode, s *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fmt.Printf("%d ", root.Val)</span></span><br><span class="line">    *s = *s*<span class="number">10</span>+root.Val</span><br><span class="line"></span><br><span class="line">    preorder(root.Left, s)</span><br><span class="line">    preorder(root.Right, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateTrees</span><span class="params">(n <span class="keyword">int</span>)</span> []*<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    path := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret := []*TreeNode&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=n ; i++ &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, i)</span><br><span class="line">    &#125;</span><br><span class="line">    Perm(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>, &amp;path, &amp;ret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此算法针对L95有超时的问题</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L94 Binary Tree Inorder Traversal</title>
      <link href="/2017-11-28-L94-Binary-Tree-Inorder-Traversal/"/>
      <url>/2017-11-28-L94-Binary-Tree-Inorder-Traversal/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, return the inorder traversal of its nodes&apos; values.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">Given binary tree [1,null,2,3],</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line">return [1,3,2].</span><br><span class="line"></span><br><span class="line">Note: Recursive solution is trivial, could you do it iteratively?</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用递归</li><li>使用栈进行循环</li></ul><a id="more"></a><h3 id="Go递归实现1"><a href="#Go递归实现1" class="headerlink" title="Go递归实现1"></a>Go递归实现1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorder</span><span class="params">(root *TreeNode, path *[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root.Left, path)</span><br><span class="line">    *path = <span class="built_in">append</span>(*path, root.Val)</span><br><span class="line">    inorder(root.Right, path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    path :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    inorder(root, &amp;path)</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go递归实现2"><a href="#Go递归实现2" class="headerlink" title="Go递归实现2"></a>Go递归实现2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path:=inorderTraversal(root.Left)</span><br><span class="line">    path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(path, inorderTraversal(root.Right)...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go非递归实现1"><a href="#Go非递归实现1" class="headerlink" title="Go非递归实现1"></a>Go非递归实现1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    path :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root!=<span class="literal">nil</span> || <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root!=<span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">            root = root.Left</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            path = <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">            root = root.Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go非递归实现2"><a href="#Go非递归实现2" class="headerlink" title="Go非递归实现2"></a>Go非递归实现2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    path :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">//向左走到尽头</span></span><br><span class="line">        <span class="keyword">for</span> current!=<span class="literal">nil</span>  &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">            current = current.Left</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空指针退栈</span></span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span> &#123;</span><br><span class="line">            current = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            <span class="comment">//访问节点</span></span><br><span class="line">            path = <span class="built_in">append</span>(path, current.Val)</span><br><span class="line">            <span class="comment">//将右节点压入栈</span></span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不使用栈非递归方法"><a href="#不使用栈非递归方法" class="headerlink" title="不使用栈非递归方法"></a>不使用栈非递归方法</h3><ul><li><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/" target="_blank" rel="external">http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pascal_Triangle</title>
      <link href="/2017-11-28-L118-Pascal-Triangle/"/>
      <url>/2017-11-28-L118-Pascal-Triangle/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Given numRows, generate the first numRows of Pascal&apos;s triangle.</span><br><span class="line"></span><br><span class="line">For example, given numRows = 5,</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>杨辉三角，第5行的4为例，其等于第四行的1+3。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="使用递归"><a href="#使用递归" class="headerlink" title="使用递归"></a>使用递归</h4><p>在numRows = 1 为[1]<br>在numRows = 2 为[1,1]<br>在numsRows =N, 其相对N-1进行三角加和<br><a id="more"></a></p><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pascal</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> &#123;</span><br><span class="line">        ret :=[]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> &#123;</span><br><span class="line">        ret:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp := pascal(n<span class="number">-1</span>)</span><br><span class="line">    ret :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">        k:=i<span class="number">-1</span></span><br><span class="line">        s:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> k&lt;<span class="number">0</span> &#123;</span><br><span class="line">           s=tmp[i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s = tmp[i] + tmp[k]</span><br><span class="line">        &#125;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, s)</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(numRows <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;numRows; i++ &#123;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, pascal(i))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(generate(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此思路，也可以解决<a href="https://leetcode.com/problems/pascals-triangle-ii/description/" target="_blank" rel="external">L119 Pascal’s Triangle II</a></p></blockquote><h3 id="Go非递归实现"><a href="#Go非递归实现" class="headerlink" title="Go非递归实现"></a>Go非递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(numRows <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> numRows == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> numRows == <span class="number">1</span> &#123;</span><br><span class="line">        tmp:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret,tmp)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line">    ret = <span class="built_in">append</span>(ret,[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n:=<span class="number">2</span>; n&lt;numRows; n++ &#123;</span><br><span class="line">        preTmp := ret[n<span class="number">-1</span>]</span><br><span class="line">        tmp :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">            k:=i<span class="number">-1</span></span><br><span class="line">            s:=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> k&lt;<span class="number">0</span> &#123;</span><br><span class="line">                s=preTmp[i]</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s = preTmp[i] + preTmp[k]</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, s)</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = <span class="built_in">append</span>(tmp, <span class="number">1</span>)</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, tmp)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L114_Flatten Binary Tree to Linked List</title>
      <link href="/2017-11-28-L114-Flatten-Binary-Tree-to-Linked-List/"/>
      <url>/2017-11-28-L114-Flatten-Binary-Tree-to-Linked-List/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, flatten it to a linked list in-place.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given</span><br><span class="line"></span><br><span class="line">         1</span><br><span class="line">        / \</span><br><span class="line">       2   5</span><br><span class="line">      / \   \</span><br><span class="line">     3   4   6</span><br><span class="line">The flattened tree should look like:</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">      \</span><br><span class="line">       3</span><br><span class="line">        \</span><br><span class="line">         4</span><br><span class="line">          \</span><br><span class="line">           5</span><br><span class="line">            \</span><br><span class="line">             6</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="非递归解题思路"><a href="#非递归解题思路" class="headerlink" title="非递归解题思路"></a>非递归解题思路</h4><ul><li>通过DFS遍历，首先将root压入stack</li><li>stack.pop设置为current，将current的right先压入栈，left后压入栈</li><li>设置current.left为nil,current的right为栈的最后一个元素</li><li>遍历到最后一个元素的时候，如果栈为空，将current的right设置为nil</li><li>如果栈为空，完成所有操作</li></ul><a id="more"></a><h4 id="递归解题思路"><a href="#递归解题思路" class="headerlink" title="递归解题思路"></a>递归解题思路</h4><p>以如下树为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  2</span><br><span class="line"> / \</span><br><span class="line">3   4</span><br><span class="line"> \ </span><br><span class="line">  7</span><br></pre></td></tr></table></figure><ul><li>当前root为2的时候，先保存left[3]和right[4]</li><li>将root[2]对应的left设置为nil，root[2]对应的right设置为3</li><li>遍历right的right直到为right为nil，将right[4]设置为当前节点的right</li></ul><h3 id="Go非递归实现"><a href="#Go非递归实现" class="headerlink" title="Go非递归实现"></a>Go非递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current :=stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right!=<span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left!=<span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current.Left = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">            current.Right = <span class="literal">nil</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            current.Right = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatten</span><span class="params">(root *TreeNode)</span></span>  &#123;</span><br><span class="line">    preOrder(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flatten</span><span class="params">(root *TreeNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    flatten(root.Left)</span><br><span class="line">    flatten(root.Right)</span><br><span class="line"></span><br><span class="line">    left := root.Left</span><br><span class="line">    right := root.Right</span><br><span class="line"></span><br><span class="line">    root.Left = <span class="literal">nil</span></span><br><span class="line">    root.Right = left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root.Right!=<span class="literal">nil</span>  &#123;</span><br><span class="line">        root = root.Right</span><br><span class="line">    &#125;</span><br><span class="line">    root.Right = right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L108 Convert Sorted Array to Binary Search Tree</title>
      <link href="/2017-11-27-L108-Convert-Sorted-Array-to-Binary-Search-Tree/"/>
      <url>/2017-11-27-L108-Convert-Sorted-Array-to-Binary-Search-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[0,1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">Ouput:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   1   5</span><br><span class="line">  /   / </span><br><span class="line"> 2   4</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过定位中间数作为根节点，然后二分迭代。</p><a id="more"></a><h3 id="Go-递归实现"><a href="#Go-递归实现" class="headerlink" title="Go 递归实现"></a>Go 递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">     Val <span class="keyword">int</span></span><br><span class="line">     Left *TreeNode</span><br><span class="line">     Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertNode</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>, start <span class="keyword">int</span>, end <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> start&gt;end&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p := (start+end)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    root = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">    root.Val = nums[p]</span><br><span class="line"></span><br><span class="line">    root.Left = insertNode(root.Left, nums, start, p<span class="number">-1</span>)</span><br><span class="line">    root.Right = insertNode(root.Right, nums, p+<span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedArrayToBST</span><span class="params">(nums []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    root := insertNode(<span class="literal">nil</span>, nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> root *TreeNode</span><br><span class="line">    <span class="comment">//nums := []int&#123;1,3,5,7,9&#125;</span></span><br><span class="line">    nums :=[]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    root = sortedArrayToBST(nums)</span><br><span class="line">    fmt.Println(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相似题目-L109"><a href="#相似题目-L109" class="headerlink" title="相似题目 [L109]"></a>相似题目 [L109]</h3><p>Convert Sorted List to Binary Search Tree</p><ul><li>方案1：遍历链表生成数组</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedListToBST</span><span class="params">(head *ListNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    nums :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> head!=<span class="literal">nil</span>  &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, head.Val)</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root := insertNode(<span class="literal">nil</span>, nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L105_Construct_Binary_Tree</title>
      <link href="/2017-11-27-L105-Construct-Binary-Tree/"/>
      <url>/2017-11-27-L105-Construct-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/" target="_blank" rel="external">L105</a>通过preorder以及inorder构建二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [1,2,4,3,5]</span><br><span class="line">inorder  = [4,2,1,3,5]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="external">L106</a>通过postorder以及inorder构建二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postorder = [4,2,5,3,1]</span><br><span class="line">inorder  = [4,2,1,3,5]</span><br></pre></td></tr></table></figure><p>通过preorder以及postorder无法构建二叉树，原因在于无法定位根节点。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先找到根节点，然后在inorder找到其他的index，[0,index-1]为左子树，[index+1,]为右子树。<br>递归左子树部分，通过左子树的inorder以及preorder生成左子树。同理右子树也如此。</p><a id="more"></a><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><h4 id="通过preorder以及inorder生成二叉树"><a href="#通过preorder以及inorder生成二叉树" class="headerlink" title="通过preorder以及inorder生成二叉树"></a>通过preorder以及inorder生成二叉树</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">build</span><span class="params">(preorder []<span class="keyword">int</span>, inorder []<span class="keyword">int</span>, inStart <span class="keyword">int</span>, inEnd <span class="keyword">int</span>, preIndex *<span class="keyword">int</span>)</span>*<span class="title">TreeNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> inStart&gt;inEnd &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">    node.Val = preorder[*preIndex]</span><br><span class="line">    *preIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inStart == inEnd &#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inIndex := search(inorder, inStart, inEnd, node.Val)</span><br><span class="line"></span><br><span class="line">    node.Left = build(preorder, inorder, inStart, inIndex<span class="number">-1</span>, preIndex)</span><br><span class="line">    node.Right = build(preorder, inorder, inIndex+<span class="number">1</span>, inEnd, preIndex)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(inorder []<span class="keyword">int</span>, inStart <span class="keyword">int</span>, inEnd <span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=inStart;i&lt;=inEnd ;i++  &#123;</span><br><span class="line">        <span class="keyword">if</span> inorder[i] == val &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="keyword">int</span>, inorder []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    preIndex:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> build(preorder, inorder, <span class="number">0</span>, <span class="built_in">len</span>(inorder)<span class="number">-1</span>, &amp;preIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="http://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/" target="_blank" rel="external">http://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/</a></p><h4 id="通过postorder以及inorder生成二叉树"><a href="#通过postorder以及inorder生成二叉树" class="headerlink" title="通过postorder以及inorder生成二叉树"></a>通过postorder以及inorder生成二叉树</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">build</span><span class="params">(inorder []<span class="keyword">int</span>, postorder []<span class="keyword">int</span>, inStart <span class="keyword">int</span>, inEnd <span class="keyword">int</span>, postIndex *<span class="keyword">int</span>)</span>*<span class="title">TreeNode</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> inStart&gt;inEnd &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">    node.Val = postorder[*postIndex]</span><br><span class="line"></span><br><span class="line">    *postIndex -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inStart == inEnd&#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inIndex := search(inorder, inStart, inEnd, node.Val)</span><br><span class="line">    </span><br><span class="line">    node.Right = build(inorder, postorder,inIndex+<span class="number">1</span>, inEnd, postIndex)</span><br><span class="line">    node.Left = build(inorder, postorder,inStart, inIndex<span class="number">-1</span>, postIndex)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(inorder []<span class="keyword">int</span>, inStart <span class="keyword">int</span>, inEnd <span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i=inStart;i&lt;=inEnd ;i++  &#123;</span><br><span class="line">        <span class="keyword">if</span> inorder[i] == val &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(inorder []<span class="keyword">int</span>, postorder []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    postIndex:=<span class="built_in">len</span>(postorder)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> build(inorder, postorder, <span class="number">0</span>, <span class="built_in">len</span>(inorder)<span class="number">-1</span>, &amp;postIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="http://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/" target="_blank" rel="external">http://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/</a></p><blockquote><p>通过postorder和inorder生成二叉树，是先递归生成右子树，然后再是左子树。中心思想是先定位根节点。</p></blockquote><p>以postorder为例说明:<br>[4,2,5,3,1]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> /     \</span><br><span class="line">4       5</span><br></pre></td></tr></table></figure><p>postorder[4]为根节点<br>postorder[3]为根节点的右节点</p><p>同样preorder为例说明:<br>[1,2,4,3,5]</p><p>preorder[0]为根节点<br>preorder[1]为根节点的左节点</p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L113 Path Sum II</title>
      <link href="/2017-11-24-L113-Path-Sum-II/"/>
      <url>/2017-11-24-L113-Path-Sum-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree and a sum, find all root-to-leaf paths where each path&apos;s sum equals the given sum.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">Given the below binary tree and sum = 22,</span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \    / \</span><br><span class="line">        7    2  5   1</span><br><span class="line">return</span><br><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目和<a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="external">L112 Path Sum</a>思路相同，通过DFS遍历获取路径。<br>不同的是需要通过数组保存路径。</p><a id="more"></a><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(root *TreeNode, target <span class="keyword">int</span>, sum <span class="keyword">int</span>, path []<span class="keyword">int</span>, ret *[][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum += root.Val</span><br><span class="line">    tmp := <span class="built_in">append</span>(path, root.Val)</span><br><span class="line">    path = tmp[:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right == <span class="literal">nil</span> &amp;&amp;sum == target&#123;</span><br><span class="line">        <span class="comment">//*ret = append(*ret, path)</span></span><br><span class="line">        tmp :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _,v:= <span class="keyword">range</span> path &#123;</span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, v)</span><br><span class="line">        &#125;</span><br><span class="line">        *ret = <span class="built_in">append</span>(*ret, tmp)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DFS(root.Left, target, sum, path, ret)</span><br><span class="line">    DFS(root.Right, target, sum, path, ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    path :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret :=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    DFS(root, sum, <span class="number">0</span>, path, &amp;ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的path不能直接append，而是进行值的拷贝</p></blockquote><h3 id="Go循环实现"><a href="#Go循环实现" class="headerlink" title="Go循环实现"></a>Go循环实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(current *TreeNode, parent <span class="keyword">map</span>[*TreeNode]*TreeNode, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    path :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> current!=<span class="literal">nil</span>  &#123;</span><br><span class="line">        stack = <span class="built_in">append</span>(stack, current)</span><br><span class="line">        sum += current.Val</span><br><span class="line">        current = parent[current]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">        k := <span class="built_in">len</span>(stack)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> k &gt;=<span class="number">0</span>&#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, stack[k].Val)</span><br><span class="line">            k--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfsNoRecursion</span><span class="params">(root *TreeNode, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    ret :=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    stack =  <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line">    parent := <span class="built_in">make</span>(<span class="keyword">map</span>[*TreeNode]*TreeNode, <span class="number">0</span>)</span><br><span class="line">    parent[root] = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> current *TreeNode</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>  &#123;</span><br><span class="line">        current = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left == <span class="literal">nil</span> &amp;&amp; current.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">            path :=judge(current, parent,target)</span><br><span class="line">            <span class="keyword">if</span> path !=<span class="literal">nil</span> &#123;</span><br><span class="line">                ret = <span class="built_in">append</span>(ret, path)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Right !=<span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Right)</span><br><span class="line">            parent[current.Right] = current</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, current.Left)</span><br><span class="line">            parent[current.Left] = current</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret:=dfsNoRecursion(root, sum)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要记录节点的父亲节点信息，用于路径的回溯</p></blockquote><p>参考的链接:<br><a href="http://www.geeksforgeeks.org/print-root-leaf-path-without-using-recursion/" target="_blank" rel="external">http://www.geeksforgeeks.org/print-root-leaf-path-without-using-recursion/</a></p><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'guosong'</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, sum)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type sum: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        path = []</span><br><span class="line">        ret = []</span><br><span class="line"></span><br><span class="line">        self.dfs(root, sum, <span class="number">0</span>, path, ret)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initTree</span><span class="params">(self, root, nums, i, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">-1</span>:</span><br><span class="line">                root = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = TreeNode(nums[i])</span><br><span class="line">                root = node</span><br><span class="line">                root.left = self.initTree(root.left, nums, <span class="number">2</span>*i+<span class="number">1</span>, n)</span><br><span class="line">                root.right = self.initTree(root.right, nums, <span class="number">2</span>*i+<span class="number">2</span>, n)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root, target, s,path, ret)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        s += root.val</span><br><span class="line">        path = path + [root.val]</span><br><span class="line">        <span class="comment">#path.append(root.val)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> s == target:</span><br><span class="line">            ret.append(path)</span><br><span class="line">        self.dfs(root.left, target, s, path, ret)</span><br><span class="line">        self.dfs(root.right, target,s, path, ret)</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">nums = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">-1</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">root = <span class="keyword">None</span></span><br><span class="line">root = s.initTree(root, nums,<span class="number">0</span>,len(nums))</span><br><span class="line"><span class="keyword">print</span> s.pathSum(root, <span class="number">22</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意点：path的追加方式不是通过path.append(root.val)，而是path=path+[root.val]的方式。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L112 Path Sum</title>
      <link href="/2017-11-23-L112-Path-Sum/"/>
      <url>/2017-11-23-L112-Path-Sum/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">Given the below binary tree and sum = 22,</span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \      \</span><br><span class="line">        7    2      1</span><br><span class="line">return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用深度遍历的方式进行解决。</p><a id="more"></a> <h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, target <span class="keyword">int</span>, sum <span class="keyword">int</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum += root.Val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left==<span class="literal">nil</span> &amp;&amp; root.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> sum == target &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> travel(root.Left, target, sum) || travel(root.Right, target, sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(root *TreeNode, sum <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> travel(root, sum, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L111 Minimum Depth of Binary Tree</title>
      <link href="/2017-11-22-L111-Minimum-Depth-of-Binary-Tree/"/>
      <url>/2017-11-22-L111-Minimum-Depth-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Given a binary tree, find its minimum depth.</span><br><span class="line">The minimum depth is the number of nodes along </span><br><span class="line">the shortest path from the root node down to the nearest leaf node.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">    1</span><br><span class="line">   /</span><br><span class="line">  2</span><br><span class="line">Output:</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>和<a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="external">104</a>题目的<a href="https://dolphinsboy.github.io/2017-11-21-L104-Maximum-Depth-of-Binary-Tree">解题思路相同</a></p><p>不同的是将depth设置为一个比较大的数，和level+1进行比较，如果出现更小的就替换。</p><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, depth *<span class="keyword">int</span>, level <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root.Left == <span class="literal">nil</span> &amp;&amp; root.Right==<span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> *depth&gt;level+<span class="number">1</span> &#123;</span><br><span class="line">            *depth = level+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    travel(root.Left, depth, level+<span class="number">1</span>)</span><br><span class="line">    travel(root.Right, depth, level+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> depth <span class="keyword">int</span></span><br><span class="line">    depth=<span class="number">10000</span></span><br><span class="line">    travel(root, &amp;depth, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> depth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L104 Maximum Depth of Binary Tree</title>
      <link href="/2017-11-21-L104-Maximum-Depth-of-Binary-Tree/"/>
      <url>/2017-11-21-L104-Maximum-Depth-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, find its maximum depth.</span><br><span class="line"></span><br><span class="line">The maximum depth is the number of nodes along the longest path </span><br><span class="line">from the root node down to the farthest leaf node.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>将maxDepth设置为0， 判断当面节点的depth是否大于maxDepth，如果是就替换。</p><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, depth *<span class="keyword">int</span>, level <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> *depth &lt; level&#123;</span><br><span class="line">            *depth = level</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        travel(root.Left, depth, level+<span class="number">1</span>)</span><br><span class="line">        travel(root.Right, depth, level+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> depth <span class="keyword">int</span></span><br><span class="line">    travel(root, &amp;depth, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> depth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法遍历了两边，是否可以减少遍历</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leftDepth  := maxDepth(root.Left)</span><br><span class="line">    rightDepth := maxDepth(root.Right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> leftDepth &gt;rightDepth&#123;</span><br><span class="line">        <span class="keyword">return</span> leftDepth+<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rightDepth+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Traceroute</title>
      <link href="/2017-11-20-Traceroute/"/>
      <url>/2017-11-20-Traceroute/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>用户反馈使用移动4G以及wifi访问公司业务有问题，使用电信没有问题，故需要获取用户网络相关访问信息。<br>traceroute工具是第一选择。</p><a id="more"></a><h3 id="Traceroute使用说明"><a href="#Traceroute使用说明" class="headerlink" title="Traceroute使用说明"></a>Traceroute使用说明</h3><p>通过traceroute可以知道信息从计算机到互联网另一端的访问路径。<br>traceroute通过发送小的数据包到目的设备直到其返回，来测量其需多长时间。<br>一条路径上的每个设备traceroute要测3次。<br>输出结果中包括每次的测试时间、设备名称（有的话）以及其IP地址。</p><h3 id="Traceroute-APP"><a href="#Traceroute-APP" class="headerlink" title="Traceroute APP"></a>Traceroute APP</h3><p>小白用户无法使用traceroute命令，况且需要在手机上traceroute，针对这个问题有traceroute APP。<br>推荐腾讯云诊断APP，可以将针对结果通过QQ和微信分享。</p><p>其诊断信息包括：</p><ul><li>Http </li><li>Net</li><li>Ping</li><li>NSLookup</li><li>TraceRoute</li><li>Device信息</li><li>PortScan</li><li>Mtuscan</li><li>Host</li></ul><p>如下是腾讯云诊断APP的结果展示:<br><img src="/images/tencent_cloud_traceroute.jpg" alt="result"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.cnblogs.com/peida/archive/2013/03/07/2947326.html" target="_blank" rel="external">https://www.cnblogs.com/peida/archive/2013/03/07/2947326.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Linux Tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L110 Balanced Binary Tree</title>
      <link href="/2017-11-20-L110-Balanced-Binary-Tree/"/>
      <url>/2017-11-20-L110-Balanced-Binary-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, determine if it is height-balanced.</span><br><span class="line">For this problem, a height-balanced binary tree is defined as a binary tree </span><br><span class="line">in which the depth of the two subtrees of every node never differ by more than 1.</span><br></pre></td></tr></table></figure><p>判断一个二叉树是否为平衡二叉树。<br>平衡的定义是左右子树树的高度相差小于等于1。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用前序遍历树，然后其对应的左右子树高度是否小于等于1。</p><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(root *TreeNode, maxDepth *<span class="keyword">int</span>, level <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> *maxDepth &lt;level &#123;</span><br><span class="line">        *maxDepth = level</span><br><span class="line">    &#125;</span><br><span class="line">    height(root.Left, maxDepth, level+<span class="number">1</span>)</span><br><span class="line">    height(root.Right, maxDepth, level+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> leftDepth=<span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rightDepth=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    height(root.Left, &amp;leftDepth, <span class="number">1</span>)</span><br><span class="line">    height(root.Right, &amp;rightDepth, <span class="number">1</span>)</span><br><span class="line">    delta := leftDepth-rightDepth</span><br><span class="line">    <span class="keyword">if</span> delta&gt;=<span class="number">-1</span> &amp;&amp; delta&lt;=<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> preOrder(root.Left) &amp;&amp; preOrder(root.Right)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> preOrder(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这里的level在root为非nil的时候设置为1</strong></p><p><strong>计算树的高度算法</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">nil</span> == root &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxInt(findDepth(root.Left), findDepth(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L107 Binary Tree Level Order Traversal II</title>
      <link href="/2017-11-19-L107-Binary-Tree-Level-Order-Traversal-II/"/>
      <url>/2017-11-19-L107-Binary-Tree-Level-Order-Traversal-II/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Given a binary tree, return the bottom-up level order traversal of its nodes values.</span><br><span class="line">(ie, from left to right, level by level from leaf to root).</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">Given binary tree [3,9,20,null,null,15,7],</span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">return its bottom-up level order traversal as:</span><br><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>层次遍历树节点，并按照层次的逆序输出</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用前序遍历的方法，将各个节点对应的level打印出来，然后level进行归类。</p><a id="more"></a><h3 id="Go实现-递归"><a href="#Go实现-递归" class="headerlink" title="Go实现-递归"></a>Go实现-递归</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorder</span><span class="params">(root *TreeNode, ret *[]<span class="keyword">int</span>, levelList *[]<span class="keyword">int</span>, level <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *ret = <span class="built_in">append</span>(*ret, root.Val)</span><br><span class="line">    *levelList = <span class="built_in">append</span>(*levelList, level)</span><br><span class="line"></span><br><span class="line">    preorder(root.Left, ret, levelList, level+<span class="number">1</span>)</span><br><span class="line">    preorder(root.Right, ret, levelList, level+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrderBottom</span><span class="params">(root *TreeNode)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    r :=[][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    ret :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    levelList :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    preorder(root, &amp;ret, &amp;levelList,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,v:=<span class="keyword">range</span> levelList &#123;</span><br><span class="line">        m[v] = <span class="built_in">append</span>(m[v], ret[i])</span><br><span class="line">    &#125;</span><br><span class="line">    keys :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> m&#123;</span><br><span class="line">        keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Ints(keys)</span><br><span class="line">    n := <span class="built_in">len</span>(keys) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n&gt;=<span class="number">0</span> &#123;</span><br><span class="line">        r = <span class="built_in">append</span>(r, m[keys[n]])</span><br><span class="line">        n--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前序遍历比较简单，主要代码在于结果的处理。</p><h3 id="相似题目L102"><a href="#相似题目L102" class="headerlink" title="相似题目L102"></a>相似题目<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/" target="_blank" rel="external">L102</a></h3><p>其输出的顺序是层次遍历二叉树，根节点先出，最后是叶子节点.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val   <span class="keyword">int</span></span><br><span class="line">    Left  *TreeNode</span><br><span class="line">    Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTree</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>, i <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node *TreeNode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &lt; n &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] == <span class="number">-1</span> &#123;</span><br><span class="line">            root = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">            node.Val = nums[i]</span><br><span class="line">            root = node</span><br><span class="line">            root.Left = initTree(root.Left, nums, <span class="number">2</span>*i+<span class="number">1</span>, n)</span><br><span class="line">            root.Right = initTree(root.Right, nums, <span class="number">2</span>*i+<span class="number">2</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, m <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, ok := m[level]; !ok &#123;</span><br><span class="line">        m[level] = []<span class="keyword">int</span>&#123;root.Val&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m[level] = <span class="built_in">append</span>(m[level], root.Val)</span><br><span class="line">    &#125;</span><br><span class="line">    travel(root.Left, level+<span class="number">1</span>, m)</span><br><span class="line">    travel(root.Right, level+<span class="number">1</span>, m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    travel(root, <span class="number">0</span>, m)</span><br><span class="line">    maxDepth := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> maxDepth &lt; k &#123;</span><br><span class="line">            maxDepth = k</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxDepth; i++ &#123;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, m[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root *TreeNode</span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">15</span>, <span class="number">7</span>&#125;</span><br><span class="line">    root = initTree(root, nums, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ret := levelOrder(root)</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相似题目L103"><a href="#相似题目L103" class="headerlink" title="相似题目L103"></a>相似题目<a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/" target="_blank" rel="external">L103</a></h3><p>通过深度遍历，记录各个节点的level，然后以zigzag的方式输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travel</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, m <span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, ok := m[level]; !ok &#123;</span><br><span class="line">        m[level] = []<span class="keyword">int</span>&#123;root.Val&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m[level] = <span class="built_in">append</span>(m[level], root.Val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    travel(root.Left, level+<span class="number">1</span>, m)</span><br><span class="line">    travel(root.Right, level+<span class="number">1</span>, m)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    s:=<span class="number">0</span></span><br><span class="line">    e:=<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s&lt;e&#123;</span><br><span class="line">        nums[s], nums[e] = nums[e], nums[s]</span><br><span class="line">        s++</span><br><span class="line">        e--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zigzagLevelOrder</span><span class="params">(root *TreeNode)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    travel(root, <span class="number">0</span>, m)</span><br><span class="line">    maxDepth := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> maxDepth &lt; k &#123;</span><br><span class="line">            maxDepth = k</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxDepth; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span> &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, reverse(m[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, m[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L101_Symmetric_Tree</title>
      <link href="/2017-11-17-L101-Symmetric-Tree/"/>
      <url>/2017-11-17-L101-Symmetric-Tree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</span><br><span class="line"></span><br><span class="line">For example, this binary tree [1,2,2,3,4,4,3] is symmetric:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line">But the following [1,2,2,null,3,null,3] is not:</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br><span class="line">Note:</span><br><span class="line">Bonus points if you could solve it both recursively and iteratively.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>此题目可以转化为<a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="external">L100_Same_Tree</a>的解题思路。<br>L100是判断两颗树是否相同，比较Left和Right是否相同，对两个数进行中序遍历。<br>此题目可以对root的Left进行中左右遍历，对root的Right进行中右左遍历。</p><a id="more"></a><h3 id="Go实现-递归"><a href="#Go实现-递归" class="headerlink" title="Go实现-递归"></a>Go实现-递归</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(left *TreeNode, right *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">nil</span> &amp;&amp; right !=<span class="literal">nil</span>) || (left !=<span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left.Val == right.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> judge(left.Left, right.Right) &amp;&amp; judge(left.Right, right.Left)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> judge(root.Left, root.Right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NOTE:如果root节点为nil，返回值为true</p><p><strong>去除重复的逻辑判断后的代码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(left *TreeNode, right *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> || right !=<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (left.Val == right.Val) &amp;&amp; </span><br><span class="line">        judge(left.Left, right.Right) &amp;&amp; </span><br><span class="line">        judge(left.Right, right.Left)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> judge(root, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go非递归实现"><a href="#Go非递归实现" class="headerlink" title="Go非递归实现"></a>Go非递归实现</h3><p>使用非递归遍历的方法将左右子树节点放在数组中，然后比较这两个数组的数据是否相同。<br>注意点：对于不存在的节点，其对应的值为-1，例如下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">order</span><span class="params">(root *TreeNode, flag <span class="keyword">bool</span>)</span> <span class="params">(t_list[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []*TreeNode</span><br><span class="line">    <span class="keyword">var</span> p *TreeNode</span><br><span class="line">    p = root</span><br><span class="line">    <span class="keyword">for</span> p != <span class="literal">nil</span> || <span class="built_in">len</span>(stack)!=<span class="number">0</span>  &#123;</span><br><span class="line">        <span class="keyword">for</span> p!=<span class="literal">nil</span>  &#123;</span><br><span class="line">            t_list = <span class="built_in">append</span>(t_list, p.Val)</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, p)</span><br><span class="line">            <span class="keyword">if</span> flag &#123;</span><br><span class="line">                p = p.Left</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p = p.Right</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t_list = <span class="built_in">append</span>(t_list, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)!=<span class="number">0</span> &#123;</span><br><span class="line">            p = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            stack = stack[<span class="number">0</span>:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> flag &#123;</span><br><span class="line">                p = p.Right</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p = p.Left</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(t1 *TreeNode, t2 *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t1 == <span class="literal">nil</span> &amp;&amp; t2 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t1 == <span class="literal">nil</span> || t2 ==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t1_list []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> t2_list []<span class="keyword">int</span></span><br><span class="line">    t1_list = order(t1.Left, <span class="literal">true</span>)</span><br><span class="line">    t2_list = order(t2.Right, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t1_list) != <span class="built_in">len</span>(t2_list) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(t1_list);i++  &#123;</span><br><span class="line">        <span class="keyword">if</span> t1_list[i] != t2_list[i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> judge(root, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L100_SameTree</title>
      <link href="/2017-11-17-L100-SameTree/"/>
      <url>/2017-11-17-L100-SameTree/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="external">题目描述</a></h3><p>判断两个二叉树是否相同</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Given two binary trees, write a function to check if they are the same or not.</span><br><span class="line"></span><br><span class="line">Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>中序遍历二叉树</p><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(p *TreeNode, q *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p==<span class="literal">nil</span> &amp;&amp; q ==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">nil</span> &amp;&amp; q !=<span class="literal">nil</span>)||(p!=<span class="literal">nil</span> &amp;&amp; q==<span class="literal">nil</span>)  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.Val==q.Val &#123;</span><br><span class="line">        flag:=isSameTree(p.Left, q.Left)</span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            flag=isSameTree(p.Right, q.Right)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将flag部分去掉，改进的写法:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(p *TreeNode, q *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p==<span class="literal">nil</span> &amp;&amp; q ==<span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">nil</span> &amp;&amp; q !=<span class="literal">nil</span>)||(p!=<span class="literal">nil</span> &amp;&amp; q==<span class="literal">nil</span>)  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.Val==q.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> isSameTree(p.Left, q.Left) &amp;&amp; isSameTree(p.Right,q.Right)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题难点"><a href="#问题难点" class="headerlink" title="问题难点"></a>问题难点</h3><p>在完成这道题目的时候，直接submit的，没有进行测试，难点在于如何构建这个二叉树。</p><p>使用后续遍历的方式生成二叉树。</p><p><strong>Go代码实现</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTree</span><span class="params">(root *TreeNode, nums []<span class="keyword">int</span>, i <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> node *TreeNode</span><br><span class="line">    <span class="keyword">if</span> i&lt;n &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] == <span class="number">-1</span>&#123;</span><br><span class="line">            node = <span class="literal">nil</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node = <span class="built_in">new</span>(TreeNode)</span><br><span class="line">            node.Val = nums[i]</span><br><span class="line">            root = node</span><br><span class="line"></span><br><span class="line">            root.Left = initTree(root.Left, nums, <span class="number">2</span>*i+<span class="number">1</span>, n)</span><br><span class="line">            root.Right = initTree(root.Right, nums, <span class="number">2</span>*i+<span class="number">2</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考来源：<a href="http://www.geeksforgeeks.org/construct-complete-binary-tree-given-array/" target="_blank" rel="external">http://www.geeksforgeeks.org/construct-complete-binary-tree-given-array/</a></p><p><strong>测试</strong></p><p>使用中序遍历<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(root *TreeNode)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> root!=<span class="literal">nil</span> &#123;</span><br><span class="line">        inOrder(root.Left)</span><br><span class="line">        fmt.Println(root.Val)</span><br><span class="line">        inOrder(root.Right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L83_Merge_Sorted_Array</title>
      <link href="/2017-11-16-L83-Merge-Sorted-Array/"/>
      <url>/2017-11-16-L83-Merge-Sorted-Array/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/merge-sorted-array/description/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. </span><br><span class="line">The number of elements initialized in nums1 and nums2 are m and n respectively.</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>nums1有足够的空间可以容纳2个数组的数据，故解题思路前提是不额外申请空间。<br>遍历nums2数据对nums1进行插入排序。</p><a id="more"></a><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="keyword">int</span>, m <span class="keyword">int</span>, nums2 []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> k:=<span class="number">0</span>;k&lt;n;k++  &#123;</span><br><span class="line">            nums1[k] = nums2[k]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j&lt;n  &#123;</span><br><span class="line">        i:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i&lt;m &amp;&amp; nums1[i]&lt;nums2[j]  &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i&gt;=m &#123;</span><br><span class="line">            nums1[i] = nums2[j]</span><br><span class="line">            j++</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            t := nums1[i]</span><br><span class="line">            nums1[i] = nums2[j]</span><br><span class="line">            <span class="keyword">for</span> i&lt;m  &#123;</span><br><span class="line">                t1 :=nums1[i+<span class="number">1</span>]</span><br><span class="line">                nums1[i+<span class="number">1</span>] = t</span><br><span class="line">                t = t1</span><br><span class="line">                i++</span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        m +=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    nums1 := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="comment">//[]int&#123;1,3,5&#125;</span></span><br><span class="line">    nums1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    nums1[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    nums2 :=[]<span class="keyword">int</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">    m := <span class="number">1</span></span><br><span class="line">    n := <span class="number">1</span></span><br><span class="line">    merge(nums1, m, nums2, n)</span><br><span class="line">    fmt.Println(nums1[<span class="number">0</span>:m+n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L83_从有序链表中删除重复的数据</title>
      <link href="/2017-11-16-LeetCode-L83-%E4%BB%8E%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2017-11-16-LeetCode-L83-%E4%BB%8E%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given a sorted linked list, delete all duplicates such that each element appear only once.</span><br><span class="line"></span><br><span class="line">For example,</span><br><span class="line">Given 1-&gt;1-&gt;2, return 1-&gt;2.</span><br><span class="line">Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure><p>从有序链表中删除重复的数据</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用两个指针prev，next变量链表</li><li>判断next的val是否和prev的val相同</li><li>如果相同，将prev的next设置为next.next，删除next节点</li><li>如果不同，将prev以及next都往后移动</li></ul><a id="more"></a><h3 id="Go-循环实现"><a href="#Go-循环实现" class="headerlink" title="Go 循环实现"></a>Go 循环实现</h3><p>增加Insert以及printNode两个函数便于测试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">     Val <span class="keyword">int</span></span><br><span class="line">     Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Insert</span><span class="params">(vals...<span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head *ListNode</span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> vals &#123;</span><br><span class="line">        n := <span class="built_in">new</span>(ListNode)</span><br><span class="line">        n.Val = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            head = n</span><br><span class="line">            current = head</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            current.Next = n</span><br><span class="line">            current = n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNode</span><span class="params">(head *ListNode)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> head!=<span class="literal">nil</span>  &#123;</span><br><span class="line">        fmt.Println(head.Val)</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    prev := head</span><br><span class="line">    next := head.Next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> next !=<span class="literal">nil</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span> next.Val == prev.Val &#123;</span><br><span class="line">            prev.Next = next.Next</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev = next</span><br><span class="line">        &#125;</span><br><span class="line">        next = next.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="comment">//1-&gt;1-&gt;2-&gt;3-&gt;3</span></span><br><span class="line">    head :=Insert(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    deleteDuplicates(head)</span><br><span class="line">    printNode(head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go递归实现"><a href="#Go递归实现" class="headerlink" title="Go递归实现"></a>Go递归实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head.Val == head.Next.Val&#123;</span><br><span class="line">        <span class="keyword">return</span> deleteDuplicates(head.Next)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        head.Next = deleteDuplicates(head.Next)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归实现的核心思想</strong></p><ul><li>如果head节点和head.Next出现重复，将head往重复的节点移动，按照再判断以此节点为head的链表去除情况。</li><li>如果head的后面节点没有和head相同，对head的Next节点为新的head进行去重判断。head节点维持不变。</li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'guosong'</span></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> head.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> head.val == head.next.val:</span><br><span class="line">            <span class="keyword">return</span> self.deleteDuplicates(head.next)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head.next = self.deleteDuplicates(head.next)</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, vals)</span>:</span></span><br><span class="line">        head = <span class="keyword">None</span></span><br><span class="line">        current = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> vals:</span><br><span class="line">            n = ListNode(v)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                head = n</span><br><span class="line">                current = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current.next = n</span><br><span class="line">                current = current.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">print</span> head.val</span><br><span class="line">            head = head.next</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">head = s.insert([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">head = s.deleteDuplicates(head)</span><br><span class="line">s.printNode(head)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L66_PlusOne</title>
      <link href="/2017-11-14-Leetcode-L66-PlusOne/"/>
      <url>/2017-11-14-Leetcode-L66-PlusOne/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/plus-one" target="_blank" rel="external">题目描述</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</span><br><span class="line"></span><br><span class="line">You may assume the integer do not contain any leading zero, except the number 0 itself.</span><br><span class="line"></span><br><span class="line">The digits are stored such that the most significant digit is at the head of the list.</span><br></pre></td></tr></table></figure><p>大体意思是给一个数组表示一个非负数，这个非负数加上1，结果还返回一个数组</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>倒叙遍历数组，判断是否需要进位。</p><a id="more"></a><h3 id="Go-版本"><a href="#Go-版本" class="headerlink" title="Go 版本"></a>Go 版本</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(digits []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(digits)</span><br><span class="line">    ret :=[]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    s :=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">        s += digits[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> s&gt;<span class="number">9</span>&#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, s%<span class="number">10</span>)</span><br><span class="line">            s = s/<span class="number">10</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret,s)</span><br><span class="line">            s = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s &gt; <span class="number">0</span>&#123;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(ret)</span><br><span class="line">    i:=<span class="number">0</span></span><br><span class="line">    j:=n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i&lt;j&#123;</span><br><span class="line">        ret[i], ret[j] = ret[j], ret[i]</span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><p>在Go的版本临时申请一个数组保存结果，通过append函数在尾部进行追加，最后返回这个数组的倒序结果。</p><p>Python版本中不借助额外的空间，使用insert函数在头部插入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        n = len(digits) - <span class="number">1</span></span><br><span class="line">        carry = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;=<span class="number">0</span>:</span><br><span class="line">            digits[n] += carry</span><br><span class="line">            <span class="keyword">if</span> digits[n] &gt; <span class="number">9</span>:</span><br><span class="line">                carry = digits[n]/<span class="number">10</span></span><br><span class="line">                digits[n] %= <span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                carry = <span class="number">0</span></span><br><span class="line">            n-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            digits.insert(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>L15_3sum</title>
      <link href="/2017-11-13-leetcode-L15-3sum/"/>
      <url>/2017-11-13-leetcode-L15-3sum/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/3sum" target="_blank" rel="external">题目描述</a></h3><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note: The solution set must not contain duplicate triplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先将数组进行排序，排序后使用3个索引进行sum的判断</p><a id="more"></a><h3 id="Go版本"><a href="#Go版本" class="headerlink" title="Go版本"></a>Go版本</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    l := <span class="built_in">len</span>(nums)</span><br><span class="line">    r := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;l<span class="number">-2</span>;i++  &#123;</span><br><span class="line">        j := i+<span class="number">1</span></span><br><span class="line">        k := l<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j&lt;k &#123;</span><br><span class="line">            s := nums[i] + nums[j] + nums[k]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s&gt;<span class="number">0</span>&#123;</span><br><span class="line">                k--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> s&lt;<span class="number">0</span> &#123;</span><br><span class="line">                j++</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                row:=[]<span class="keyword">int</span>&#123;nums[i],nums[j], nums[k]&#125;</span><br><span class="line">                flag := <span class="literal">true</span></span><br><span class="line">                <span class="keyword">for</span> _, v := <span class="keyword">range</span> r&#123;</span><br><span class="line">                    <span class="keyword">if</span> v[<span class="number">0</span>]==row[<span class="number">0</span>] &amp;&amp;v[<span class="number">1</span>] == row[<span class="number">1</span>] &amp;&amp; v[<span class="number">2</span>] == row[<span class="number">2</span>] &#123;</span><br><span class="line">                        flag = <span class="literal">false</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> flag &#123;</span><br><span class="line">                    r = <span class="built_in">append</span>(r,row)</span><br><span class="line">                &#125;</span><br><span class="line">                j++</span><br><span class="line">                k--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        r = []</span><br><span class="line"></span><br><span class="line">        nums = sorted(nums)</span><br><span class="line">        l = len(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            k = l - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; k:</span><br><span class="line">                s = nums[i] + nums[j] + nums[k]</span><br><span class="line">                <span class="keyword">if</span> s &gt; <span class="number">0</span>:</span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> s &lt; <span class="number">0</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    t = [nums[i], nums[j], nums[k]]</span><br><span class="line">                    <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">                        r.append(t)</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                    k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tcollector源码功能解读</title>
      <link href="/2017-03-22-tcollectoryuan-ma-gong-neng-jie-du/"/>
      <url>/2017-03-22-tcollectoryuan-ma-gong-neng-jie-du/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>tcollector包括如下python学习点，强烈推荐阅读</p></blockquote><ul><li>参数解析</li><li>log日志</li><li>信号量</li><li>目录结构遍历</li><li>多线程以及多线程之间的数据共享</li><li>队列</li><li>定时任务</li><li>rpm打包</li><li>collector采集</li><li>程序兼容以及动态（collectors的动态更新，程序如何兼容）</li><li>subprocess执行脚本</li><li>socket通信</li><li>正则表达式</li><li>守护进程</li><li>PYTHONPATH 设置</li><li>yield 迭代实现</li><li>单元测试以及mock</li></ul><a id="more"></a><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemonize</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.fork():</span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line">    os.chdir(<span class="string">"/"</span>)</span><br><span class="line">    os.umask(<span class="number">022</span>)</span><br><span class="line">    os.setsid()</span><br><span class="line">    os.umask(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> os.fork():</span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line">    stdin = open(os.devnull)</span><br><span class="line">    stdout = open(os.devnull, <span class="string">'w'</span>)</span><br><span class="line">    os.dup2(stdin.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(stdout.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(stdout.fileno(), <span class="number">2</span>)</span><br><span class="line">    stdin.close()</span><br><span class="line">    stdout.close()</span><br><span class="line">    <span class="keyword">for</span> fd <span class="keyword">in</span> xrange(<span class="number">3</span>, <span class="number">1024</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.close(fd)</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    daemonize()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"/Users/guosong/opdir/20181105/data"</span>, <span class="string">"a+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">"%s\n"</span> % time.ctime())</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>AWS boto3</title>
      <link href="/2017-02-08-aws-boto3/"/>
      <url>/2017-02-08-aws-boto3/</url>
      <content type="html"><![CDATA[<h2 id="1-根据机器名称获取instance"><a href="#1-根据机器名称获取instance" class="headerlink" title="1.根据机器名称获取instance"></a>1.根据机器名称获取instance</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ec2 = boto3.resource(<span class="string">"ec2"</span>)</span><br><span class="line"></span><br><span class="line">instances = ec2.instances.filter(</span><br><span class="line">¦   ¦   Filters = [&#123;<span class="string">'Name'</span>: <span class="string">'tag-value'</span>, <span class="string">'Values'</span>:[<span class="string">'service-test1'</span>]&#125;])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> instance <span class="keyword">in</span> instances:</span><br><span class="line">¦   <span class="keyword">print</span> instance</span><br></pre></td></tr></table></figure><h2 id="2-获取所有机器的信息"><a href="#2-获取所有机器的信息" class="headerlink" title="2.获取所有机器的信息"></a>2.获取所有机器的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ec2 = boto3.resource(<span class="string">"ec2"</span>)</span><br><span class="line">instances = ec2.instances.filter()</span><br><span class="line"><span class="keyword">for</span> instance <span class="keyword">in</span> instances:</span><br><span class="line"><span class="keyword">print</span> instance</span><br></pre></td></tr></table></figure><h2 id="3-通过instance-id获取机器信息"><a href="#3-通过instance-id获取机器信息" class="headerlink" title="3.通过instance_id获取机器信息"></a>3.通过instance_id获取机器信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ec2 = boto3.resource(<span class="string">"ec2"</span>)</span><br><span class="line">instance = ec2.Instance(<span class="string">'i-d8d0c8e1'</span>)</span><br><span class="line"><span class="keyword">print</span> instance.instance_type</span><br></pre></td></tr></table></figure><p>通过方法1和方法3获取信息所需要时间差不多，方法2获取所需要时间多。</p>]]></content>
      
      <categories>
          
          <category> AWS API </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>在AWS EC2搭建Hadoop2.6集群</title>
      <link href="/2016-12-23-zai-aws-ec2da-jian-hadoop2-dot-6ji-qun/"/>
      <url>/2016-12-23-zai-aws-ec2da-jian-hadoop2-dot-6ji-qun/</url>
      <content type="html"><![CDATA[<h3 id="升级Java版本"><a href="#升级Java版本" class="headerlink" title="升级Java版本"></a>升级Java版本</h3><p>Hadoop2.X版本需要JDK1.8版本，故首要任务就先升级JDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk.x86_64</span><br><span class="line">#生成jps</span><br><span class="line">sudo yum install java-1.8.0-openjdk-devel.x86_64</span><br><span class="line">sudo alternatives --config java</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p><a href="http://www.powerxing.com/install-hadoop-cluster/" target="_blank" rel="external">http://www.powerxing.com/install-hadoop-cluster/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format       # 首次运行需要执行初始化，之后不需要</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p><a href="http://blog.csdn.net/huwei2003/article/details/49101269" target="_blank" rel="external">http://blog.csdn.net/huwei2003/article/details/49101269</a></p><h3 id="安装hbase"><a href="#安装hbase" class="headerlink" title="安装hbase"></a>安装hbase</h3><p><a href="http://www.cnblogs.com/nexiyi/p/hbase_intro_94.html" target="_blank" rel="external">http://www.cnblogs.com/nexiyi/p/hbase_intro_94.html</a></p><h3 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h3><p><a href="http://kevin12.iteye.com/blog/2280777" target="_blank" rel="external">http://kevin12.iteye.com/blog/2280777</a></p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><ul><li><p>找不到java驱动<br>将java-connector-driver放在lib下</p></li><li><p>Terminal initialization failed; falling back to unsupported<br>原因是hadoop目录下存在老版本jline：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/hadoop-2.5.2/share/hadoop/yarn/lib：</span><br><span class="line">-rw-r--r-- 1 root root   87325 Mar 10 18:10 jline-0.9.94.jar</span><br></pre></td></tr></table></figure></li></ul><p>解决方法是：<br>将hive下的新版本jline的JAR包拷贝到hadoop下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /hive/apache-hive-1.1.0-bin/lib/jline-2.12.jar ./</span><br><span class="line">/hadoop-2.5.2/share/hadoop/yarn/lib：</span><br><span class="line">-rw-r--r-- 1 root root   87325 Mar 10 18:10 jline-0.9.94.jar.bak</span><br><span class="line">-rw-r--r-- 1 root root  213854 Mar 11 22:22 jline-2.12.jar</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.polarxiong.com/archives/Hadoop-Intellij%E7%BB%93%E5%90%88Maven%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95MapReduce%E7%A8%8B%E5%BA%8F-%E6%97%A0%E9%9C%80%E6%90%AD%E8%BD%BDHadoop%E5%92%8CHDFS%E7%8E%AF%E5%A2%83.html" target="_blank" rel="external">IntelliJIDE配置Maven库</a></li></ul><p>使用私有的maven库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.hadoop.ipc.RemoteException: Server IPC version 9 cannot communicaite with client version 4 </span><br><span class="line">log4j:WARN No appenders could be found for logger (org.apache.hadoop.metrics2.lib.MutableMetricsFactory).</span><br></pre></td></tr></table></figure></p><ul><li>Permission denied: user=guosong 写HDFS无权限<br>[hadoop@hbase-test-00 ~]$ hdfs dfs -chown -R guosong:guosong /user/guosong<br>[hadoop@hbase-test-00 ~]$ hdfs dfs -ls /user/guosong   </li></ul><p><a href="https://github.com/ljdursi/hadoop-for-hpcers-tutorial/blob/master/presentation/presentation.md" target="_blank" rel="external">https://github.com/ljdursi/hadoop-for-hpcers-tutorial/blob/master/presentation/presentation.md</a></p><ul><li>Cannot run program “map.py”: error=2, No such file or directory</li></ul><p>错误的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar ./hadoop-2.6.4/share/hadoop/tools/lib/hadoop-streaming-2.6.4.jar -input input/ncdd.txt -output output -mapper map.py -reducer reduce.py</span><br></pre></td></tr></table></figure><p>正确的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar ./hadoop-2.6.4/share/hadoop/tools/lib/hadoop-streaming-2.6.4.jar -input input/ncdd.txt -output output -mapper map.py  -file ./map.py -reducer reduce.py  -file ./reduce.py</span><br></pre></td></tr></table></figure><p><a href="https://wiki.apache.org/hadoop/HadoopStreaming" target="_blank" rel="external">https://wiki.apache.org/hadoop/HadoopStreaming</a></p><ul><li>Error: Could not find or load main class StreamCompressor</li></ul><p>正确的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hbase-test-00 StreamCompressor]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 hadoop hadoop 1831 Jan  4 17:26 StreamCompressor.class</span><br><span class="line">[hadoop@hbase-test-00 StreamCompressor]$ echo $HADOOP_CLASSPATH</span><br><span class="line">/home/hadoop/code/StreamCompressor:</span><br><span class="line">[hadoop@hbase-test-00 StreamCompressor]$ pwd</span><br><span class="line">/home/hadoop/code/StreamCompressor</span><br><span class="line">[hadoop@hbase-test-00 StreamCompressor]$ echo &quot;TestDDDDDDDDDDD&quot; | hadoop StreamCompressor org.apache.hadoop.io.compress.GzipCodec |gunzip</span><br><span class="line">17/01/04 18:05:36 INFO zlib.ZlibFactory: Successfully loaded &amp; initialized native-zlib library</span><br><span class="line">17/01/04 18:05:37 INFO compress.CodecPool: Got brand-new compressor [.gz]</span><br><span class="line">TestDDDDDDDDDDD</span><br></pre></td></tr></table></figure><h3 id="引申问题"><a href="#引申问题" class="headerlink" title="引申问题"></a>引申问题</h3><ul><li>HDFS块为什么设置128M？</li><li>namenode和datanode的区别？</li><li>namenode的HA方式？</li><li>Hadoop如何动态增加DataNode节点？</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL Group Replication</title>
      <link href="/2016-12-22-mysql-group-replication/"/>
      <url>/2016-12-22-mysql-group-replication/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>2016年12月12日 MySQL5.7的Group Replication功能GA啦，一时间在微博、微信都有很多提起，主要看了如下一些分享：</p><ul><li>MySQL开发组的宋利兵分享的<a href="http://mp.weixin.qq.com/s/XEDaOISD3wl7-pPc7mKbPg" target="_blank" rel="external">High Aavialability with Group Replication</a></li><li>云和恩墨团队以前同事分享的<a href="http://mp.weixin.qq.com/s/vMR_Jpf2TmmEVM7kg1eQ1Q" target="_blank" rel="external">GR的基础知识</a></li></ul><p>本文主要是基于MySQL5.7.17版本，参照MySQL5.7手册<a href="http://dev.mysql.com/doc/refman/5.7/en/group-replication.html" target="_blank" rel="external">Group Replication</a>部分进行实践。</p><a id="more"></a><h2 id="2-Group-Replication配置"><a href="#2-Group-Replication配置" class="headerlink" title="2.Group Replication配置"></a>2.Group Replication配置</h2><h3 id="2-1-编译MySQL5-7-17"><a href="#2-1-编译MySQL5-7-17" class="headerlink" title="2.1 编译MySQL5.7.17"></a>2.1 编译MySQL5.7.17</h3><ul><li><p>下载带有boost库版本的源码</p></li><li><p>cmake编译</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/guosong/mysql5717 \</span><br><span class="line">-DEXTRA_CHARSETS=all  -DDEFAULT_CHARSET=utf8   \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci -DDOWNLOAD_BOOST=0 \</span><br><span class="line">-DWITH_BOOST=./boost/boost_1_59_0/</span><br></pre></td></tr></table></figure><ul><li>make &amp;&amp; make install</li><li>创建etc、tmp、log目录放置配置文件、日志文件以及socket等文件</li><li>初始化DB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysql_install_db --defaults-file=./etc/my5717.cnf --datadir=./data --lc-messages-dir=./share/</span><br></pre></td></tr></table></figure><h3 id="2-2-Group-Replication"><a href="#2-2-Group-Replication" class="headerlink" title="2.2 Group Replication"></a>2.2 Group Replication</h3><ul><li>基本配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server_id=XXX</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">log_bin=binlog</span><br><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure><ul><li>Group Replication配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transaction_write_set_extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address= "10.30.6.217:5718"</span><br><span class="line">loose-group_replication_group_seeds= "10.30.6.217:5718,10.30.6.184:5718,10.30.6.183:5718"</span><br><span class="line">loose-group_replication_bootstrap_group= off</span><br></pre></td></tr></table></figure><p>&gt;<br>Line1 表示服务器记录每个事务基于XXHASH64算法对应的hahs值<br>Line2 表示 group 名称<br>Line3 表示插件在server启动后是否自动启动，此处设置不启动<br>Line4 表示插件使用的IP地址10.30.6.217，端口5718为和其他成员连接使用，此处设置MySQL端口加1的<br>Line5 表示组内成员所有的连接地址<br>Line6 表示是否启动bootstrap</p><ul><li>启动插件以及设置用户权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSTALL</span> <span class="keyword">PLUGIN</span> group_replication <span class="keyword">SONAME</span> <span class="string">'group_replication.so'</span>;</span><br><span class="line">mysql&gt; show plugins ;</span><br><span class="line">+<span class="comment">----------------------------+----------+--------------------+----------------------+---------+</span></span><br><span class="line">| Name                       | Status   | Type               | Library              | License |</span><br><span class="line">+<span class="comment">----------------------------+----------+--------------------+----------------------+---------+</span></span><br><span class="line">| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL                 | GPL     |</span><br><span class="line">| group_replication          | ACTIVE   | GROUP REPLICATION  | group_replication.so | GPL     |</span><br><span class="line">+<span class="comment">----------------------------+----------+--------------------+----------------------+---------+</span></span><br><span class="line"></span><br><span class="line">mysql&gt; show grants for 'replica'@'%';</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------+</span></span><br><span class="line">| Grants for replica@%                                                |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------+</span></span><br><span class="line">| <span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'replica'</span>@<span class="string">'%'</span> |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>启动Group Replication</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">MASTER</span> <span class="keyword">TO</span> MASTER_USER=<span class="string">'rpl_user'</span>, MASTER_PASSWORD=<span class="string">'rpl_pass'</span> \\</span><br><span class="line"><span class="keyword">FOR</span> CHANNEL <span class="string">'group_replication_recovery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_bootstrap_group=<span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">START</span> GROUP_REPLICATION;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_bootstrap_group=<span class="keyword">OFF</span>;</span><br></pre></td></tr></table></figure><p><strong>在三台server进行相关设置，全部开启Group_replication</strong></p><ul><li>状态校验</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.replication_group_members;</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------------+---------------+-------------+--------------+</span></span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST   | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------------+---------------+-------------+--------------+</span></span><br><span class="line">| group_replication_applier | 2a22f682-c378-11e6-bb00-0277185a730c | service-test2 |        5717 | ONLINE       |</span><br><span class="line">| group_replication_applier | 2bc442e4-c2b9-11e6-8c5b-02b39697b809 | service-test1 |        5717 | ONLINE       |</span><br><span class="line">| group_replication_applier | 3010a1a8-c378-11e6-b610-02870604bd20 | service-test3 |        5717 | ONLINE       |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------------+---------------+-------------+--------------+</span></span><br></pre></td></tr></table></figure><ul><li>写入数据测试</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into t1 values(3,'Test');</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+<span class="comment">----+---------+</span></span><br><span class="line">| c1 | c2      |</span><br><span class="line">+<span class="comment">----+---------+</span></span><br><span class="line">|  1 | Luis    |</span><br><span class="line">|  2 | Guosong |</span><br><span class="line">|  3 | Test    |</span><br><span class="line">+<span class="comment">----+---------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">binlog</span> <span class="keyword">events</span> <span class="keyword">in</span> <span class="string">'mysql-bin.000004'</span>;</span><br><span class="line">+<span class="comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------------+</span></span><br><span class="line">| Log_name         | Pos  | Event_type     | Server_id | End_log_pos | Info                                                                    |</span><br><span class="line">+<span class="comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------------+</span></span><br><span class="line">| mysql-bin.000004 |    4 | Format_desc    |  19795717 |         123 | Server ver: 5.7.17-log, Binlog ver: 4                                   |</span><br><span class="line">| mysql-bin.000004 |  123 | Previous_gtids |  19795717 |         150 |                                                                         |</span><br><span class="line">| mysql-bin.000004 |  150 | Gtid           |  19795717 |         211 | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">211</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |         <span class="number">270</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">270</span> | View_change    |  <span class="number">19795717</span> |         <span class="number">409</span> | view_id=<span class="number">14823763458501488</span>:<span class="number">1</span>                                             |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">409</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |         <span class="number">474</span> | <span class="keyword">COMMIT</span>                                                                  |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">474</span> | Gtid           |  <span class="number">19795717</span> |         <span class="number">535</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">535</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |         <span class="number">625</span> | <span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>                                                    |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">625</span> | Gtid           |  <span class="number">19795717</span> |         <span class="number">686</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">686</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |         <span class="number">809</span> | <span class="keyword">use</span> <span class="string">`test`</span>; <span class="keyword">create</span> <span class="keyword">table</span> t1(c1 <span class="built_in">int</span> primary <span class="keyword">key</span>, c2 <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>)       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">809</span> | Gtid           |  <span class="number">19795717</span> |         <span class="number">870</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">870</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |         <span class="number">938</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">938</span> | Table_map      |  <span class="number">19795717</span> |         <span class="number">981</span> | table_id: <span class="number">219</span> (test.t1)                                                 |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> |  <span class="number">981</span> | Write_rows     |  <span class="number">19795717</span> |        <span class="number">1023</span> | table_id: <span class="number">219</span> flags: STMT_END_F                                         |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1023</span> | Xid            |  <span class="number">19795717</span> |        <span class="number">1050</span> | <span class="keyword">COMMIT</span> <span class="comment">/* xid=31 */</span>                                                     |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1050</span> | Gtid           |  <span class="number">19795717</span> |        <span class="number">1111</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:5'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1111</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |        <span class="number">1170</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1170</span> | View_change    |  <span class="number">19795717</span> |        <span class="number">1349</span> | view_id=<span class="number">14823763458501488</span>:<span class="number">2</span>                                             |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1349</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |        <span class="number">1414</span> | <span class="keyword">COMMIT</span>                                                                  |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1414</span> | Gtid           |  <span class="number">19795717</span> |        <span class="number">1475</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:6'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1475</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |        <span class="number">1534</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1534</span> | View_change    |  <span class="number">19795717</span> |        <span class="number">1713</span> | view_id=<span class="number">14823763458501488</span>:<span class="number">3</span>                                             |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1713</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |        <span class="number">1778</span> | <span class="keyword">COMMIT</span>                                                                  |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1778</span> | Gtid           |  <span class="number">19815717</span> |        <span class="number">1839</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:7'</span>       |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1839</span> | <span class="keyword">Query</span>          |  <span class="number">19815717</span> |        <span class="number">1898</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1898</span> | Table_map      |  <span class="number">19815717</span> |        <span class="number">1941</span> | table_id: <span class="number">219</span> (test.t1)                                                 |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1941</span> | Write_rows     |  <span class="number">19815717</span> |        <span class="number">1986</span> | table_id: <span class="number">219</span> flags: STMT_END_F                                         |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">1986</span> | Xid            |  <span class="number">19815717</span> |        <span class="number">2013</span> | <span class="keyword">COMMIT</span> <span class="comment">/* xid=75 */</span>                                                     |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">2013</span> | Gtid           |  <span class="number">19795717</span> |        <span class="number">2074</span> | <span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1000006'</span> |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">2074</span> | <span class="keyword">Query</span>          |  <span class="number">19795717</span> |        <span class="number">2147</span> | <span class="keyword">BEGIN</span>                                                                   |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">2147</span> | Table_map      |  <span class="number">19795717</span> |        <span class="number">2190</span> | table_id: <span class="number">219</span> (test.t1)                                                 |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">2190</span> | Write_rows     |  <span class="number">19795717</span> |        <span class="number">2232</span> | table_id: <span class="number">219</span> flags: STMT_END_F                                         |</span><br><span class="line">| mysql-<span class="keyword">bin</span><span class="number">.000004</span> | <span class="number">2232</span> | Xid            |  <span class="number">19795717</span> |        <span class="number">2259</span> | <span class="keyword">COMMIT</span> <span class="comment">/* xid=93 */</span>                                                     |</span><br><span class="line">+<span class="comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数据冲突测试"><a href="#2-2-数据冲突测试" class="headerlink" title="2.2 数据冲突测试"></a>2.2 数据冲突测试</h3><p><img src="/images/group_replication_update.png" alt="group_replication_update"></p><p><strong>从这里可以在两个不同的member对同一行数据进行update操作时候，没有任何限制，结果到时节点数据存在不一致的问题。<br>具体配置错误的地方还在找，进一步研究。</strong></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Inception源码修改阅读</title>
      <link href="/2016-11-03-inceptionyuan-ma-xiu-gai-yue-du/"/>
      <url>/2016-11-03-inceptionyuan-ma-xiu-gai-yue-du/</url>
      <content type="html"><![CDATA[<h2 id="Inception介绍"><a href="#Inception介绍" class="headerlink" title="Inception介绍"></a>Inception介绍</h2><p>去哪儿开源的<a href="https://github.com/mysql-inception/inception" target="_blank" rel="external">Inception</a>是一个集审核、执行、<br>备份以及生成回滚语句集一身的MySQL自动化运维工具，<br>其是基于MySQL5.6.10版本进行修改的。本博文主要研究其修改以及增加的相关代码。</p><h2 id="增加Inception关键字相关命令"><a href="#增加Inception关键字相关命令" class="headerlink" title="增加Inception关键字相关命令"></a>增加Inception关键字相关命令</h2><h3 id="修改lex-h增加INCEPTION关键字"><a href="#修改lex-h增加INCEPTION关键字" class="headerlink" title="修改lex.h增加INCEPTION关键字"></a>修改lex.h增加INCEPTION关键字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> SYMBOL symbols[] = &#123;</span><br><span class="line">...</span><br><span class="line">  &#123; <span class="string">"INCEPTION"</span>,        SYM(INCEPTION_SYM)&#125;,</span><br><span class="line">  &#123; <span class="string">"INCEPTION_MAGIC_START"</span>,            SYM(INCEPTION_START_SYM)&#125;,</span><br><span class="line">  &#123; <span class="string">"INCEPTION_MAGIC_COMMIT"</span>,            SYM(INCEPTION_COMMIT_SYM)&#125;,</span><br><span class="line">...</span><br><span class="line">  &#123; <span class="string">"OSC_PERCENT"</span>,      SYM(OSC_PERCENT_SYM)&#125;,</span><br><span class="line">  &#123; <span class="string">"OSC"</span>,      SYM(OSC_SYM)&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="INCEPTION"><a href="#INCEPTION" class="headerlink" title="INCEPTION"></a>INCEPTION</h4><ul><li>INCEPTION 表示以inception开头相关的命令</li><li>INCEPTION_MAGIC_START，类似begin</li><li>INCEPTION_MAGIC_COMMIT，类似commit</li></ul><p>以下是相关的SQL举例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inception_magic_start;</span><br><span class="line"><span class="keyword">use</span> &lt;<span class="keyword">database</span> <span class="keyword">name</span>&gt;;</span><br><span class="line">&lt;any SQL statement&gt;</span><br><span class="line">inception_magic_commit;</span><br><span class="line"></span><br><span class="line">inception <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">inception <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"%read_only%"</span>;</span><br></pre></td></tr></table></figure></p><h4 id="OSC"><a href="#OSC" class="headerlink" title="OSC"></a>OSC</h4><p>Inception集中OSC</p><ul><li>OSC_PERCENT，查询osc进度相关</li><li>OSC 执行和osc相关的操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inception get osc_percent &apos;当前执行的SQL语句以及一些基本信息生成的SHA1哈希值&apos;</span><br><span class="line">inception get osc processlist;</span><br></pre></td></tr></table></figure><h3 id="在sql-lex-h中增加Inception相关"><a href="#在sql-lex-h中增加Inception相关" class="headerlink" title="在sql_lex.h中增加Inception相关"></a>在sql_lex.h中增加Inception相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*引入symbol头文件*/</span><br><span class="line">#include &quot;lex_symbol.h&quot;</span><br><span class="line"></span><br><span class="line">/*增加Inception命令类型*/</span><br><span class="line">uint inception_cmd_type;</span><br><span class="line"></span><br><span class="line">/*增加新函数*/</span><br><span class="line">SYMBOL *get_hash_symbol(const char *s, unsigned int len,bool function);</span><br></pre></td></tr></table></figure><h3 id="修改sql-cmd-h增加新的SQL-COMMAND"><a href="#修改sql-cmd-h增加新的SQL-COMMAND" class="headerlink" title="修改sql_cmd.h增加新的SQL_COMMAND"></a>修改sql_cmd.h增加新的SQL_COMMAND</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> enum_sql_command &#123;</span><br><span class="line">...</span><br><span class="line">SQLCOM_INCEPTION_START, SQLCOM_INCEPTION_COMMIT,</span><br><span class="line">SQLCOM_INCEPTION,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改sql-yacc-yy添加相关token"><a href="#修改sql-yacc-yy添加相关token" class="headerlink" title="修改sql_yacc.yy添加相关token"></a>修改sql_yacc.yy添加相关token</h3><p>sql_yacc.yy中主要修改部分如下:</p><ul><li>添加inception相关token</li><li>注释掉和replication相关、spatial index相关</li><li>注释掉prepare预编译相关</li><li>增加inception相关语法逻辑</li></ul><h4 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%token  INCEPTION_START_SYM           <span class="comment">/* SQL-2003-R */</span></span><br><span class="line">%token  INCEPTION_COMMIT_SYM          <span class="comment">/* SQL-2003-R */</span></span><br><span class="line">%token  INCEPTION_SYM</span><br><span class="line">...</span><br><span class="line">%token  OSC_PERCENT_SYM</span><br><span class="line">%token  OSC_SYM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%type &lt;lex_str&gt;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* 增加opt_variables_name */</span></span><br><span class="line">    opt_constraint constraint opt_ident opt_variables_name</span><br><span class="line">%type &lt;item&gt;</span><br><span class="line">    ...</span><br><span class="line">    update_set_expr_or_default update_set_expr</span><br><span class="line"></span><br><span class="line">%type &lt;NONE&gt; </span><br><span class="line">...</span><br><span class="line">inception_magic_start inception_magic_commit </span><br><span class="line">begin commit rollback savepoint release inception</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="解析INCEPTION-相关命令"><a href="#解析INCEPTION-相关命令" class="headerlink" title="解析INCEPTION_相关命令"></a>解析INCEPTION_相关命令</h4><h4 id="Inception相关命令SQL举例"><a href="#Inception相关命令SQL举例" class="headerlink" title="Inception相关命令SQL举例"></a>Inception相关命令SQL举例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inception_magic_start</span><br><span class="line">inception_magic_commit</span><br><span class="line">inception get variables;</span><br><span class="line">inception get variables 'variable_name';</span><br><span class="line">inception <span class="keyword">set</span> [<span class="keyword">session</span>] variables_name=<span class="keyword">value</span>;</span><br><span class="line">inception get osc_percent '当前执行的SQL语句以及一些基本信息生成的SHA1哈希值';</span><br><span class="line">inception get processlist;</span><br></pre></td></tr></table></figure><h4 id="Inception相关SQL逻辑"><a href="#Inception相关SQL逻辑" class="headerlink" title="Inception相关SQL逻辑"></a>Inception相关SQL逻辑</h4><ul><li>inception_magic_start</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">verb_clause:</span><br><span class="line">          statement</span><br><span class="line">        | begin</span><br><span class="line">        | inception_magic_start</span><br><span class="line">        ;</span><br></pre></td></tr></table></figure><ul><li>inception_magic_commit 和inception</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* Verb clauses, except begin */</span><br><span class="line">statement:</span><br><span class="line">          alter</span><br><span class="line">        | analyze</span><br><span class="line">        | binlog_base64_event</span><br><span class="line">        | call</span><br><span class="line">        | change</span><br><span class="line">        | check</span><br><span class="line">        | checksum</span><br><span class="line">        | commit</span><br><span class="line">        | inception_magic_commit</span><br><span class="line">        ...</span><br><span class="line">        | inception</span><br><span class="line">        ;</span><br></pre></td></tr></table></figure><ul><li>opt_variables_name Inception参数相关<h3 id="完成修改无需用户名和密码登陆的认证"><a href="#完成修改无需用户名和密码登陆的认证" class="headerlink" title="完成修改无需用户名和密码登陆的认证"></a>完成修改无需用户名和密码登陆的认证</h3></li></ul><h4 id="修改文件sql-sql-acl-cc-acl-authenticate"><a href="#修改文件sql-sql-acl-cc-acl-authenticate" class="headerlink" title="修改文件sql/sql_acl.cc:acl_authenticate"></a>修改文件sql/sql_acl.cc:acl_authenticate</h4><p><img src="/images/inception/acl_authenticate.png" alt="acl_authenticate"></p><h2 id="源码文件变动"><a href="#源码文件变动" class="headerlink" title="源码文件变动"></a>源码文件变动</h2><h3 id="比较sql目录下各个文件"><a href="#比较sql目录下各个文件" class="headerlink" title="比较sql目录下各个文件"></a>比较sql目录下各个文件</h3><p>存在如下129个文件有修改变动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">binlog.cc</span><br><span class="line">CMakeLists.txt</span><br><span class="line">derror.cc</span><br><span class="line">derror.h</span><br><span class="line">event_data_objects.cc</span><br><span class="line">event_db_repository.cc</span><br><span class="line">events.cc</span><br><span class="line">field.cc</span><br><span class="line">field.h</span><br><span class="line">filesort.cc</span><br><span class="line">gen_lex_hash.cc</span><br><span class="line">handler.cc</span><br><span class="line">hostname.cc</span><br><span class="line">item.cc</span><br><span class="line">item_cmpfunc.cc</span><br><span class="line">item_create.cc</span><br><span class="line">item_func.cc</span><br><span class="line">item.h</span><br><span class="line">item_strfunc.cc</span><br><span class="line">item_strfunc.h</span><br><span class="line">item_subselect.cc</span><br><span class="line">item_subselect.h</span><br><span class="line">item_sum.cc</span><br><span class="line">lex.h</span><br><span class="line">lock.cc</span><br><span class="line">log.cc</span><br><span class="line">log_event.cc</span><br><span class="line">log_event.h</span><br><span class="line">log_event_old.cc</span><br><span class="line">mf_iocache.cc</span><br><span class="line">mysqld.cc</span><br><span class="line">mysqld.h</span><br><span class="line">net_serv.cc</span><br><span class="line">opt_range.cc</span><br><span class="line">opt_range.h</span><br><span class="line">opt_trace2server.cc</span><br><span class="line">opt_trace.h</span><br><span class="line">partition_info.cc</span><br><span class="line">protocol.cc</span><br><span class="line">rpl_gtid_execution.cc</span><br><span class="line">rpl_gtid_mutex_cond_array.cc</span><br><span class="line">rpl_gtid_state.cc</span><br><span class="line">rpl_info_factory.cc</span><br><span class="line">rpl_info_factory.h</span><br><span class="line">rpl_injector.cc</span><br><span class="line">rpl_master.cc</span><br><span class="line">rpl_mi.cc</span><br><span class="line">rpl_mi.h</span><br><span class="line">rpl_rli.cc</span><br><span class="line">rpl_rli.h</span><br><span class="line">rpl_rli_pdb.cc</span><br><span class="line">rpl_slave.cc</span><br><span class="line">rpl_slave.h</span><br><span class="line">rpl_utility.cc</span><br><span class="line">rpl_utility.h</span><br><span class="line">set_var.cc</span><br><span class="line">set_var.h</span><br><span class="line">signal_handler.cc</span><br><span class="line">sp.cc</span><br><span class="line">sp_head.cc</span><br><span class="line">sp_instr.cc</span><br><span class="line">sp_rcontext.cc</span><br><span class="line">sql_acl.cc</span><br><span class="line">sql_acl.h</span><br><span class="line">sql_admin.cc</span><br><span class="line">sql_alter.cc</span><br><span class="line">sql_alter.h</span><br><span class="line">sql_analyse.cc</span><br><span class="line">sql_audit.h</span><br><span class="line">sql_base.cc</span><br><span class="line">sql_base.h</span><br><span class="line">sql_builtin.cc.in</span><br><span class="line">sql_cache.cc</span><br><span class="line">sql_class.cc</span><br><span class="line">sql_class.h</span><br><span class="line">sql_cmd.h</span><br><span class="line">sql_connect.cc</span><br><span class="line">sql_const.h</span><br><span class="line">sql_cursor.cc</span><br><span class="line">sql_db.cc</span><br><span class="line">sql_delete.cc</span><br><span class="line">sql_derived.cc</span><br><span class="line">sql_do.cc</span><br><span class="line">sql_error.h</span><br><span class="line">sql_executor.cc</span><br><span class="line">sql_handler.cc</span><br><span class="line">sql_help.cc</span><br><span class="line">sql_insert.cc</span><br><span class="line">sql_lex.cc</span><br><span class="line">sql_lex.h</span><br><span class="line">sql_load.cc</span><br><span class="line">sql_locale.cc</span><br><span class="line">sql_parse.cc</span><br><span class="line">sql_parse.h</span><br><span class="line">sql_partition_admin.cc</span><br><span class="line">sql_partition.cc</span><br><span class="line">sql_planner.cc</span><br><span class="line">sql_plugin.cc</span><br><span class="line">sql_prepare.cc</span><br><span class="line">sql_profile.cc</span><br><span class="line">sql_reload.cc</span><br><span class="line">sql_rename.cc</span><br><span class="line">sql_resolver.cc</span><br><span class="line">sql_rewrite.cc</span><br><span class="line">sql_select.cc</span><br><span class="line">sql_select.h</span><br><span class="line">sql_servers.h</span><br><span class="line">sql_show.cc</span><br><span class="line">sql_show.h</span><br><span class="line">sql_string.h</span><br><span class="line">sql_table.cc</span><br><span class="line">sql_tmp_table.cc</span><br><span class="line">sql_tmp_table.h</span><br><span class="line">sql_trigger.cc</span><br><span class="line">sql_truncate.cc</span><br><span class="line">sql_union.cc</span><br><span class="line">sql_update.cc</span><br><span class="line">sql_view.cc</span><br><span class="line">sql_yacc.cc</span><br><span class="line">sql_yacc.h</span><br><span class="line">sql_yacc.yy</span><br><span class="line">sys_vars.cc</span><br><span class="line">sys_vars.h</span><br><span class="line">table_cache.cc</span><br><span class="line">table.cc</span><br><span class="line">table.h</span><br><span class="line">transaction.cc</span><br><span class="line">unireg.cc</span><br><span class="line">unireg.h</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql添加新的操作命令</title>
      <link href="/2016-10-26-mysqltian-jia-xin-de-cao-zuo-ming-ling/"/>
      <url>/2016-10-26-mysqltian-jia-xin-de-cao-zuo-ming-ling/</url>
      <content type="html"><![CDATA[<h2 id="添加新的SQL命令（以SHOW-DISK-USAGE为例）"><a href="#添加新的SQL命令（以SHOW-DISK-USAGE为例）" class="headerlink" title="添加新的SQL命令（以SHOW DISK_USAGE为例）"></a>添加新的SQL命令（以SHOW DISK_USAGE为例）</h2><h3 id="修改lex-h添加相关Token"><a href="#修改lex-h添加相关Token" class="headerlink" title="修改lex.h添加相关Token"></a>修改lex.h添加相关Token</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> SYMBOL symbols[] = &#123;</span><br><span class="line">...</span><br><span class="line">&#123; <span class="string">"DISK"</span>,     SYM(DISK_SYM)&#125;,</span><br><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/* Reason for Modification: */</span></span><br><span class="line"><span class="comment">/* Tokens for the SHOW DISK_USAGE command*/</span></span><br><span class="line">&#123;<span class="string">"DISK_USAGE"</span>, SYM(DISK_USAGE_SYM)&#125;,</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br><span class="line">&#123; <span class="string">"DISTINCT"</span>,     SYM(DISTINCT)&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="修改sql-lex-h添加相关新命令"><a href="#修改sql-lex-h添加相关新命令" class="headerlink" title="修改sql_lex.h添加相关新命令"></a>修改sql_lex.h添加相关新命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> enum_sql_command &#123;</span><br><span class="line">...</span><br><span class="line">SQLCOM_SHOW_TRIGGERS,</span><br><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION: */</span></span><br><span class="line"><span class="comment">/*Reason for this modification: */</span></span><br><span class="line"><span class="comment">/*Add SQLCOM_SHOW_DISK_USAGE reference*/</span></span><br><span class="line">SQLCOM_SHOW_DISK_USAGE,</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在MySQL5.6.27版本修改sql_cmd.h文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> enum_sql_command &#123;</span><br><span class="line">....</span><br><span class="line">  SQLCOM_SHOW_TRIGGERS,</span><br><span class="line">  <span class="comment">/*BEGIN GUOSONG MODIFICATION: */</span></span><br><span class="line">  <span class="comment">/*Reason for this modification: */</span></span><br><span class="line">  <span class="comment">/*Add SQLCOM_SHOW_DISK_USAGE reference*/</span></span><br><span class="line">  SQLCOM_SHOW_DISK_USAGE,</span><br><span class="line">  <span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><h3 id="修改sql-yacc-yy添加相关token"><a href="#修改sql-yacc-yy添加相关token" class="headerlink" title="修改sql_yacc.yy添加相关token"></a>修改sql_yacc.yy添加相关token</h3><p><strong>添加token</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%token  DISK_SYM</span><br><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reasion for this modification:/*</span></span><br><span class="line"><span class="comment">/*Add DISK_USAGE_SYM */</span></span><br><span class="line">%token DISK_USAGE_SYM</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br><span class="line">%token  DISTINCT                      <span class="comment">/* SQL-2003-R */</span></span><br></pre></td></tr></table></figure><p><strong>解析SHOW DISK_USAGE命令</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">show:</span><br><span class="line">    SHOW</span><br><span class="line">    &#123;</span><br><span class="line">      LEX *lex=Lex;</span><br><span class="line">      lex-&gt;wild=<span class="number">0</span>;</span><br><span class="line">      lex-&gt;lock_option= TL_READ;</span><br><span class="line">      mysql_init_select(lex);</span><br><span class="line">      lex-&gt;current_select-&gt;parsing_place= SELECT_LIST;</span><br><span class="line">      bzero((<span class="keyword">char</span>*) &amp;lex-&gt;create_info,<span class="keyword">sizeof</span>(lex-&gt;create_info));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">show_param:</span><br><span class="line">        <span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line">        <span class="comment">/*Reasion for this modification:*/</span></span><br><span class="line">        <span class="comment">/*Add DISK_USAGE_SYM */</span></span><br><span class="line">    ¦   ¦ DISK_USAGE_SYM</span><br><span class="line">          &#123;</span><br><span class="line">            LEX *lex = Lex;</span><br><span class="line">            lex-&gt;sql_command = SQLCOM_SHOW_DISK_USAGE;</span><br><span class="line">          &#125;     </span><br><span class="line">    ¦   |  DATABASES wild_and_where</span><br><span class="line">        <span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><p><strong>注意是在show databases 前面添加，故在DATABASES前面需要添加|这个竖线</strong></p><h3 id="添加SHOW-DISK-USAGE命令的case"><a href="#添加SHOW-DISK-USAGE命令的case" class="headerlink" title="添加SHOW DISK_USAGE命令的case"></a>添加SHOW DISK_USAGE命令的case</h3><p>在sql/sql_parser.cc文件中ysql_execute_command函数中添加<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SQLCOM_SHOW_AUTHORS:</span><br><span class="line">res= mysqld_show_authors(thd);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for this modification*/</span></span><br><span class="line"><span class="comment">/*Add SQLCOM_SHOW_DISK_USAGE case statement*/</span></span><br><span class="line"><span class="keyword">case</span> SQLCOM_SHOW_DISK_USAGE:</span><br><span class="line">&#123;</span><br><span class="line">res = mysqld_show_disk_usage(thd);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure></p><p>添加函数声明，目前修改sql_show.h文件添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for Modification*/</span></span><br><span class="line"><span class="comment">/*Declared mysqld_show_disk_usage function*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mysqld_show_disk_usage</span><span class="params">(THD *thd)</span></span>;</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><h3 id="在sql-show-cc中添加mysqld-show-disk-usage"><a href="#在sql-show-cc中添加mysqld-show-disk-usage" class="headerlink" title="在sql_show.cc中添加mysqld_show_disk_usage"></a>在sql_show.cc中添加mysqld_show_disk_usage</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for Modification*/</span></span><br><span class="line"><span class="comment">/*Add show disk uage method*/</span></span><br><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">**List all database disk usage</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mysqld_show_disk_usage</span><span class="params">(THD *thd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;Item&gt; field_list;</span><br><span class="line">    Protocol *protocol = thd-&gt;protocol;</span><br><span class="line">    DBUG_ENTER(<span class="string">"mysqld_show_disk_usage"</span>);</span><br><span class="line">    field_list.push_back(<span class="keyword">new</span> Item_empty_string(<span class="string">"Database"</span>,<span class="number">50</span>));</span><br><span class="line">    field_list.push_back(<span class="keyword">new</span> Item_empty_string(<span class="string">"Size_in_bytes"</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">if</span>(protocol-&gt;send_fields(&amp;field_list,</span><br><span class="line">            Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line">    <span class="comment">/*sending test data*/</span></span><br><span class="line">    protocol-&gt;prepare_for_resend();</span><br><span class="line">    protocol-&gt;store(<span class="string">"test_row"</span>, system_charset_info);</span><br><span class="line">    protocol-&gt;store(<span class="string">"1024"</span>, system_charset_info);</span><br><span class="line">    <span class="keyword">if</span>(protocol-&gt;write())</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line">    my_eof(thd);</span><br><span class="line">    DBUG_RETURN(FALSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*END GUSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><p>在MySQL5.6.27中有些不同:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for Modification*/</span></span><br><span class="line"><span class="comment">/*Add show disk uage method*/</span></span><br><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">**List all database disk usage</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mysqld_show_disk_usage</span><span class="params">(THD *thd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;Item&gt; field_list;</span><br><span class="line">    Protocol *protocol = thd-&gt;protocol;</span><br><span class="line">    DBUG_ENTER(<span class="string">"mysqld_show_disk_usage"</span>);</span><br><span class="line">    field_list.push_back(<span class="keyword">new</span> Item_empty_string(<span class="string">"Database"</span>,<span class="number">50</span>));</span><br><span class="line">    field_list.push_back(<span class="keyword">new</span> Item_empty_string(<span class="string">"Size_in_bytes"</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">if</span>(protocol-&gt;send_result_set_metadata(&amp;field_list,</span><br><span class="line">            Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line">    <span class="comment">/*sending test data*/</span></span><br><span class="line">    protocol-&gt;prepare_for_resend();</span><br><span class="line">    protocol-&gt;store(<span class="string">"test_row"</span>, <span class="built_in">strlen</span>(<span class="string">"test_row"</span>),system_charset_info);</span><br><span class="line">    protocol-&gt;store(<span class="string">"1024"</span>, <span class="built_in">strlen</span>(<span class="string">"1024"</span>), system_charset_info);</span><br><span class="line">    <span class="keyword">if</span>(protocol-&gt;write())</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line">    my_eof(thd);</span><br><span class="line">    DBUG_RETURN(FALSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*END GUSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><h3 id="通过bison以及gen-lex-hash生成相关语法"><a href="#通过bison以及gen-lex-hash生成相关语法" class="headerlink" title="通过bison以及gen_lex_hash生成相关语法"></a>通过bison以及gen_lex_hash生成相关语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bison -y -p MYSQL -d sql_yacc.yy</span><br><span class="line">[guosong@dev-00 11:18:52 sql]$ll y.tab.</span><br><span class="line">y.tab.c  y.tab.h</span><br></pre></td></tr></table></figure><p>使用y.tab.c和y.tab.h替换sql_yacc.cc和sql_yacc.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv y.tab.c sql_yacc.cc</span><br><span class="line">mv y.tab.h sql_yacc.h</span><br></pre></td></tr></table></figure><p>通过gen_lex_hash命令生成新的lex_hash.h文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 在源码的sql目录下</span><br><span class="line">./gen_lex_hash &gt; lex_hash.h</span><br></pre></td></tr></table></figure><h3 id="make-install遇到错误"><a href="#make-install遇到错误" class="headerlink" title="make install遇到错误"></a>make install遇到错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">../include/my_global.h:482:53: error: size of array ‘compile_time_assert’ is negative</span><br><span class="line">__attribute__ ((unused));</span><br></pre></td></tr></table></figure><p>修改mysqld.cc文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for Modification*/</span></span><br><span class="line"><span class="comment">/*Solve make error*/</span></span><br><span class="line">compile_time_assert(<span class="keyword">sizeof</span>(com_status_vars)/<span class="keyword">sizeof</span>(com_status_vars[<span class="number">0</span>]) - <span class="number">1</span> ==</span><br><span class="line">¦   ¦   ¦   ¦   ¦SQLCOM_END + <span class="number">8</span><span class="number">-1</span>);</span><br><span class="line"><span class="comment">/*END GUOSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[guosong@dev-00 18:40:48 mysql5627]$mysql5627</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.6.27-debug-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| version()        |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| 5.6.27-debug-log |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> disk_usage;</span><br><span class="line">+<span class="comment">----------+---------------+</span></span><br><span class="line">| Database | Size_in_bytes |</span><br><span class="line">+<span class="comment">----------+---------------+</span></span><br><span class="line">| test_row | 1024          |</span><br><span class="line">+<span class="comment">----------+---------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="增加统计数据库文件大小的真实统计代码"><a href="#增加统计数据库文件大小的真实统计代码" class="headerlink" title="增加统计数据库文件大小的真实统计代码"></a>增加统计数据库文件大小的真实统计代码</h3><h4 id="真实统计代码"><a href="#真实统计代码" class="headerlink" title="真实统计代码"></a>真实统计代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*BEGIN GUOSONG MODIFICATION*/</span></span><br><span class="line"><span class="comment">/*Reason for Modification*/</span></span><br><span class="line"><span class="comment">/*Add show disk uage method*/</span></span><br><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment">**List all database disk usage</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mysqld_show_disk_usage</span><span class="params">(THD *thd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;Item&gt; field_list;</span><br><span class="line">    List&lt;LEX_STRING&gt; dbs;</span><br><span class="line">    LEX_STRING *db_name;</span><br><span class="line">    <span class="keyword">char</span> *path;</span><br><span class="line">    MY_DIR *dirp;</span><br><span class="line">    FILEINFO *file;</span><br><span class="line">    longlong fsizes = <span class="number">0</span>;</span><br><span class="line">    longlong total_sizes = <span class="number">0</span>;</span><br><span class="line">    longlong lsizes = <span class="number">0</span>;</span><br><span class="line">Protocol *protocol = thd-&gt;protocol;</span><br><span class="line">DBUG_ENTER(<span class="string">"mysqld_show_disk_usage"</span>);</span><br><span class="line">field_list.push_back(<span class="keyword">new</span> Item_empty_string(<span class="string">"Database"</span>,<span class="number">50</span>));</span><br><span class="line">field_list.push_back(<span class="keyword">new</span> Item_return_int(<span class="string">"Size_in_bytes"</span>, <span class="number">7</span>,</span><br><span class="line">                MYSQL_TYPE_LONGLONG));</span><br><span class="line"><span class="keyword">if</span>(protocol-&gt;send_result_set_metadata(&amp;field_list,</span><br><span class="line">Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))</span><br><span class="line">DBUG_RETURN(TRUE);</span><br><span class="line">    <span class="comment">/* get database directories*/</span></span><br><span class="line">    find_files_result res = find_files(thd, &amp;dbs, <span class="literal">NULL</span>,mysql_data_home, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (res != FIND_FILES_OK)</span><br><span class="line">        DBUG_RETURN(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    List_iterator_fast&lt;LEX_STRING&gt; it_dbs(dbs);</span><br><span class="line">    path = (<span class="keyword">char</span>*)my_malloc(PATH_MAX, MYF(MY_ZEROFILL));</span><br><span class="line">    dirp = my_dir(mysql_data_home, MYF(MY_WANT_STAT));</span><br><span class="line">    fsizes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; (<span class="keyword">int</span>)dirp-&gt;number_off_files;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        file = dirp-&gt;dir_entry + i;</span><br><span class="line">        <span class="keyword">if</span> (strncasecmp(file-&gt;name, <span class="string">"ibdata"</span>, <span class="number">6</span>) == <span class="number">0</span>)</span><br><span class="line">            fsizes = fsizes + file-&gt;mystat-&gt;st_size;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strncasecmp(file-&gt;name, <span class="string">"ib"</span>, <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            lsizes = lsizes + file-&gt;mystat-&gt;st_size;</span><br><span class="line">    &#125;</span><br><span class="line">    total_sizes += fsizes;</span><br><span class="line">    total_sizes += lsizes;</span><br><span class="line">    <span class="comment">/* send Innodb data to client*/</span></span><br><span class="line">    protocol-&gt;prepare_for_resend();</span><br><span class="line">    protocol-&gt;store(<span class="string">"InnoDB TableSpace"</span>, system_charset_info);</span><br><span class="line">    protocol-&gt;store((longlong)fsizes);</span><br><span class="line">    <span class="keyword">if</span> (protocol-&gt;write())</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line"></span><br><span class="line">    protocol-&gt;prepare_for_resend();</span><br><span class="line">    protocol-&gt;store(<span class="string">"InnoDB logs"</span>, system_charset_info);</span><br><span class="line">    protocol-&gt;store((longlong)lsizes);</span><br><span class="line">    <span class="keyword">if</span> (protocol-&gt;write())</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*now send database name and sizes of the databases*/</span></span><br><span class="line">    <span class="keyword">while</span>((db_name = it_dbs++))</span><br><span class="line">    &#123;</span><br><span class="line">        fsizes = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(path, mysql_data_home);</span><br><span class="line">        <span class="built_in">strcat</span>(path, <span class="string">"/"</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(path, db_name-&gt;str);</span><br><span class="line">        dirp = my_dir(path, MYF(MY_WANT_STAT));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="keyword">int</span>)dirp-&gt;number_off_files;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            file = dirp-&gt;dir_entry + i;</span><br><span class="line">            fsizes = fsizes + file-&gt;mystat-&gt;st_size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protocol-&gt;prepare_for_resend();</span><br><span class="line">        protocol-&gt;store(db_name-&gt;str, system_charset_info);</span><br><span class="line">        protocol-&gt;store((longlong)fsizes);</span><br><span class="line">        <span class="keyword">if</span> (protocol-&gt;write())</span><br><span class="line">            DBUG_RETURN(TRUE);</span><br><span class="line">        total_sizes += fsizes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protocol-&gt;prepare_for_resend();</span><br><span class="line">    protocol-&gt;store(<span class="string">"TotalSize"</span>, system_charset_info);</span><br><span class="line">    protocol-&gt;store((longlong)total_sizes);</span><br><span class="line">    <span class="keyword">if</span> (protocol-&gt;write())</span><br><span class="line">        DBUG_RETURN(TRUE);</span><br><span class="line">my_eof(thd);</span><br><span class="line">    <span class="comment">/*free memory*/</span></span><br><span class="line">    my_free(path);</span><br><span class="line">    my_dirend(dirp);</span><br><span class="line">DBUG_RETURN(FALSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*END GUSONG MODIFICATION*/</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[guosong@dev-00 22:39:55 mysql5627]$mysql5627</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.6.27-debug-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> disk_usage;</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">| Database           | Size_in_bytes |</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">| InnoDB TableSpace  |     104857600 |</span><br><span class="line">| InnoDB logs        |    3145728000 |</span><br><span class="line">| mysql              |       1647392 |</span><br><span class="line">| orchestrator       |       6047749 |</span><br><span class="line">| performance_schema |        493639 |</span><br><span class="line">| test               |          8257 |</span><br><span class="line">| TotalSize          |    3258782637 |</span><br><span class="line">+<span class="comment">--------------------+---------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="其他版本测试"><a href="#其他版本测试" class="headerlink" title="其他版本测试"></a>其他版本测试</h2><ul><li><a href="https://github.com/dolphinsboy/mysql5.6.27" target="_blank" rel="external">添加自定义命令 show disk_usage 5.6.27版本</a></li><li><a href="https://github.com/dolphinsboy/mysql-5.1.45" target="_blank" rel="external">添加自定义命令 show disk_usage 5.1.45版本</a></li><li><a href="https://github.com/dolphinsboy/mysql-5.6.29" target="_blank" rel="external">添加新的引擎</a></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>innodb buffer dump and load</title>
      <link href="/2016-08-25-innodb-buffer-dump-and-load/"/>
      <url>/2016-08-25-innodb-buffer-dump-and-load/</url>
      <content type="html"><![CDATA[<h1 id="预热Innodb-Buffer-Pool"><a href="#预热Innodb-Buffer-Pool" class="headerlink" title="预热Innodb Buffer Pool"></a>预热Innodb Buffer Pool</h1><p>针对线上运行的MySQL Server，如果重启不设置预热的话直接提供服务，会产生很多Disk IO导致性能严重下降。</p><p>在MySQL5.6 版本之后引入Buffer Pool的dump以及load功能。</p><h2 id="Dump"><a href="#Dump" class="headerlink" title="Dump"></a>Dump</h2><p>扫描Buffer Pool将相关table_id以及page_id写入文件中(默认在data目录下ib_buffer_pool文件中)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_dump_at_shutdown = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ib_buffer_pool内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@service-test1 data]<span class="comment"># head -n 10 ib_buffer_pool</span></span><br><span class="line">92,17682</span><br><span class="line">92,131631</span><br><span class="line">92,61826</span><br><span class="line">92,65080</span><br><span class="line">92,111759</span><br><span class="line">92,114364</span><br><span class="line">92,96410</span><br><span class="line">92,131632</span><br><span class="line">92,94495</span><br><span class="line">92,131633</span><br></pre></td></tr></table></figure><h1 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h1><p>动态实现load</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_load_now=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016-08-25 16:23:06 7fdd367fc700 InnoDB: Loading buffer pool(s) from .//ib_buffer_pool</span><br><span class="line">2016-08-25 16:23:36 7fdd367fc700 InnoDB: Buffer pool(s) load completed at 160825 16:23:36</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like '%load%';</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------+</span></span><br><span class="line">| Variable_name                  | Value                    |</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------+</span></span><br><span class="line">| Innodb_buffer_pool_load_status | Loaded 16769/54873 pages |</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------+</span></span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like '%load%';</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------------------------------+</span></span><br><span class="line">| Variable_name                  | Value                                            |</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------------------------------+</span></span><br><span class="line">| Com_load                       | 0                                                |</span><br><span class="line">| Com_preload_keys               | 0                                                |</span><br><span class="line">| Innodb_buffer_pool_load_status | Buffer pool(s) <span class="keyword">load</span> completed <span class="keyword">at</span> <span class="number">160825</span> <span class="number">16</span>:<span class="number">23</span>:<span class="number">36</span> |</span><br><span class="line">+<span class="comment">--------------------------------+--------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>Load过程不影响启动，不是一定得load完成之后才响应相关请求。Load中如果发现对应的table_id以及page_id已经在buffer中，将直接跳过。</p><h1 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h1><ul><li><p><a href="https://blog.marceloaltmann.com/en-warm-up-innodb-buffer-pool-pt-esquentando-o-innodb-buffer-pool/" target="_blank" rel="external">https://blog.marceloaltmann.com/en-warm-up-innodb-buffer-pool-pt-esquentando-o-innodb-buffer-pool/</a></p></li><li><p><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-preload-buffer-pool.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/innodb-preload-buffer-pool.html</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>How to install Yii2</title>
      <link href="/2016-04-18-how-to-install-yii2/"/>
      <url>/2016-04-18-how-to-install-yii2/</url>
      <content type="html"><![CDATA[<h2 id="1-Install-From-Archived-File"><a href="#1-Install-From-Archived-File" class="headerlink" title="1. Install From Archived File"></a>1. Install From Archived File</h2><p>Edit file /var/www/basic/config/web.php, set cookieValidationKey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;cookieValidationKey&apos; =&gt; &apos;chuchujie&apos;</span><br></pre></td></tr></table></figure><h2 id="2-Call-to-undefined-function-mb-strlen"><a href="#2-Call-to-undefined-function-mb-strlen" class="headerlink" title="2. Call to undefined function mb_strlen"></a>2. Call to undefined function mb_strlen</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Call to undefined function mb_strlen()</span><br></pre></td></tr></table></figure><p>yum install php55-mbstring module.</p><p>Version is import.</p><h2 id="3-The-directory-is-not-writable-by-the-Web-process"><a href="#3-The-directory-is-not-writable-by-the-Web-process" class="headerlink" title="3. The directory is not writable by the Web process"></a>3. The directory is not writable by the Web process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ec2-user 13898  0.0  0.1 393312 20952 ?        S    19:47   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 13900  0.0  0.1 395592 22116 ?        S    19:47   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 13901  0.0  0.1 393048 20048 ?        S    19:47   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 13975  0.0  0.1 392024 19528 ?        S    19:47   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 14493  0.0  0.1 396096 23296 ?        S    19:48   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 14494  0.0  0.1 392024 19396 ?        S    19:48   0:00 /usr/sbin/httpd</span><br><span class="line">ec2-user 14495  0.0  0.0 389784 14824 ?        S    19:48   0:00 /usr/sbin/httpd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R ec2-user.ec2-user /var/www/basic</span><br></pre></td></tr></table></figure><p><a href="http://www.g-loaded.eu/2008/12/09/making-a-directory-writable-by-the-webserver/" target="_blank" rel="external">http://www.g-loaded.eu/2008/12/09/making-a-directory-writable-by-the-webserver/</a></p><h2 id="4-Class-‘PDO’-not-found"><a href="#4-Class-‘PDO’-not-found" class="headerlink" title="4. Class ‘PDO’ not found"></a>4. Class ‘PDO’ not found</h2><p>could not find driver Caused by: PDOException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install php55-pdo.x86_64 -y</span><br><span class="line">yum install php-ZendFramework-Db-Adapter-Pdo-Mysql.noarch -y</span><br></pre></td></tr></table></figure><h2 id="5-Yii2-Gii-Forbidden-code-403-You-are-not-allowed-to-access-this-page"><a href="#5-Yii2-Gii-Forbidden-code-403-You-are-not-allowed-to-access-this-page" class="headerlink" title="5. Yii2 Gii Forbidden code 403 You are not allowed to access this page"></a>5. Yii2 Gii Forbidden code 403 You are not allowed to access this page</h2><p>Edit config/web.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line"><span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line"><span class="string">'allowedIPs'</span> =&gt; [<span class="string">'127.0.0.1'</span>, <span class="string">'::1'</span>, <span class="string">'10.3xxxx'</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>Due to company vpn , choose the ip by Apache access log.</p><p><a href="http://jeepxiaozi.github.io/yii2xue-xi-bi-ji-xi-lie-6-generating-code-with-giishi-yong-giisheng-cheng-dai-ma.html" target="_blank" rel="external">http://jeepxiaozi.github.io/yii2xue-xi-bi-ji-xi-lie-6-generating-code-with-giishi-yong-giisheng-cheng-dai-ma.html</a></p><h2 id="6-Yii2-Programing-Style"><a href="#6-Yii2-Programing-Style" class="headerlink" title="6. Yii2 Programing Style"></a>6. Yii2 Programing Style</h2><p><a href="https://github.com/yii2-chinesization/yii2-zh-cn/blob/master/internals-zh-CN/core-code-style.md" target="_blank" rel="external">https://github.com/yii2-chinesization/yii2-zh-cn/blob/master/internals-zh-CN/core-code-style.md</a></p><h2 id="7-Reference"><a href="#7-Reference" class="headerlink" title="7. Reference"></a>7. Reference</h2><p><a href="https://github.com/forecho/awesome-yii2" target="_blank" rel="external">https://github.com/forecho/awesome-yii2</a></p><h2 id="8-Tree-Manager"><a href="#8-Tree-Manager" class="headerlink" title="8. Tree Manager"></a>8. Tree Manager</h2><p><a href="http://demos.krajee.com/tree-manager#comment-2288987974" target="_blank" rel="external">http://demos.krajee.com/tree-manager#comment-2288987974</a></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis info memory研究</title>
      <link href="/2016-04-15-redis-info-memoryyan-jiu/"/>
      <url>/2016-04-15-redis-info-memoryyan-jiu/</url>
      <content type="html"><![CDATA[<h2 id="info-memory输出信息"><a href="#info-memory输出信息" class="headerlink" title="info memory输出信息"></a>info memory输出信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">info memory</span><br><span class="line">  Memory</span><br><span class="line">used_memory:5198608840</span><br><span class="line">used_memory_human:4.84G</span><br><span class="line">used_memory_rss:11156660224</span><br><span class="line">used_memory_peak:9816601560</span><br><span class="line">used_memory_peak_human:9.14G</span><br><span class="line">used_memory_lua:36864</span><br><span class="line">mem_fragmentation_ratio:2.15</span><br><span class="line">mem_allocator:libc</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/mushroom/p/4738170.html" target="_blank" rel="external">http://www.cnblogs.com/mushroom/p/4738170.html</a></p><p>对应的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Memory */</span></span><br><span class="line"><span class="keyword">if</span> (allsections || defsections || !strcasecmp(section,<span class="string">"memory"</span>)) &#123;</span><br><span class="line"><span class="keyword">char</span> hmem[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> peak_hmem[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">size_t</span> zmalloc_used = zmalloc_used_memory();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Peak memory is updated from time to time by serverCron() so it</span></span><br><span class="line"><span class="comment">* may happen that the instantaneous value is slightly bigger than</span></span><br><span class="line"><span class="comment">* the peak value. This may confuse users, so we update the peak</span></span><br><span class="line"><span class="comment">* if found smaller than the current memory usage. */</span></span><br><span class="line"><span class="keyword">if</span> (zmalloc_used &gt; server.stat_peak_memory)</span><br><span class="line">server.stat_peak_memory = zmalloc_used;</span><br><span class="line"></span><br><span class="line">bytesToHuman(hmem,zmalloc_used);</span><br><span class="line">bytesToHuman(peak_hmem,server.stat_peak_memory);</span><br><span class="line"><span class="keyword">if</span> (sections++) info = sdscat(info,<span class="string">"\r\n"</span>);</span><br><span class="line">info = sdscatprintf(info,</span><br><span class="line"><span class="string">"# Memory\r\n"</span></span><br><span class="line"><span class="string">"used_memory:%zu\r\n"</span></span><br><span class="line"><span class="string">"used_memory_human:%s\r\n"</span></span><br><span class="line"><span class="string">"used_memory_rss:%zu\r\n"</span></span><br><span class="line"><span class="string">"used_memory_peak:%zu\r\n"</span></span><br><span class="line"><span class="string">"used_memory_peak_human:%s\r\n"</span></span><br><span class="line"><span class="string">"used_memory_lua:%lld\r\n"</span></span><br><span class="line"><span class="string">"mem_fragmentation_ratio:%.2f\r\n"</span></span><br><span class="line"><span class="string">"mem_allocator:%s\r\n"</span>,</span><br><span class="line">zmalloc_used,</span><br><span class="line">hmem,</span><br><span class="line">server.resident_set_size,</span><br><span class="line">server.stat_peak_memory,</span><br><span class="line">peak_hmem,</span><br><span class="line">((<span class="keyword">long</span> <span class="keyword">long</span>)lua_gc(server.lua,LUA_GCCOUNT,<span class="number">0</span>))*<span class="number">1024L</span>L,</span><br><span class="line">zmalloc_get_fragmentation_ratio(server.resident_set_size),</span><br><span class="line">ZMALLOC_LIB</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>used_memory</strong></p>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL性能排查案例1</title>
      <link href="/2016-04-11-mysqlxing-neng-pai-cha-an-li-1/"/>
      <url>/2016-04-11-mysqlxing-neng-pai-cha-an-li-1/</url>
      <content type="html"><![CDATA[<h2 id="1、简单查询问题排查"><a href="#1、简单查询问题排查" class="headerlink" title="1、简单查询问题排查"></a>1、简单查询问题排查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  Scores: V/M = 0.14</span><br><span class="line">  Attribute    pct   total     min     max     avg     95%  stddev  median</span><br><span class="line">  ============ === ======= ======= ======= ======= ======= ======= =======</span><br><span class="line">  Count          2       5</span><br><span class="line">  Exec time      4     27s      4s      6s      5s      6s   878ms      6s</span><br><span class="line">  <span class="keyword">Lock</span> <span class="keyword">time</span>      <span class="number">4</span>   <span class="number">246</span>us    <span class="number">43</span>us    <span class="number">64</span>us    <span class="number">49</span>us    <span class="number">63</span>us     <span class="number">7</span>us    <span class="number">44</span>us</span><br><span class="line">  <span class="keyword">Rows</span> sent      <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span>       <span class="number">0</span></span><br><span class="line">  <span class="keyword">Rows</span> examine   <span class="number">0</span>       <span class="number">5</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">0</span>       <span class="number">1</span></span><br><span class="line">  <span class="keyword">Query</span> <span class="keyword">size</span>     <span class="number">3</span>     <span class="number">583</span>     <span class="number">116</span>     <span class="number">117</span>  <span class="number">116.60</span>  <span class="number">112.70</span>       <span class="number">0</span>  <span class="number">112.70</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`cc_product_skus`</span> <span class="keyword">SET</span> <span class="string">`stock`</span>=<span class="string">'578'</span> <span class="keyword">WHERE</span> ( <span class="string">`id`</span> = <span class="string">'20081272'</span> ) <span class="keyword">AND</span> ( <span class="string">`product_id`</span> = <span class="string">'100122171387'</span> ) <span class="keyword">LIMIT</span> <span class="number">1</span>\G</span><br><span class="line">  Converted <span class="keyword">for</span> <span class="keyword">EXPLAIN</span></span><br><span class="line">  <span class="keyword">EXPLAIN</span> <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span>  <span class="string">`stock`</span>=<span class="string">'578'</span> <span class="keyword">from</span> <span class="string">`cc_product_skus`</span> <span class="keyword">where</span>  ( <span class="string">`id`</span> = <span class="string">'20081272'</span> ) <span class="keyword">AND</span> ( <span class="string">`product_id`</span> = <span class="string">'100122171387'</span> )  <span class="keyword">LIMIT</span> <span class="number">1</span> \G</span><br></pre></td></tr></table></figure><p>通过pt-query-digest的可以看出上面简单的update语句耗时会在4s-6s之间。</p><h3 id="问题1-Lock-time是否包括innodb-wait-lock呢？"><a href="#问题1-Lock-time是否包括innodb-wait-lock呢？" class="headerlink" title="问题1-Lock_time是否包括innodb wait lock呢？"></a>问题1-Lock_time是否包括innodb wait lock呢？</h3><p><a href="http://lists.mysql.com/commits/115766" target="_blank" rel="external">http://lists.mysql.com/commits/115766</a><br>MySQL 5.5.6版本之后已经改进这个问题。</p><p>目前线上使用MySQL 5.6.19版本，且通过下面的实验进行验证：</p><p>通过2个session，1个session持有锁，另外一个session等待这个锁，模拟innodb wait lock，对应的慢查询如下：</p><p><img src="/images/slowlog_locktime.jpg" alt="slowlog_locktime.jpg"></p><h3 id="2、在慢查询里面看到Commit提交慢"><a href="#2、在慢查询里面看到Commit提交慢" class="headerlink" title="2、在慢查询里面看到Commit提交慢"></a>2、在慢查询里面看到Commit提交慢</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  Time: 160411  2:02:51</span><br><span class="line">  User@Host: shop2[shop2] @  [10.30.11.253]  Id: 5888814786</span><br><span class="line">  Query_time: 7.139016  Lock_time: 0.000000 Rows_sent: 0  Rows_examined: 0</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">timestamp</span>=<span class="number">1460340171</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line">  User@Host: shop2[shop2] @  [10.30.10.50]  Id: 5888814819</span><br><span class="line">  Query_time: 7.052946  Lock_time: 0.000000 Rows_sent: 0  Rows_examined: 0</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">timestamp</span>=<span class="number">1460340171</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line">  User@Host: shop2[shop2] @  [10.30.9.251]  Id: 5888814800</span><br><span class="line">  Query_time: 7.089021  Lock_time: 0.000000 Rows_sent: 0  Rows_examined: 0</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">timestamp</span>=<span class="number">1460340171</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>根据thread_id查看整个连接做了哪些操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">160411  2:02:44   5888814800 Connect    shop2@10.xx.xxx.xxx on shop</span><br><span class="line">160411  2:02:44   5888814800 Query      <span class="keyword">SET</span> <span class="keyword">NAMES</span> <span class="string">'utf8'</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SET</span> sql_mode=<span class="string">''</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`cc_order_user`</span> <span class="keyword">WHERE</span> ( <span class="string">`order_sn`</span> = <span class="string">'xxx'</span> ) <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`cc_order_products_user`</span> <span class="keyword">WHERE</span> ( <span class="string">`order_id`</span> = <span class="string">'xxx'</span> )</span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`cc_refund_order`</span> <span class="keyword">WHERE</span> ( <span class="string">`order_sn`</span> = <span class="string">'xxx'</span> ) <span class="keyword">AND</span> ( <span class="string">`status`</span> = <span class="number">0</span> ) <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">UPDATE</span> <span class="string">`cc_order_user`</span> <span class="keyword">SET</span> <span class="string">`shipping_sn`</span>=<span class="string">'1xxx'</span>,<span class="string">`shipping_company_id`</span>=<span class="string">'yxxx'</span>,<span class="string">`status_delivery`</span>=<span class="number">2</span>,<span class="string">`delivery_time`</span>=<span class="number">1460340164</span> WHE</span><br><span class="line">RE ( <span class="string">`order_sn`</span> = <span class="string">'xxxx'</span> )</span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">44</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">COMMIT</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">51</span>   <span class="number">5888814800</span> <span class="keyword">Query</span>      <span class="keyword">SET</span> AUTOCOMMIT=<span class="number">1</span></span><br><span class="line"><span class="number">160411</span>  <span class="number">2</span>:<span class="number">02</span>:<span class="number">51</span>   <span class="number">5888814800</span> Quit</span><br></pre></td></tr></table></figure><p><strong>可以看到COMMIT就耗时7s</strong></p><h3 id="2-1-COMMIT的时候做了哪些操作呢？"><a href="#2-1-COMMIT的时候做了哪些操作呢？" class="headerlink" title="2.1 COMMIT的时候做了哪些操作呢？"></a>2.1 COMMIT的时候做了哪些操作呢？</h3><p><strong>undolog日志</strong></p><p><img src="/images/commit_undo.png" alt="commit_undolog"></p><p><strong>redlog日志</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m3306:shangcheng-m1 &gt;show variables like '%flush_log%';</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br><span class="line">| innodb_flush_log_at_timeout    | 1     |</span><br><span class="line">| innodb_flush_log_at_trx_commit | 2     |</span><br><span class="line">+<span class="comment">--------------------------------+-------+</span></span><br></pre></td></tr></table></figure><p>关于innodb_flush_log_at_trx_commit参数的含义如下图解释：</p><p><img src="/images/innodb_flush_log_at_commit.jpg" alt="innodb_flush_log_at_commit"></p><h3 id="2-2-查看redo-log更新的情况"><a href="#2-2-查看redo-log更新的情况" class="headerlink" title="2.2 查看redo log更新的情况"></a>2.2 查看redo log更新的情况</h3><p><strong>innodb_log_file_size参数大小</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">m3306:shangcheng-m1 &gt;show variables like '%innodb_log_file%';</span><br><span class="line">+<span class="comment">---------------------------+-----------+</span></span><br><span class="line">| Variable_name             | Value     |</span><br><span class="line">+<span class="comment">---------------------------+-----------+</span></span><br><span class="line">| innodb_log_file_size      | 134217728 |</span><br><span class="line">| innodb_log_files_in_group | 2         |</span><br><span class="line">+<span class="comment">---------------------------+-----------+</span></span><br><span class="line"></span><br><span class="line">m3306:shangcheng-m1 &gt;select 134217728/1024/1024;</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 134217728/1024/1024 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">|        128.00000000 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure><p>可以看出innodb_log_file_size只有128M，这和以往的经验差别很大（一般设置为&gt;1G）。</p><p>根据performance的给出计算参考：</p><p><a href="https://www.percona.com/blog/2008/11/21/how-to-calculate-a-good-innodb-log-file-size/" target="_blank" rel="external">https://www.percona.com/blog/2008/11/21/how-to-calculate-a-good-innodb-log-file-size/</a></p><p><a href="https://www.percona.com/blog/2006/07/03/choosing-proper-innodb_log_file_size/" target="_blank" rel="external">https://www.percona.com/blog/2006/07/03/choosing-proper-innodb_log_file_size/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 最大值</span><br><span class="line">MAX_SIZE=18.90M</span><br><span class="line"> 业务高峰开启的时候</span><br><span class="line">2016-04-11 02:00:01 10.20</span><br><span class="line">2016-04-11 02:01:01 18.90</span><br><span class="line">2016-04-11 02:02:01 12.27</span><br><span class="line">2016-04-11 02:03:01 13.22</span><br></pre></td></tr></table></figure><p>按照上述参考计算值为18.9*60/2=567G,按照128M round，至少需要设置640M。</p><p><strong>MySQL测试推荐</strong></p><p><a href="http://dimitrik.free.fr/blog/archives/2015/10/mysql-performance-yes-we-can-do-more-than-16m-qps-sql-on-mysql-57-ga.html" target="_blank" rel="external">http://dimitrik.free.fr/blog/archives/2015/10/mysql-performance-yes-we-can-do-more-than-16m-qps-sql-on-mysql-57-ga.html</a></p><p><strong>Handler情况</strong></p><p><img src="/images/shangcheng_handler.png" alt="handler"></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql故障总结</title>
      <link href="/2016-03-16-mysqlgu-zhang-zong-jie/"/>
      <url>/2016-03-16-mysqlgu-zhang-zong-jie/</url>
      <content type="html"><![CDATA[<h2 id="一、MetaTable-Lock"><a href="#一、MetaTable-Lock" class="headerlink" title="一、MetaTable Lock"></a>一、MetaTable Lock</h2><p><strong>1、问题现象:</strong><br><img src="/images/processlist.png" alt="img"></p><p><strong>2、问题追查:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> INNODB_TRX\G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">trx_id: <span class="number">119520700800</span></span><br><span class="line">trx_state: RUNNING</span><br><span class="line">trx_started: <span class="number">2016</span><span class="number">-03</span><span class="number">-16</span> <span class="number">04</span>:<span class="number">45</span>:<span class="number">25</span></span><br><span class="line">trx_requested_lock_id: <span class="literal">NULL</span></span><br><span class="line">trx_wait_started: <span class="literal">NULL</span></span><br><span class="line">trx_weight: <span class="number">0</span></span><br><span class="line">trx_mysql_thread_id: <span class="number">17427746</span></span><br><span class="line">trx_query: <span class="literal">NULL</span></span><br><span class="line">trx_operation_state: <span class="literal">NULL</span></span><br><span class="line">trx_tables_in_use: <span class="number">0</span></span><br><span class="line">trx_tables_locked: <span class="number">0</span></span><br><span class="line">trx_lock_structs: <span class="number">0</span></span><br><span class="line">trx_lock_memory_bytes: <span class="number">360</span></span><br><span class="line">trx_rows_locked: <span class="number">0</span></span><br><span class="line">trx_rows_modified: <span class="number">0</span></span><br><span class="line">trx_concurrency_tickets: <span class="number">0</span></span><br><span class="line">trx_isolation_level: REPEATABLE <span class="keyword">READ</span></span><br><span class="line">trx_unique_checks: <span class="number">1</span></span><br><span class="line">trx_foreign_key_checks: <span class="number">1</span></span><br><span class="line">trx_last_foreign_key_error: <span class="literal">NULL</span></span><br><span class="line">trx_adaptive_hash_latched: <span class="number">0</span></span><br><span class="line">trx_adaptive_hash_timeout: <span class="number">10000</span></span><br><span class="line">trx_is_read_only: <span class="number">0</span></span><br><span class="line">trx_autocommit_non_locking: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>3、上面的thread对应的查询语句</strong><br><img src="/images/metalock_query1.png" alt="img"></p><font color="red">这个对thread_id对应的用户是搜索的。</font><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">160316  3:47:48   17424544 Connect  shop_search@10.30.23.222 on shop</span><br></pre></td></tr></table></figure><p><strong>4、Metalock原理:</strong><br><a href="http://dev.mysql.com/doc/refman/5.6/en/metadata-locking.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/metadata-locking.html</a><br><a href="http://blog.itpub.net/25704976/viewspace-1379568/" target="_blank" rel="external">http://blog.itpub.net/25704976/viewspace-1379568/</a></p><p><img src="/images/metalock3.png" alt="img"></p><p>Binlog内操作的记录是基于事务的提交顺序进行的，如果有一个事务未执行完成，而这个时候drop了表，这样在从库的执行顺序就会出现问题。<br>MySQL在5.5.3版本后引入了Metadata lock锁，事务释放后才会释放Metadata lock，这样在事务完成期间，是不能进行DDL操作的。</p><p><img src="/images/metalock4.png" alt="img"></p><font color="red"><strong>从官方文档可以看出，对于Session1的SQL语句，不仅限于更新的SQL，对于SELECT语句一样如此，且其对Metalock的锁持有时间一直到事务结束。</strong></font><p><strong>5、问题模拟:</strong></p><p>手动开启事务然后进行alter table操作:<br><img src="/images/metalock.png" alt="img"></p><p>回滚事务alter table操作成功:<br><img src="/images/metalock2.png" alt="img"></p><p><strong>6、改进方案</strong><br>1、开启事务(set autocommit=0)，一定要显示的commit或者rollback，且事务里面不要包括太多的语句。<br>2、对于只是Select的查询，一定不要加事务，Innodb引擎是MVCC模式，加事务不起到任何作用。</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis Sentinel</title>
      <link href="/2016-03-11-redis-sentinel/"/>
      <url>/2016-03-11-redis-sentinel/</url>
      <content type="html"><![CDATA[<h2 id="1、Redis哨兵搭建测试"><a href="#1、Redis哨兵搭建测试" class="headerlink" title="1、Redis哨兵搭建测试"></a>1、Redis哨兵搭建测试</h2><h3 id="1-1-Redis主从信息"><a href="#1-1-Redis主从信息" class="headerlink" title="1.1 Redis主从信息"></a>1.1 Redis主从信息</h3><p><strong>主从信息:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis主库:10.30.6.184(service-test2)</span><br><span class="line">redis从库1:10.30.6.183(service-test3)</span><br><span class="line">redis从库2:10.30.6.217（service-test1）</span><br></pre></td></tr></table></figure><p><strong>redis部署的目录结构:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── bin</span><br><span class="line">│   ├── redis-benchmark</span><br><span class="line">│   ├── redis-check-aof</span><br><span class="line">│   ├── redis-check-dump</span><br><span class="line">│   ├── redis-cli</span><br><span class="line">│   ├── redis-sentinel</span><br><span class="line">│   ├── redis-server</span><br><span class="line">│   └── redis-trib.rb</span><br><span class="line">├── conf</span><br><span class="line">│   ├── r3050.conf</span><br><span class="line">│   └── sentinel.conf</span><br><span class="line">├── data</span><br><span class="line">│   ├── appendonly.aof</span><br><span class="line">│   └── r3050.rdb</span><br><span class="line">├── log</span><br><span class="line">│   └── r3050.log</span><br><span class="line">└── tmp</span><br><span class="line">└── redis3050.pid</span><br></pre></td></tr></table></figure><p><strong>redis配置文件:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /home/op/redis3050/tmp/redis3050.pid</span><br><span class="line">port 3050</span><br><span class="line">timeout 172800</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /home/op/redis3050/log/r3050.log</span><br><span class="line">databases 16</span><br><span class="line">rdbcompression yes</span><br><span class="line">dbfilename r3050.rdb</span><br><span class="line">dir /home/op/redis3050/data/</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line">auto-aof-rewrite-percentage 0</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 1024</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">activerehashing yes</span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line">maxmemory 5G</span><br></pre></td></tr></table></figure><h3 id="1-2-哨兵配置"><a href="#1-2-哨兵配置" class="headerlink" title="1.2 哨兵配置"></a>1.2 哨兵配置</h3><p>以上三台机器上初始化sentinel配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 10.30.6.184 3050 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line">sentinel failover-timeout mymaster 18000</span><br><span class="line">sentinel config-epoch mymaster 0</span><br></pre></td></tr></table></figure><p>通过下面命令在三台机器上启动哨兵:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-sentinel ./conf/sentinel.conf &amp;</span><br></pre></td></tr></table></figure><p>在主上可以看到收到下面消息，说明各个哨兵联合在一起了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">22210:X 11 Mar 16:37:22.505 * +sentinel sentinel 10.30.6.183:26379 10.30.6.183 26379 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 16:37:46.050 * +sentinel sentinel 10.30.6.217:26379 10.30.6.217 26379 @ mymaster 10.30.6.184 3050</span><br></pre></td></tr></table></figure><p>这个时候的哨兵配置文件内容变成如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 10.30.6.184 3050 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line">sentinel failover-timeout mymaster 18000</span><br><span class="line">sentinel config-epoch mymaster 0</span><br><span class="line">  Generated by CONFIG REWRITE</span><br><span class="line">port 26379</span><br><span class="line">dir &quot;/home/op/redis3050&quot;</span><br><span class="line">sentinel leader-epoch mymaster 0</span><br><span class="line">sentinel known-slave mymaster 10.30.6.217 3050</span><br><span class="line">sentinel known-slave mymaster 10.30.6.183 3050</span><br><span class="line">sentinel known-sentinel mymaster 10.30.6.217 26379 86aefa154fe695f9e0ea56312e01a14c24e79129</span><br><span class="line">sentinel known-sentinel mymaster 10.30.6.183 26379 61c53d7c01409da6b5e831d0fa26f49026909809</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><p>每台均是如此。</p><h2 id="2、Sentinel基本操作"><a href="#2、Sentinel基本操作" class="headerlink" title="2、Sentinel基本操作"></a>2、Sentinel基本操作</h2><h3 id="2-1-Sentinel-masters"><a href="#2-1-Sentinel-masters" class="headerlink" title="2.1 Sentinel masters"></a>2.1 Sentinel masters</h3><p>列出所有被见识的主Redis服务实例，以及这些主服务实例的当前状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26379&gt; sentinel masters</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">2) &quot;mymaster&quot;</span><br><span class="line">3) &quot;ip&quot;</span><br><span class="line">4) &quot;10.30.6.184&quot;</span><br><span class="line">5) &quot;port&quot;</span><br><span class="line">6) &quot;3050&quot;</span><br><span class="line">7) &quot;runid&quot;</span><br><span class="line">8) &quot;680b4c8c7cb4a05fadbe968e03c2c9e3de42e09e&quot;</span><br><span class="line">9) &quot;flags&quot;</span><br><span class="line">10) &quot;master&quot;</span><br><span class="line">......</span><br><span class="line">37) &quot;parallel-syncs&quot;</span><br><span class="line">38) &quot;1&quot;</span><br></pre></td></tr></table></figure><h3 id="2-2-Sentinel-Slaves"><a href="#2-2-Sentinel-Slaves" class="headerlink" title="2.2 Sentinel Slaves"></a>2.2 Sentinel Slaves</h3><p>列出给定主服务实例的所有从实例，以及这些从实例的当前状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26379&gt; sentinel slaves mymaster</span><br><span class="line">1)  1) &quot;name&quot;</span><br><span class="line">2) &quot;10.30.6.217:3050&quot;</span><br><span class="line">3) &quot;ip&quot;</span><br><span class="line">4) &quot;10.30.6.217&quot;</span><br><span class="line">5) &quot;port&quot;</span><br><span class="line">6) &quot;3050&quot;</span><br><span class="line">7) &quot;runid&quot;</span><br><span class="line">8) &quot;9ae75482b5c770c7c0cf8aa2092eab7e450ec232&quot;</span><br><span class="line">9) &quot;flags&quot;</span><br><span class="line">10) &quot;slave&quot;</span><br><span class="line">......</span><br><span class="line">37) &quot;slave-repl-offset&quot;</span><br><span class="line">38) &quot;186791&quot;</span><br><span class="line">2)  1) &quot;name&quot;</span><br><span class="line">2) &quot;10.30.6.183:3050&quot;</span><br><span class="line">3) &quot;ip&quot;</span><br><span class="line">4) &quot;10.30.6.183&quot;</span><br><span class="line">5) &quot;port&quot;</span><br><span class="line">6) &quot;3050&quot;</span><br><span class="line">7) &quot;runid&quot;</span><br><span class="line">8) &quot;390beeec7d4ebfd0d4c0317eed3e97e498f4d9fd&quot;</span><br><span class="line">9) &quot;flags&quot;</span><br><span class="line">10) &quot;slave&quot;</span><br><span class="line">......</span><br><span class="line">38) &quot;186791&quot;</span><br></pre></td></tr></table></figure><h3 id="2-3-Sentinel-get-master-addr-by-name"><a href="#2-3-Sentinel-get-master-addr-by-name" class="headerlink" title="2.3 Sentinel get-master-addr-by-name"></a>2.3 Sentinel get-master-addr-by-name</h3><p>返回给定名字的主实例IP地址和端口号。如果这个主实例正在进行故障转移操作，<br>或者针对这个主实例的故障转移操作已经完成，那么这个命令返回新的主服务器的IP地址和端口号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26379&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) &quot;10.30.6.184&quot;</span><br><span class="line">2) &quot;3050&quot;</span><br></pre></td></tr></table></figure><h3 id="2-4-Sentinel-failover"><a href="#2-4-Sentinel-failover" class="headerlink" title="2.4 Sentinel failover"></a>2.4 Sentinel failover</h3><p>进行一次主动的failover，即在不询问Sentinel意见的情况下，强制开始一次自动故障迁移。<br>发起故障迁移的Sentinel会向其他Sentinel发送一个新的配置，其他Sentinel会根据这个配置进行相应的更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sentinel failover mymaster</span><br><span class="line">22210:X 11 Mar 17:03:59.846 # Executing user requested FAILOVER of &apos;mymaster&apos;</span><br><span class="line">22210:X 11 Mar 17:03:59.846 # +new-epoch 1</span><br><span class="line">22210:X 11 Mar 17:03:59.846 # +try-failover master mymaster 10.30.6.184 3050</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:26379&gt; 22210:X 11 Mar 17:03:59.890 # +vote-for-leader 8da81bbf7a87e42440046a8978b2fa69adc11fae 1</span><br><span class="line">22210:X 11 Mar 17:03:59.890 # +elected-leader master mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:03:59.890 # +failover-state-select-slave master mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:03:59.973 # +selected-slave slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:03:59.973 * +failover-state-send-slaveof-noone slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:00.031 * +failover-state-wait-promotion slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:00.901 # +promoted-slave slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:00.901 # +failover-state-reconf-slaves master mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:00.981 * +slave-reconf-sent slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:01.947 * +slave-reconf-inprog slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:01.947 * +slave-reconf-done slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:02.024 # +failover-end master mymaster 10.30.6.184 3050</span><br><span class="line">22210:X 11 Mar 17:04:02.024 # +switch-master mymaster 10.30.6.184 3050 10.30.6.183 3050</span><br><span class="line">22210:X 11 Mar 17:04:02.024 * +slave slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050</span><br><span class="line">22210:X 11 Mar 17:04:02.024 * +slave slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050</span><br><span class="line"></span><br><span class="line">127.0.0.1:26379&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) &quot;10.30.6.183&quot;</span><br><span class="line">2) &quot;3050&quot;</span><br></pre></td></tr></table></figure><p>可以看出来新的主，原来主变成新库的从库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">11826:M 11 Mar 17:04:00.032 # Connection with slave 10.30.6.183:3050 lost.</span><br><span class="line">11826:M 11 Mar 17:04:00.982 # Connection with slave 10.30.6.217:3050 lost.</span><br><span class="line">11826:S 11 Mar 17:04:11.079 * SLAVE OF 10.30.6.183:3050 enabled (user request from &apos;id=23 addr=10.30.6.217:35942 fd=9 name=sentinel-86aefa15-cmd age=10 idle=0 flags=x db=0 sub=0</span><br><span class="line">psub=0 multi=3 qbuf=0 qbuf-free=32768 obl=36 oll=0 omem=0 events=rw cmd=exec&apos;)</span><br><span class="line">11826:S 11 Mar 17:04:11.079 # CONFIG REWRITE executed with success.</span><br><span class="line">11826:S 11 Mar 17:04:11.602 * Connecting to MASTER 10.30.6.183:3050</span><br><span class="line">11826:S 11 Mar 17:04:11.602 * MASTER &lt;-&gt; SLAVE sync started</span><br><span class="line">11826:S 11 Mar 17:04:11.602 * Non blocking connect for SYNC fired the event.</span><br><span class="line">11826:S 11 Mar 17:04:11.603 * Master replied to PING, replication can continue...</span><br><span class="line">11826:S 11 Mar 17:04:11.603 * Partial resynchronization not possible (no cached master)</span><br><span class="line">11826:S 11 Mar 17:04:11.605 * Full resync from master: 390beeec7d4ebfd0d4c0317eed3e97e498f4d9fd:357200</span><br><span class="line">11826:S 11 Mar 17:04:11.683 * MASTER &lt;-&gt; SLAVE sync: receiving 55 bytes from master</span><br><span class="line">11826:S 11 Mar 17:04:11.683 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</span><br><span class="line">11826:S 11 Mar 17:04:11.683 * MASTER &lt;-&gt; SLAVE sync: Loading DB in memory</span><br><span class="line">11826:S 11 Mar 17:04:11.684 * MASTER &lt;-&gt; SLAVE sync: Finished with success</span><br><span class="line">11826:S 11 Mar 17:04:11.684 * Background append only file rewriting started by pid 27191</span><br><span class="line">11826:S 11 Mar 17:04:11.712 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">27191:C 11 Mar 17:04:11.712 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">27191:C 11 Mar 17:04:11.712 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">27191:C 11 Mar 17:04:11.712 * SYNC append only file rewrite performed</span><br><span class="line">27191:C 11 Mar 17:04:11.712 * AOF rewrite: 0 MB of memory used by copy-on-write</span><br><span class="line">11826:S 11 Mar 17:04:11.802 * Background AOF rewrite terminated with success</span><br><span class="line">11826:S 11 Mar 17:04:11.802 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">11826:S 11 Mar 17:04:11.802 * Background AOF rewrite finished successfully</span><br><span class="line">11826:S 11 Mar 17:16:59.969 * SLAVE OF would result into synchronization with the master we are already connected with. No operation performed.</span><br><span class="line">11826:M 11 Mar 17:17:16.301 # Connection with master lost.</span><br><span class="line">11826:M 11 Mar 17:17:16.301 * Caching the disconnected master state.</span><br><span class="line">11826:M 11 Mar 17:17:16.301 * Discarding previously cached master state.</span><br></pre></td></tr></table></figure><h3 id="2-5-订阅哨兵的消息"><a href="#2-5-订阅哨兵的消息" class="headerlink" title="2.5 订阅哨兵的消息"></a>2.5 订阅哨兵的消息</h3><p>通过接受sentinel发送的通知:<br>当执行故障转移操作，或者某个被监视的实例被判断为主观下线或者客观下线时，Sentinel就会发送想要的信息。<br>一个频道能够接收和这个名字相同的事件。<br>通过执行PUBSCRIBE *命令接收所有事件信息。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">10.30.6.184:26379&gt; PSUBSCRIBE *</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+new-epoch&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+try-failover&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+vote-for-leader&quot;</span><br><span class="line">4) &quot;8da81bbf7a87e42440046a8978b2fa69adc11fae 2&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+elected-leader&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+failover-state-select-slave&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+selected-slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+failover-state-send-slaveof-noone&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+failover-state-wait-promotion&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;-role-change&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050 new reported role is master&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+promoted-slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+failover-state-reconf-slaves&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave-reconf-sent&quot;</span><br><span class="line">4) &quot;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave-reconf-inprog&quot;</span><br><span class="line">4) &quot;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave-reconf-done&quot;</span><br><span class="line">4) &quot;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+failover-end&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+switch-master&quot;</span><br><span class="line">4) &quot;mymaster 10.30.6.183 3050 10.30.6.184 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.184 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;-role-change&quot;</span><br><span class="line">4) &quot;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050 new reported role is master&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+role-change&quot;</span><br><span class="line">4) &quot;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050 new reported role is slave&quot;</span><br></pre></td></tr></table></figure><p>从订阅的信息可以看出，故障检测、vote、以及修改其他从库同步。</p><h3 id="2-6-模拟故障，手动kill主库的进程"><a href="#2-6-模拟故障，手动kill主库的进程" class="headerlink" title="2.6 模拟故障，手动kill主库的进程"></a>2.6 模拟故障，手动kill主库的进程</h3><p>从订阅的信息中可以看到+sdown的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+sdown&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.184 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+new-epoch&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+vote-for-leader&quot;</span><br><span class="line">4) &quot;86aefa154fe695f9e0ea56312e01a14c24e79129 3&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+odown&quot;</span><br><span class="line">4) &quot;master mymaster 10.30.6.184 3050 #quorum 3/2&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;-role-change&quot;</span><br><span class="line">4) &quot;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.184 3050 new reported role is master&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+config-update-from&quot;</span><br><span class="line">4) &quot;sentinel 10.30.6.217:26379 10.30.6.217 26379 @ mymaster 10.30.6.184 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+switch-master&quot;</span><br><span class="line">4) &quot;mymaster 10.30.6.184 3050 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;+slave&quot;</span><br><span class="line">4) &quot;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&quot;</span><br></pre></td></tr></table></figure><p>当将老主库的实例启动起来之后，自动同步新主库。</p><p><strong>SDOWN 主观下线</strong><br>如果服务器在给定的毫秒数之内，没有返回Sentinel发送的PING命令回复或者返回一个错误，那么Sentinel将这个服务器标记为主观下线(SDOWN)。</p><p><strong>ODOWN 客观下线</strong><br>只有一个Sentinel将服务器标记为主观下线并不一定会引起服务器的自动故障迁移：只有在足够数量的Sentinel都将一个服务器标记为主观下线之后，服务器才会被标记为客观下线（ODOWN），这时自动故障迁移才会执行。</p><p>将服务器标记为客观下线所需的Sentinel数量由对主服务器的配置决定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 10.30.6.184 3050 2</span><br></pre></td></tr></table></figure><h3 id="2-7-Sentinel客户端"><a href="#2-7-Sentinel客户端" class="headerlink" title="2.7 Sentinel客户端"></a>2.7 Sentinel客户端</h3><p>如果要做到应用程序对Redis的failover透明，客户端需要监控sentinel的平道信息，并自动连接新的主节点。</p><p>这里就需要整合sentinel的redis driver。</p><h3 id="2-8-故障通知以及配置修改"><a href="#2-8-故障通知以及配置修改" class="headerlink" title="2.8 故障通知以及配置修改"></a>2.8 故障通知以及配置修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"></span><br><span class="line">  Call the specified notification script for any sentinel event that is</span><br><span class="line">  generated in the WARNING level (for instance -sdown, -odown, and so forth).</span><br><span class="line">  This script should notify the system administrator via email, SMS, or any</span><br><span class="line">  other messaging system, that there is something wrong with the monitored</span><br><span class="line">  Redis systems.</span><br><span class="line"></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br><span class="line">  When the master changed because of a failover a script can be called in</span><br><span class="line">  order to perform application-specific tasks to notify the clients that the</span><br><span class="line">  configuration has changed and the master is at a different address.</span><br></pre></td></tr></table></figure><h3 id="2-9-哨兵切换过程"><a href="#2-9-哨兵切换过程" class="headerlink" title="2.9 哨兵切换过程"></a>2.9 哨兵切换过程</h3><p>一次故障转移操作步骤:</p><ul><li>发下主服务器已经进入客观下线状态</li><li>对我们的当前纪元进行自增，并尝试在这个纪元中当选</li><li>如果当选失败，那么在设定的故障迁移超时时间的两倍之后，重新尝试当选。如果当选成功，那么执行以下步骤</li><li>选出一个从服务器，并将它升级为主服务器</li><li>向被选中的从服务器发送SLAVEOF NO ONE命令，让它转变为主服务器</li><li>通过发布与订阅功能，将更新后的配置传播给所有其他Sentinel，其他Sentinel队它们自己的配置进行更新</li><li>向已下线主服务器的从服务器发送SLAVEOF命令，让它们去复制新的主服务器<br>+当所有从服务器都已经开始复制新的主服务器时，领头的Sentinel终止这次故障迁移操作。</li></ul><h3 id="2-10-后续处理"><a href="#2-10-后续处理" class="headerlink" title="2.10 后续处理"></a>2.10 后续处理</h3><p>什么时候知道从库已经全部同步完成？？</p><p>通过python的订阅信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;pattern&apos;: None, &apos;type&apos;: &apos;psubscribe&apos;, &apos;channel&apos;: &apos;*&apos;, &apos;data&apos;: 1L&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+new-epoch&apos;, &apos;data&apos;: &apos;9&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+config-update-from&apos;, &apos;data&apos;: &apos;sentinel 10.30.6.217:26379 10.30.6.217 26379 @ mymaster 10.30.6.217 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+switch-master&apos;, &apos;data&apos;: &apos;mymaster 10.30.6.217 3050 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;-role-change&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050 new reported role is master&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+role-change&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050 new reported role is slave&apos;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;pattern&apos;: None, &apos;type&apos;: &apos;psubscribe&apos;, &apos;channel&apos;: &apos;*&apos;, &apos;data&apos;: 1L&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+new-epoch&apos;, &apos;data&apos;: &apos;8&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+try-failover&apos;, &apos;data&apos;: &apos;master mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+vote-for-leader&apos;, &apos;data&apos;: &apos;558204b27aada22f980284b9447fa34c30ea2fa0 8&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+elected-leader&apos;, &apos;data&apos;: &apos;master mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+failover-state-select-slave&apos;, &apos;data&apos;: &apos;master mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+selected-slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+failover-state-send-slaveof-noone&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+failover-state-wait-promotion&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;-role-change&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050 new reported role is master&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+promoted-slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.217:3050 10.30.6.217 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+failover-state-reconf-slaves&apos;, &apos;data&apos;: &apos;master mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave-reconf-sent&apos;, &apos;data&apos;: &apos;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave-reconf-inprog&apos;, &apos;data&apos;: &apos;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave-reconf-done&apos;, &apos;data&apos;: &apos;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+failover-end&apos;, &apos;data&apos;: &apos;master mymaster 10.30.6.183 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+switch-master&apos;, &apos;data&apos;: &apos;mymaster 10.30.6.183 3050 10.30.6.217 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.184:3050 10.30.6.184 3050 @ mymaster 10.30.6.217 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+slave&apos;, &apos;data&apos;: &apos;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.217 3050&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;-role-change&apos;, &apos;data&apos;: &apos;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.217 3050 new reported role is master&apos;&#125;</span><br><span class="line">&#123;&apos;pattern&apos;: &apos;*&apos;, &apos;type&apos;: &apos;pmessage&apos;, &apos;channel&apos;: &apos;+role-change&apos;, &apos;data&apos;: &apos;slave 10.30.6.183:3050 10.30.6.183 3050 @ mymaster 10.30.6.217 3050 new reported role is slave&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-11-问题"><a href="#2-11-问题" class="headerlink" title="2.11 问题"></a>2.11 问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-failover-abort-slave-timeout master mytest 10.30.11.225 8379</span><br></pre></td></tr></table></figure><p><a href="http://grokbase.com/t/gg/redis-db/147hea9vmm/redis-sentinel-manual-failover-hangs-on-failover-state-wait-promotion" target="_blank" rel="external">http://grokbase.com/t/gg/redis-db/147hea9vmm/redis-sentinel-manual-failover-hangs-on-failover-state-wait-promotion</a><br><a href="https://github.com/antirez/redis/pull/2097" target="_blank" rel="external">https://github.com/antirez/redis/pull/2097</a></p><font color="red">原因在于修改对于config命令进行重命名操作了。</font><p><a href="https://github.com/jipperinbham/redis/blob/sentinel-rename-command-3.0/sentinel.conf" target="_blank" rel="external">https://github.com/jipperinbham/redis/blob/sentinel-rename-command-3.0/sentinel.conf</a></p><p><strong>添加对rename操作支持(支持config以及slaveof 的patch)</strong><br>一共存在两个分支，支持全局rename以及按照cluster的rename配置<br><a href="https://github.com/antirez/redis/pull/2068/commits/78b5be6833d627de96136cc41896b7d01bceaaed" target="_blank" rel="external">https://github.com/antirez/redis/pull/2068/commits/78b5be6833d627de96136cc41896b7d01bceaaed</a></p><p>去哪儿使用的方式是使用patch的方式禁用高危命令，这些高危名利只对哨兵机器开放。</p><p><strong>脚本调用超时</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[19809] 22 Mar 18:16:44.906 # +switch-master myredis 10.30.7.211 25379 10.30.7.212 25379</span><br><span class="line">[19809] 22 Mar 18:16:44.906 * +slave slave 10.30.7.213:25379 10.30.7.213 25379 @ myredis 10.30.7.212 25379</span><br><span class="line">[19809] 22 Mar 18:16:44.909 * +slave slave 10.30.7.211:25379 10.30.7.211 25379 @ myredis 10.30.7.212 25379</span><br><span class="line">[19809] 22 Mar 18:17:26.937 # -script-timeout /home/op/sentinel/reconfig.py 24081</span><br><span class="line">[19809] 22 Mar 18:18:57.183 # -script-timeout /home/op/sentinel/reconfig.py 24283</span><br></pre></td></tr></table></figure><p><strong>单个从库出现问题之后如何处理？？</strong></p><p><strong>订阅消息的地方如何处理？？</strong></p><h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><ul><li><a href="http://debugo.com/redis-sentinel/" target="_blank" rel="external">http://debugo.com/redis-sentinel/</a></li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GreenPlum安装</title>
      <link href="/2016-03-08-greenpluman-zhuang/"/>
      <url>/2016-03-08-greenpluman-zhuang/</url>
      <content type="html"><![CDATA[<h2 id="1、安装遇到的错误信息"><a href="#1、安装遇到的错误信息" class="headerlink" title="1、安装遇到的错误信息"></a>1、安装遇到的错误信息</h2><p><strong>Failed to insert port=40000</strong></p><p>解决方案：<br><a href="http://nessfishl11.blog.51cto.com/1640535/1640972" target="_blank" rel="external">http://nessfishl11.blog.51cto.com/1640535/1640972</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要原因是它是用ed编辑器（很古老的linux编辑器）来操作文件的，需要先安装才行</span><br><span class="line">ed安装包http://rpmfind.net/linux/rpm2html/search.php?query=ed</span><br><span class="line">rpm -ivh  ed-1.1-3.3.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="2、安装参考的资料"><a href="#2、安装参考的资料" class="headerlink" title="2、安装参考的资料"></a>2、安装参考的资料</h2><p><a href="http://my.oschina.net/Kenyon/blog/487572" target="_blank" rel="external">http://my.oschina.net/Kenyon/blog/487572</a><br><a href="http://www.cnblogs.com/dap570/p/greenplum_4node_install.html" target="_blank" rel="external">http://www.cnblogs.com/dap570/p/greenplum_4node_install.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>yum问题处理</title>
      <link href="/2016-03-03-yumwen-ti-chu-li/"/>
      <url>/2016-03-03-yumwen-ti-chu-li/</url>
      <content type="html"><![CDATA[<h2 id="1-yum安装失败处理"><a href="#1-yum安装失败处理" class="headerlink" title="1. yum安装失败处理"></a>1. yum安装失败处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://packages.cn-north-1.amazonaws.com.cn/2015.09/main/201509419456/x86_64/amzn-main/readline-devel-6.2-9.14.amzn1.x86_64.rpm?instance_id=i-91da0fa9&amp;region=cn-north-1: [Errno 14] PYCURL ERROR 22 - &quot;The requested URL returned error: 403 Forbidden&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">http://packages.cn-north-1.amazonaws.com.cn/2015.09/main/201509419456/x86_64/amzn-main/readline-devel-6.2-9.14.amzn1.x86_64.rpm?instance_id=i-91da0fa9&amp;region=cn-north-1: [Errno 14] PYCURL ERROR 22 - &quot;The requested URL returned error: 403 Forbidden&quot;</span><br></pre></td></tr></table></figure><p>处理方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>DNS 相关</title>
      <link href="/2016-02-16-dns-apixiu-gai/"/>
      <url>/2016-02-16-dns-apixiu-gai/</url>
      <content type="html"><![CDATA[<h2 id="1、使用dnspython进行DNS的修改API封装遇到的各种问题"><a href="#1、使用dnspython进行DNS的修改API封装遇到的各种问题" class="headerlink" title="1、使用dnspython进行DNS的修改API封装遇到的各种问题"></a>1、使用dnspython进行DNS的修改API封装遇到的各种问题</h2><p>使用dnspython模块进行DNS的修改，DNS的server搭建方式是使用Bind。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> !/usr/bin/env python</span><br><span class="line"> -*-coding:utf8 -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dns.update</span><br><span class="line"><span class="keyword">import</span> dns.query</span><br><span class="line"><span class="keyword">import</span> dns.tsigkeyring</span><br><span class="line"><span class="keyword">import</span> dns.rdatatype</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line">keyring = dns.tsigkeyring.from_text(&#123;</span><br><span class="line"><span class="string">'testkey'</span> : <span class="string">'yr8lRAyVpMNOrjd3BsKBlQ=='</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">update = dns.update.Update(<span class="string">'mysql.internal.test.com'</span>, keyring=keyring)</span><br><span class="line"></span><br><span class="line"> update.replace(<span class="string">'s4000i'</span>, <span class="number">60</span>, <span class="string">'A'</span>, <span class="string">'10.30.21.111'</span>)</span><br><span class="line">update.delete(<span class="string">'s4000i'</span>,<span class="string">'A'</span>, <span class="string">'10.30.21.111'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = dns.query.tcp(update, <span class="string">'10.30.8.227'</span>, timeout=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> response</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">traceback.print_exc()</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>keyname需要和named.conf配置文件中对应。</li><li>Update的参数是Domain</li><li>update.replace第一个参数是主机名</li></ul><p><strong>问题</strong></p><ul><li>Key名称错误</li></ul><p>named-denied.log日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16-Feb-2016 15:50:38.433 security: error: client 10.30.6.49#42571:</span><br><span class="line">request has invalid signature: TSIG keyname: tsig verify failure (BADKEY)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;dns_test.py&quot;, line 22, in &lt;module&gt;</span><br><span class="line">response = dns.query.tcp(update, &apos;10.30.8.227&apos;, timeout=10)</span><br><span class="line">File &quot;/usr/local/lib/python2.6/site-packages/dns/query.py&quot;, line 323, in tcp</span><br><span class="line">one_rr_per_rrset=one_rr_per_rrset)</span><br><span class="line">File &quot;/usr/local/lib/python2.6/site-packages/dns/message.py&quot;, line 790, in from_wire</span><br><span class="line">reader.read()</span><br><span class="line">File &quot;/usr/local/lib/python2.6/site-packages/dns/message.py&quot;, line 731, in read</span><br><span class="line">self._get_section(self.message.additional, adcount)</span><br><span class="line">File &quot;/usr/local/lib/python2.6/site-packages/dns/message.py&quot;, line 683, in _get_section</span><br><span class="line">self.message.first)</span><br><span class="line">File &quot;/usr/local/lib/python2.6/site-packages/dns/tsig.py&quot;, line 163, in validate</span><br><span class="line">raise PeerBadKey</span><br><span class="line">PeerBadKey</span><br></pre></td></tr></table></figure><p>原因在于Keyname指定不对。</p><ul><li>udp以及tcp的code状态为REFUSED</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id 41185</span><br><span class="line">opcode UPDATE</span><br><span class="line">rcode REFUSED</span><br><span class="line">flags QR RA</span><br><span class="line">;ZONE</span><br><span class="line">mysql.internal.test.com. IN SOA</span><br><span class="line">;PREREQ</span><br><span class="line">;UPDATE</span><br><span class="line">;ADDITIONAL</span><br></pre></td></tr></table></figure><p>原因在于allow-update的设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;mysql.internal.test.com&quot; IN &#123;</span><br><span class="line">type master;</span><br><span class="line">file &quot;mysql.internal.test.com.zone&quot;;</span><br><span class="line">allow-update &#123; key testkey; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>journal open failed: unexpected errorr 日志文件的错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">16-Feb-2016 16:11:04.313 update: info: client 10.30.6.49#26678:</span><br><span class="line">updating zone &apos;mysql.internal.test.com/IN&apos;: deleting rrset at &apos;s4000i.mysql.internal.test.com&apos; A</span><br><span class="line">16-Feb-2016 16:11:04.313 update: info: client 10.30.6.49#26678:</span><br><span class="line">updating zone &apos;mysql.internal.test.com/IN&apos;: adding an RR at &apos;s4000i.mysql.internal.test.com&apos; A</span><br><span class="line">16-Feb-2016 16:11:04.313 update: info: client 10.30.6.49#26678:</span><br><span class="line">updating zone &apos;mysql.internal.test.com/IN&apos;: error: journal open failed: unexpected error</span><br></pre></td></tr></table></figure><p>原因在于权限问题，修改/var/named/chroot/var/named目录权限为named.named。</p><p><strong>Demo参考代码</strong><br><a href="https://github.com/pexip/os-dnspython" target="_blank" rel="external">https://github.com/pexip/os-dnspython</a></p><h2 id="2、DNS-Server搭建"><a href="#2、DNS-Server搭建" class="headerlink" title="2、DNS Server搭建"></a>2、DNS Server搭建</h2><p>参考：<br><a href="http://blog.csdn.net/chen_jp/article/details/7855079" target="_blank" rel="external">http://blog.csdn.net/chen_jp/article/details/7855079</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-bind-dns-server-on-centos-6" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-install-the-bind-dns-server-on-centos-6</a></p><p>主从模式<br><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-private-network-dns-server-on-centos-7" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-private-network-dns-server-on-centos-7</a></p><p><strong>DNS的server进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/named -u named -4 -t /var/named/chroot</span><br></pre></td></tr></table></figure><p><strong>DNS本地缓存</strong></p><p>我们使用Dnsmasq完成机器本地的缓存，DNS的TTL时间设置为60秒。</p><p><a href="http://www.freeoa.net/osuport/servap/dnsmasq-use-intro-refer_2480.html" target="_blank" rel="external">http://www.freeoa.net/osuport/servap/dnsmasq-use-intro-refer_2480.html</a></p>]]></content>
      
      <categories>
          
          <category> DNS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GDB多进程调试</title>
      <link href="/2016-02-16-gdbduo-jin-cheng-diao-shi/"/>
      <url>/2016-02-16-gdbduo-jin-cheng-diao-shi/</url>
      <content type="html"><![CDATA[<h2 id="1、如何进行多进程调试"><a href="#1、如何进行多进程调试" class="headerlink" title="1、如何进行多进程调试"></a>1、如何进行多进程调试</h2><h3 id="1-1-代码"><a href="#1-1-代码" class="headerlink" title="1.1 代码"></a>1.1 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">6 </span>&#123;</span><br><span class="line"><span class="number">7</span>     <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="number">8</span>     <span class="keyword">int</span> status;</span><br><span class="line"><span class="number">9</span>     <span class="keyword">int</span> a;</span><br><span class="line"><span class="number">10</span>     <span class="keyword">int</span> b;</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span>     pid=fork();</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span>     <span class="keyword">if</span> (pid &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">15</span>         <span class="built_in">printf</span>(<span class="string">"fork error"</span>);</span><br><span class="line"><span class="number">16</span>         <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">17</span>     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">18</span>         <span class="comment">//child</span></span><br><span class="line"><span class="number">19</span>         <span class="built_in">printf</span>(<span class="string">"in child\n"</span>);</span><br><span class="line"><span class="number">20</span>         fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">21</span>         sleep(<span class="number">100</span>);</span><br><span class="line"><span class="number">22</span>         a = <span class="number">5</span>;</span><br><span class="line"><span class="number">23</span>         b = <span class="number">10</span>;</span><br><span class="line"><span class="number">24</span>         <span class="built_in">printf</span>(<span class="string">"sum=%d\n"</span>,a+b);</span><br><span class="line"><span class="number">25</span>         fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span>     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="number">28</span>         <span class="comment">//parent</span></span><br><span class="line"><span class="number">29</span>         <span class="built_in">printf</span>(<span class="string">"in parent\n"</span>);</span><br><span class="line"><span class="number">30</span>         fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="number">31</span>         <span class="keyword">if</span>(waitpid(pid, &amp;status,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">32</span>             <span class="built_in">printf</span>(<span class="string">"failed to wait"</span>);</span><br><span class="line"><span class="number">33</span>             <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">34</span>         &#125;</span><br><span class="line"><span class="number">35</span>     &#125;</span><br><span class="line"><span class="number">36</span>     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="number">37</span> &#125;</span><br></pre></td></tr></table></figure><p>对应的makefile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test:test.c</span><br><span class="line">gcc -g -c test.c</span><br><span class="line">gcc -o test test.o</span><br><span class="line">clean:</span><br><span class="line">rm -rf test</span><br><span class="line">rm -rf *.o</span><br></pre></td></tr></table></figure><p>默认设置下，在调试多进程时GDB只会调试主进程，但是GDB(&gt;V7.0)持多进程的分别以及同时调试，换句话说，GDB可以同时调试多个程序。只需要设置follow-fork-mode(默认值：parent)和detach-on-fork（默认值：on）即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) help set follow-fork-mode</span><br><span class="line">Set debugger response to a program call of fork or vfork.</span><br><span class="line">A fork or vfork creates a new process.  follow-fork-mode can be:</span><br><span class="line">parent  - the original process is debugged after a fork</span><br><span class="line">child   - the new process is debugged after a fork</span><br><span class="line">The unfollowed process will continue to run.</span><br><span class="line">By default, the debugger will follow the parent process.</span><br><span class="line"></span><br><span class="line">(gdb) help show detach-on-fork</span><br><span class="line">Show whether gdb will detach the child of a fork.</span><br><span class="line">Tells gdb whether to detach the child of a fork.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">follow-fork-mode          detach-on-fork   说明</span><br><span class="line">parent                   on               只调试主进程（GDB默认）</span><br><span class="line">child                     on               只调试子进程</span><br><span class="line">parent                   off              同时调试两个进程，gdb跟主进程，子进程block在fork位置</span><br><span class="line">child                     off              同时调试两个进程，gdb跟子进程，主进程block在fork位置</span><br></pre></td></tr></table></figure><h3 id="1-2-GDB调试"><a href="#1-2-GDB调试" class="headerlink" title="1.2 GDB调试"></a>1.2 GDB调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set detach-on-fork off</span><br><span class="line">(gdb) show detach-on-fork</span><br><span class="line">Whether gdb will detach the child of a fork is off.</span><br><span class="line">(gdb) l</span><br><span class="line">warning: Source file is more recent than executable.</span><br><span class="line">3       #include &lt;unistd.h&gt;</span><br><span class="line">4</span><br><span class="line">5       int main(void)</span><br><span class="line">6       &#123;</span><br><span class="line">7           pid_t pid;</span><br><span class="line">8           int status;</span><br><span class="line">9           int a;</span><br><span class="line">10          int b;</span><br><span class="line">11</span><br><span class="line">12          pid=fork();</span><br><span class="line">(gdb) b 14</span><br><span class="line">Breakpoint 1 at 0x400700: file test.c, line 14.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /home/guosong/opdir/20160216/test</span><br><span class="line">[New process 7638]</span><br><span class="line">Missing separate debuginfos, use: debuginfo-install glibc-2.17-55.93.amzn1.x86_64</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at test.c:14</span><br><span class="line">14          if (pid &lt; 0)&#123;</span><br><span class="line">Missing separate debuginfos, use: debuginfo-install glibc-2.17-55.93.amzn1.x86_64</span><br><span class="line">(gdb) p pid</span><br><span class="line">$1 = 7638</span><br></pre></td></tr></table></figure><p>默认是在parent进程中。</p><p><strong>切换到子进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info inferiors</span><br><span class="line">Num  Description       Executable</span><br><span class="line">2    process 9388      /home/guosong/opdir/20160216/test</span><br><span class="line">* 1    process 9356      /home/guosong/opdir/20160216/test</span><br><span class="line"></span><br><span class="line">(gdb) inferior 2</span><br><span class="line">[Switching to inferior 2 [process 9388] (/home/guosong/opdir/20160216/test)]</span><br><span class="line">[Switching to thread 2 (process 9388)]</span><br><span class="line"> 0  0x00007ffff7aecc7c in fork () from /lib64/libc.so.6</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at test.c:14</span><br><span class="line">warning: Source file is more recent than executable.</span><br><span class="line">14          if (pid &lt; 0)&#123;</span><br><span class="line">(gdb) n</span><br><span class="line">17          &#125;else if(pid == 0)&#123;</span><br><span class="line">(gdb) n</span><br><span class="line">19              printf(&quot;in child\n&quot;);</span><br><span class="line">(gdb) info inferiors</span><br><span class="line">Num  Description       Executable</span><br><span class="line">* 2    process 9388      /home/guosong/opdir/20160216/test</span><br><span class="line">1    process 9356      /home/guosong/opdir/20160216/test</span><br></pre></td></tr></table></figure><p><strong>再切换回去主进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) inferior 1</span><br><span class="line">[Switching to inferior 1 [process 9356] (/home/guosong/opdir/20160216/test)]</span><br><span class="line">[Switching to thread 1 (process 9356)]</span><br><span class="line"> 0  main () at test.c:33</span><br><span class="line">33                  exit(1);</span><br></pre></td></tr></table></figure><h2 id="2、参考资料"><a href="#2、参考资料" class="headerlink" title="2、参考资料"></a>2、参考资料</h2><ul><li><a href="http://blog.csdn.net/pbymw8iwm/article/details/7876797" target="_blank" rel="external">http://blog.csdn.net/pbymw8iwm/article/details/7876797</a></li></ul>]]></content>
      
      <categories>
          
          <category> GDB </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IO多路复用</title>
      <link href="/2016-01-28-ioduo-lu-fu-yong/"/>
      <url>/2016-01-28-ioduo-lu-fu-yong/</url>
      <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://segmentfault.com/a/1190000003063859?utm_source=Weibo&amp;utm_medium=shareLink&amp;utm_campaign=socialShare&amp;from=timeline&amp;isappinstalled=0" target="_blank" rel="external">Linux IO模式及 select、poll、epoll详解</a></p><p><strong>select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p>]]></content>
      
      <categories>
          
          <category> Unix </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>redis相关链接</title>
      <link href="/2016-01-15-redisxiang-guan-lian-jie/"/>
      <url>/2016-01-15-redisxiang-guan-lian-jie/</url>
      <content type="html"><![CDATA[<h1 id="Redis-AOF相关"><a href="#Redis-AOF相关" class="headerlink" title="Redis AOF相关"></a>Redis AOF相关</h1><ol><li><a href="http://idning.github.io/redis-aof-replay.html#aof-replay" target="_blank" rel="external">AOF Replay</a></li><li><a href="http://www.cnblogs.com/daoluanxiaozi/p/3664922.html" target="_blank" rel="external">AOF 代码详解</a></li></ol>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql大小参数设置</title>
      <link href="/2016-01-05-mysqlda-xiao-can-shu-she-zhi/"/>
      <url>/2016-01-05-mysqlda-xiao-can-shu-she-zhi/</url>
      <content type="html"><![CDATA[<h2 id="MySQL5-5及其以下在同步的时候对lower-case-table-names有比较严格限制"><a href="#MySQL5-5及其以下在同步的时候对lower-case-table-names有比较严格限制" class="headerlink" title="MySQL5.5及其以下在同步的时候对lower_case_table_names有比较严格限制"></a>MySQL5.5及其以下在同步的时候对lower_case_table_names有比较严格限制</h2><p>&gt;<br>It is strongly recommended that you always use the same setting for the lower_case_table_names system variable on both master and slave. In particular, when a case-sensitive file system is used, setting this variable to 1 on the slave, but to a different value on the master, can cause two types of problems: Names of databases are not converted to lowercase; in addition, when using row-based replication names of tables are also not converted. Either of these problems can cause replication to fail. This is a known issue, which is fixed in MySQL 5.6.</p><p>否则会出现同步错误：<br>&gt;<br>Last_SQL_Errno: 1146<br>Last_SQL_Error: Error executing row event: ‘Table’ 10futu.commentAZXI’ doesn’t exist</p><p><a href="http://dev.mysql.com/doc/refman/5.5/en/replication-features-variables.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.5/en/replication-features-variables.html</a></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pt-online-schema-change使用方法</title>
      <link href="/2015-12-29-pt-online-schema-changeshi-yong-fang-fa/"/>
      <url>/2015-12-29-pt-online-schema-changeshi-yong-fang-fa/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>经常使用pt-osc，需要哪些参数以及如何设置，这里给出个demo。</p><a id="more"></a><h2 id="1、封装的osc脚本"><a href="#1、封装的osc脚本" class="headerlink" title="1、封装的osc脚本"></a>1、封装的osc脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> !/bin/sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">run_osc</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">MAXSTER_IP=<span class="string">"xxx"</span></span><br><span class="line">PORT=xxx</span><br><span class="line"></span><br><span class="line">DB=<span class="string">"sxxx"</span></span><br><span class="line">TB=<span class="string">"cc_oxxx"</span></span><br><span class="line">SQL=<span class="string">"change order_type order_type tinyint nxxxx</span></span><br><span class="line"><span class="string">MAX_LAG=10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">USER="</span>xxx<span class="string">"</span></span><br><span class="line"><span class="string">PASS="</span>xxx<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CHUNK_SIZE=200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">osc_file_log="</span><span class="variable">$&#123;DB&#125;</span>_<span class="variable">$&#123;TB&#125;</span>_osc.log<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">./pt-online-schema-change --host=<span class="variable">$&#123;MAXSTER_IP&#125;</span> \</span></span><br><span class="line"><span class="string">--port=<span class="variable">$&#123;PORT&#125;</span> --user=<span class="variable">$&#123;USER&#125;</span>  --password=<span class="variable">$&#123;PASS&#125;</span> --charset=utf8 \</span></span><br><span class="line"><span class="string">--alter="</span><span class="variable">$&#123;SQL&#125;</span><span class="string">"  --max-lag=<span class="variable">$&#123;MAX_LAG&#125;</span> \</span></span><br><span class="line"><span class="string">--recursion-method=dsn=D=test,t=dsns \</span></span><br><span class="line"><span class="string">--no-check-replication-filters  \</span></span><br><span class="line"><span class="string">--print --progress=time,1 --statistics \</span></span><br><span class="line"><span class="string">--chunk-size=<span class="variable">$&#123;CHUNK_SIZE&#125;</span> --check-interval 5  \</span></span><br><span class="line"><span class="string">--max-load Threads_running=140,Threads_connected=600 \</span></span><br><span class="line"><span class="string">--critical-load Threads_running=140,Threads_connected=800\</span></span><br><span class="line"><span class="string">--set-vars="</span>binlog_format=row<span class="string">" \</span></span><br><span class="line"><span class="string">D=<span class="variable">$&#123;DB&#125;</span>,t=<span class="variable">$&#123;TB&#125;</span> --execute  &gt; <span class="variable">$&#123;osc_file_log&#125;</span> 2&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">run_osc</span></span><br></pre></td></tr></table></figure><h3 id="2、-1366错误"><a href="#2、-1366错误" class="headerlink" title="2、 1366错误"></a>2、 1366错误</h3><p>遇到1366错误，修改osc源码进行或护额</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  Completely ignore these error codes.</span><br><span class="line"><span class="keyword">my</span> %ignore_code = (</span><br><span class="line"> add by guosong</span><br><span class="line"><span class="string">1366 =&gt;</span> <span class="number">1</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql全文索引</title>
      <link href="/2015-12-23-mysqlquan-wen-suo-yin/"/>
      <url>/2015-12-23-mysqlquan-wen-suo-yin/</url>
      <content type="html"><![CDATA[<h2 id="0、全文索引"><a href="#0、全文索引" class="headerlink" title="0、全文索引"></a>0、全文索引</h2><p>说明全文索引使用情况，文件组织格式、使用方式等。<br><a id="more"></a></p><h2 id="1、全文索引"><a href="#1、全文索引" class="headerlink" title="1、全文索引"></a>1、全文索引</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_1.ibd</span><br><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_2.ibd</span><br><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_3.ibd</span><br><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_4.ibd</span><br><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_5.ibd</span><br><span class="line">FTS_000000000000004b_00000000000000a9_INDEX_6.ibd</span><br><span class="line">FTS_000000000000004b_BEING_DELETED_CACHE.ibd</span><br><span class="line">FTS_000000000000004b_BEING_DELETED.ibd</span><br><span class="line">FTS_000000000000004b_CONFIG.ibd</span><br><span class="line">FTS_000000000000004b_DELETED_CACHE.ibd</span><br><span class="line">FTS_000000000000004b_DELETED.ibd</span><br></pre></td></tr></table></figure><p>之前没有对全文索引研究过，一开始对这个ibd文件感到奇怪，原来使用到全文索引。</p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-fulltext-index.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/innodb-fulltext-index.html</a></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql性能测试</title>
      <link href="/2015-12-21-mysqlxing-neng-ce-shi/"/>
      <url>/2015-12-21-mysqlxing-neng-ce-shi/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>介绍sysbench相关的使用方法。</p><h2 id="1、sysbench生成数据"><a href="#1、sysbench生成数据" class="headerlink" title="1、sysbench生成数据"></a>1、sysbench生成数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=/home/guosong/<span class="built_in">source</span>/sysbench/sysbench/tests/db/oltp.lua</span><br><span class="line">--mysql-host=10.30.21.179 --mysql-port=4000</span><br><span class="line">--mysql-user=superdba --mysql-password=nUSP9RAOXXqTrNq50rRw</span><br><span class="line">--mysql-table-engine=innodb --oltp-table-size=20000000</span><br><span class="line">--max-time=180 --num-threads=30 --max-requests=0 prepare</span><br></pre></td></tr></table></figure><p>直接使用otlp报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[guosong@dev-00 db]$ sysbench --<span class="built_in">test</span>=oltp <span class="built_in">help</span></span><br><span class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</span><br><span class="line">PANIC: unprotected error <span class="keyword">in</span> call to Lua API (cannot open oltp: No such file or directory)</span><br></pre></td></tr></table></figure><p>原因是这个0.5版本的特性，与0.4版本不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 000 0000  行数据 4.8G</span><br><span class="line">2 0000 0000 行数据 48G</span><br></pre></td></tr></table></figure><h2 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sysbench --num-threads=256 --<span class="built_in">test</span>=/home/guosong/<span class="built_in">source</span>/sysbench/sysbench/tests/db/oltp.lua</span><br><span class="line">--oltp-dist-type=uniform --oltp-table-name=sbtest_1</span><br><span class="line">--max-requests=0 --max-time=720</span><br><span class="line">--mysql-host=shangcheng-online-s1-d0.db --mysql-port=3306</span><br><span class="line">--mysql-user=dba --mysql-password=xxxxxx</span><br><span class="line">--mysql-db=sbtest --mysql-table-engine=INNODB</span><br><span class="line">--db-driver=mysql --oltp-point-selects=1</span><br><span class="line">--oltp-simple-ranges=0</span><br><span class="line">--oltp-sum-ranges=0</span><br><span class="line">--oltp-order-ranges=0</span><br><span class="line">--oltp-distinct-ranges=0</span><br><span class="line">--oltp-skip-trx=on</span><br><span class="line">--oltp-read-only=on run</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th style="text-align:left">含义</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td>–oltp-simple-ranges</td><td style="text-align:left">Range size for range queries</td><td style="text-align:center">100</td></tr><tr><td>–oltp-sum-ranges</td><td style="text-align:left">Number of SUM range queries in a single transaction</td><td style="text-align:center">1</td></tr><tr><td>–oltp-order-ranges</td><td style="text-align:left">Number of ORDER range queries in a single transaction</td><td style="text-align:center">1</td></tr><tr><td>–oltp-distinct-ranges</td><td style="text-align:left">Number of DISTINCT range queries in a single 1 transaction</td><td style="text-align:center">1</td></tr><tr><td>–oltp-skip-trx</td><td style="text-align:left">Omit BEGIN/COMMIT statements, i.e. run the same queries as the test would normally run but without off using transactions.</td><td style="text-align:center">off</td></tr><tr><td>–oltp-read-only</td><td style="text-align:left">Read-only mode. No UPDATE, DELETE or INSERT queries off will be performed.</td><td style="text-align:center">off</td></tr></tbody></table><p><img src="/images/sysbench_demo.png" alt="../image/sysbench_demo.png"></p><h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><ul><li><a href="http://wiki.mikejung.biz/Benchmarking" target="_blank" rel="external">http://wiki.mikejung.biz/Benchmarking</a></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql_gtid实践</title>
      <link href="/2015-12-09-mysql-gtidshi-jian/"/>
      <url>/2015-12-09-mysql-gtidshi-jian/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>介绍GTID限制、在同步中断情况下处理方式、使用xtrabackup的方式等。</p><a id="more"></a><h2 id="1、GTID限制"><a href="#1、GTID限制" class="headerlink" title="1、GTID限制"></a>1、GTID限制</h2><p><a href="https://dev.mysql.com/doc/refman/5.6/en/replication-gtids-restrictions.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/replication-gtids-restrictions.html</a></p><p><strong>限制</strong>：</p><ul><li>CREATE TABLE … SELECT statements</li><li>Temporary tables</li><li>Preventing execution of unsupported statements.</li></ul><blockquote><p>sql_slave_skip_counter 不在支持</p></blockquote><ul><li>GTID mode and mysqldump</li><li>GTID mode and mysql_upgrade</li></ul><h2 id="2、在GTID下pt-slave-restart如何使用？"><a href="#2、在GTID下pt-slave-restart如何使用？" class="headerlink" title="2、在GTID下pt-slave-restart如何使用？"></a>2、在GTID下pt-slave-restart如何使用？</h2><p>对于操作用户的权限需求必须有SUPER privilege(s)权限。</p><h3 id="2-1、手动处理的方式："><a href="#2-1、手动处理的方式：" class="headerlink" title="2.1、手动处理的方式："></a>2.1、手动处理的方式：</h3><p><a href="http://imysql.cn/tag/gtid" target="_blank" rel="external">http://imysql.cn/tag/gtid</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>;</span><br><span class="line"><span class="keyword">set</span> gtid_next=<span class="string">'cc5b5f77-91a6-11e5-834b-02b39697b809:4500'</span>;</span><br><span class="line"><span class="keyword">begin</span>;<span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">set</span> gtid_next=<span class="string">"AUTOMATIC"</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2、pt-slave-restart使用方法"><a href="#2-2、pt-slave-restart使用方法" class="headerlink" title="2.2、pt-slave-restart使用方法"></a>2.2、pt-slave-restart使用方法</h3><p><a href="https://www.percona.com/doc/percona-toolkit/2.2/pt-slave-restart.html" target="_blank" rel="external">https://www.percona.com/doc/percona-toolkit/2.2/pt-slave-restart.html</a></p><p>&gt;<br>GLOBAL TRANSACTION IDS<br>As of Percona Toolkit 2.2.8, pt-slave-restart supports Global Transaction IDs introduced in MySQL 5.6.5. It’s important to keep in mind that:</p><blockquote><p>pt-slave-restart will not skip transactions when multiple replication threads are being used (slave_parallel_workers &gt; 0). pt-slave-restart does not know what the GTID event is of the failed transaction of a specific slave thread.<br>The default behavior is to skip the next transaction from the slave’s master. Writes can originate on different servers, each with their own UUID.<br>See –master-uuid.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pt-slave-restart -uroot -pxxx -S /home/guosong/mysql5627/tmp/mysql5627.sock</span><br></pre></td></tr></table></figure><p>通过PTDEBUG=1开启pt-slave-restart的日志，修改原有代码打印GTID_NEXT</p><h2 id="dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。"><a href="#dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。" class="headerlink" title="dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。"></a>dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。</h2><p><strong>RDS上从库出现错误需要跳过的处理方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL mysql.rds_skip_repl_error;</span><br></pre></td></tr></table></figure><p><strong>RDS kill连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> rds_kill(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><h2 id="dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。-1"><a href="#dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。-1" class="headerlink" title="dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。"></a>dev-00上我的pt-slave-restart，已经修改，不需要使用用户名和密码，只需要host以及port即可。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 42d27cbafc625665f68177fd142c0eec4f564361</span><br><span class="line">[guosong@dev-00 pt-tools]$ ./pt-slave-restart -h 10.30.7.220 -P 5627</span><br><span class="line">2015-12-09T16:26:41 P=5627,h=10.30.7.220 relay-bin.000012         448 1062</span><br><span class="line">  pt_slave_restart:5108 20978 SET GTID_NEXT=<span class="string">'cc5b5f77-91a6-11e5-834b-02b39697b809:38'</span></span><br></pre></td></tr></table></figure><h2 id="3、在GTID下xtrbackup如何备份？"><a href="#3、在GTID下xtrbackup如何备份？" class="headerlink" title="3、在GTID下xtrbackup如何备份？"></a>3、在GTID下xtrbackup如何备份？</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data1/mysql7500/etc/my7500.cnf --user=root --password=xxx /data1/backup/ --socket=/data1/mysql7500/tmp/mysql7500.sock</span><br><span class="line"></span><br><span class="line">innobackupex --defaults-file=/data1/mysql7500/etc/my7500.cnf --user=root --password=xx --apply-log /data1/backup/mysql7500</span><br></pre></td></tr></table></figure><p>查看xtrabackup_binlog_info 文件多一列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql-bin.000010        334810306       542ef021-9a64-11e5-bc49-025d3d22c211:1-24368</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://www.percona.com/blog/2013/05/09/how-to-create-a-new-or-repair-a-broken-gtid-based-slave-with-percona-xtrabackup/" target="_blank" rel="external">https://www.percona.com/blog/2013/05/09/how-to-create-a-new-or-repair-a-broken-gtid-based-slave-with-percona-xtrabackup/</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slave1 &gt; SET GLOBAL gtid_purged="c777888a-b6df-11e2-a604-080027635ef5:1-4";</span><br><span class="line">slave1 &gt; CHANGE MASTER TO MASTER_HOST="10.0.1.1",</span><br><span class="line">master_user="msandbox", master_password="msandbox", MASTER_AUTO_POSITION = 1;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux IO相关-iotop&amp;pidstat</title>
      <link href="/2015-12-07-linux-ioxiang-guan-iotop/"/>
      <url>/2015-12-07-linux-ioxiang-guan-iotop/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>上一篇介绍iostat相关使用说明，这里介绍iotop以及pidstat，发现使用最多io的进程以及线程。和之前写的<a href="#/blog/iotong-ji.html">IO统计</a>，那里使用dmesg -c命令，这次是python写的iotop工具。</p><p>&gt;<br>iotop  watches  I/O  usage information output by the Linux kernel (requires 2.6.20 or later) and displays a table of current I/O usage by processes or threads on the system.</p><p>可以看到进程以及线程的io情况。</p><a id="more"></a><h2 id="1、iotop"><a href="#1、iotop" class="headerlink" title="1、iotop"></a>1、iotop</h2><h3 id="1-1、基本使用"><a href="#1-1、基本使用" class="headerlink" title="1.1、基本使用"></a>1.1、基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop</span><br></pre></td></tr></table></figure><p><img src="/images/iotop.png" alt="iotop结果"></p><h3 id="1-2、-o参数"><a href="#1-2、-o参数" class="headerlink" title="1.2、-o参数"></a>1.2、-o参数</h3><blockquote><p>-o, –only<br>Only show processes or threads actually doing I/O, instead of showing all processes or threads.<br>This can be dynamically toggled by pressing o.</p></blockquote><p>只显示有IO操作的进程和线程，而不是所有的。通过按o键可以从iotop切换到这里，也可以显示添加。</p><p>&gt;<br>-p PID, –pid=PID<br>A list of processes/threads to monitor (all by default).</p><p>根据pid以及thread_id显示对应的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-db-009 ec2-user]<span class="comment"># pstree my4000 -p</span></span><br><span class="line">mysqld(3819)─┬─&#123;mysqld&#125;(3821)</span><br><span class="line">├─&#123;mysqld&#125;(3822)</span><br><span class="line">├─&#123;mysqld&#125;(3823)</span><br><span class="line">.......</span><br><span class="line">├─&#123;mysqld&#125;(3852)</span><br><span class="line">├─&#123;mysqld&#125;(3853)</span><br><span class="line">└─&#123;mysqld&#125;(3854)</span><br></pre></td></tr></table></figure><p><img src="/images/iotop_thread.png" alt="iotop_thread"></p><p>其他的功能参照man iotop功能。</p><h2 id="2、pidstat"><a href="#2、pidstat" class="headerlink" title="2、pidstat"></a>2、pidstat</h2><h3 id="2-1、基本使用"><a href="#2-1、基本使用" class="headerlink" title="2.1、基本使用"></a>2.1、基本使用</h3><h3 id="2-2、针对单个进程的io"><a href="#2-2、针对单个进程的io" class="headerlink" title="2.2、针对单个进程的io"></a>2.2、针对单个进程的io</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-db-009 ec2-user]<span class="comment"># pidstat -d -p 3819 1</span></span><br><span class="line">Linux 4.1.7-15.23.amzn1.x86_64 (mysql-db-009)   12/07/2015      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">11:30:33 AM       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command</span><br><span class="line">11:30:34 AM      3819    536.00   9316.00      0.00  mysqld</span><br><span class="line">11:30:35 AM      3819    752.00  14140.00      0.00  mysqld</span><br><span class="line">11:30:36 AM      3819    628.00   3556.00      0.00  mysqld</span><br><span class="line">11:30:37 AM      3819    724.00   6268.00      0.00  mysqld</span><br><span class="line">11:30:38 AM      3819   1348.00   8552.00      0.00  mysqld</span><br><span class="line">11:30:39 AM      3819    500.00  15776.00      0.00  mysqld</span><br><span class="line">11:30:40 AM      3819    720.00   7180.00      0.00  mysqld</span><br><span class="line">11:30:41 AM      3819    696.00  15932.00      0.00  mysqld</span><br><span class="line">11:30:42 AM      3819   1112.00   8064.00      0.00  mysqld</span><br><span class="line">11:30:43 AM      3819    824.00  16348.00      0.00  mysqld</span><br><span class="line">11:30:44 AM      3819    740.00   6044.00      0.00  mysqld</span><br><span class="line">11:30:45 AM      3819   1704.00   2688.00      0.00  mysqld</span><br><span class="line">11:30:46 AM      3819    536.00   6892.00      0.00  mysqld</span><br></pre></td></tr></table></figure><h3 id="2-3、"><a href="#2-3、" class="headerlink" title="2.3、"></a>2.3、</h3>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux IO相关-iostat</title>
      <link href="/2015-12-07-iostat/"/>
      <url>/2015-12-07-iostat/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>给出Linux各种IO相关的工具介绍，例如iostat、dstat、iotop、pidstat等</p><a id="more"></a><h2 id="1、iostat"><a href="#1、iostat" class="headerlink" title="1、iostat"></a>1、iostat</h2><h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><p>这篇博客介绍的非常不错，推荐<a href="http://www.orczhou.com/index.php/2010/03/iostat-detail/" target="_blank" rel="external">http://www.orczhou.com/index.php/2010/03/iostat-detail/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -d -k 1 10</span><br></pre></td></tr></table></figure><p>参数 -d 表示，显示设备（磁盘）使用状态；-k某些使用block为单位的列强制使用Kilobytes为单位；1 10表示，数据显示每隔1秒刷新一次，共显示10次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-db-009 ec2-user]<span class="comment"># iostat -d -k 1 10</span></span><br><span class="line">Linux 4.1.7-15.23.amzn1.x86_64 (mysql-db-009)   12/07/2015      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">xvda              1.47        21.85         1.19      76408       4156</span><br><span class="line">xvdc              0.12         0.48         0.00       1693          4</span><br><span class="line">xvdb            714.66      3094.85      6764.03   10824977   23658812</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">xvda              0.00         0.00         0.00          0          0</span><br><span class="line">xvdc              0.00         0.00         0.00          0          0</span><br><span class="line">xvdb            577.00      1268.00      6428.00       1268       6428</span><br></pre></td></tr></table></figure><p><font color="blue"><strong>tps</strong></font><br>该设备每秒的传输次数。一次传输意味着一次IO，多个逻辑请求可能会被合并成一次IO请求。一次传输请求的大小是未知的。</p><blockquote><p>Indicate  the  number of transfers per second that were issued to the device. A transfer is an I/O request to the device. Multiple logical requests can be combined into a single I/O request to the device. A transfer is of indeterminate size.</p></blockquote><p><font color="blue"> <strong>kB_read/s:</strong> </font> 每秒从设备（drive expressed）读取的数据量</p><p><font color="blue"> <strong>kB_wrtn/s:</strong> </font> 每秒从设备（drive expressed）写入的数据量</p><p><font color="blue"> <strong>kB_read/s:</strong> </font> 每秒读取的数据量总量</p><p><font color="blue"> <strong>kB_wrtn/s:</strong> </font> 每秒写入的数据量总量</p><p>&gt;<br>kB_read/s<br>Indicate the amount of data read from the device expressed in kilobytes per second.<br>kB_wrtn/s<br>Indicate the amount of data written to the device expressed in kilobytes per second.<br>kB_read<br>The total number of kilobytes read.<br>kB_wrtn<br>The total number of kilobytes written.</p><p>通过参数-m可以将KB转换为MB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-db-009 ec2-user]<span class="comment"># iostat -d -m 1 10</span></span><br><span class="line">Linux 4.1.7-15.23.amzn1.x86_64 (mysql-db-009)   12/07/2015      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps    MB_read/s    MB_wrtn/s    MB_read    MB_wrtn</span><br><span class="line">xvda              1.26         0.02         0.00         77          4</span><br><span class="line">xvdc              0.10         0.00         0.00          1          0</span><br><span class="line">xvdb            705.84         2.70         7.04      11759      30646</span><br></pre></td></tr></table></figure><h3 id="1-2-x参数"><a href="#1-2-x参数" class="headerlink" title="1.2 -x参数"></a>1.2 -x参数</h3><p>使用-x参数可以获取更多统计信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-db-009 ec2-user]<span class="comment"># iostat -d -x -m 1 10</span></span><br><span class="line">Linux 4.1.7-15.23.amzn1.x86_64 (mysql-db-009)   12/07/2015      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rMB/s    wMB/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">xvda              0.00     0.07    0.89    0.09     0.01     0.00    30.27     0.00    0.98   0.37   0.04</span><br><span class="line">xvdc              0.00     0.00    0.07    0.00     0.00     0.00     7.99     0.00    0.40   0.40   0.00</span><br><span class="line">xvdb              0.00   335.16  159.50  537.92     2.35     7.69    29.50     0.54    0.77   0.55  38.57</span><br></pre></td></tr></table></figure><p><font color="blue"> <strong>rrqm/s:</strong> </font> 每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）</p><p><font color="blue"> <strong>wrqm/s:</strong> </font>：每秒这个设备相关的写入请求有多少被Merge了。</p><p><font color="blue"> <strong>r/s</strong> </font>和<font color="blue"> <strong>w/s</strong> </font>合起来就IOPS。</p><p>&gt;<br>rrqm/s<br>The number of read requests merged per second that were queued to the device.<br>&gt;<br>wrqm/s<br>The number of write requests merged per second that were queued to the device.</p><blockquote><p>r/s<br>The number of read requests that were issued to the device per second.</p><p>w/s<br>The number of write requests that were issued to the device per second.</p></blockquote><p><font color="blue"> <strong>await：</strong> </font>每一个IO请求的处理的平均时间（单位是毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。</p><p><font color="blue"> <strong>avgrq-sz：</strong> </font>块设备的平均大小。</p><p><font color="blue"> <strong>avgqu-sz：</strong> </font>IO队列大小。</p><p><font color="blue"> <strong>svctm：</strong> </font><font color="red">废弃</font>。</p><p><font color="blue"> <strong>%util:</strong></font>在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的%util = 0.8/1 = 80%，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是100%表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</p><blockquote><p>avgrq-sz<br>The average size (in sectors) of the requests that were issued to the device.</p><p>avgqu-sz<br>The average queue length of the requests that were issued to the device.</p><p>svctm<br>The average service time (in milliseconds) for I/O requests that were issued to the device. Warning! Do not trust this field any more. This field  will be removed in a future sysstat version.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">util = (r/s + w/s)*svctm/1000</span><br></pre></td></tr></table></figure><p><strong>util的数值不准确</strong><br><a href="http://yoshinorimatsunobu.blogspot.jp/2009/07/iostat-rs-ws-svctm-util-on-linux.html" target="_blank" rel="external">http://yoshinorimatsunobu.blogspot.jp/2009/07/iostat-rs-ws-svctm-util-on-linux.html</a></p>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Glib Thread篇</title>
      <link href="/2015-12-05-glib-threadpian/"/>
      <url>/2015-12-05-glib-threadpian/</url>
      <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在mydumper以及myloader中使用到GLib库的功能，前面分析mydumper源码的时候，已经给出参数解析的demo以及mydumper实现过程。mysqldump以及mydumper最大的不同之处就mydumper是多线程的，效率更高。本文就是研究这个多线程是如何实现的，并给出相关demo进行源码的测试以及验证。</p><a id="more"></a><h2 id="2、GLIB的多线程"><a href="#2、GLIB的多线程" class="headerlink" title="2、GLIB的多线程"></a>2、GLIB的多线程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> include &lt;glib.h&gt;</span><br><span class="line"></span><br><span class="line"> define MAX_THREAD <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function">gpointer <span class="title">gthread_func</span><span class="params">(gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">gint i, num;</span><br><span class="line"></span><br><span class="line">num = GPOINTER_TO_INT(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_THREAD - num; i++)</span><br><span class="line">g_printf(<span class="string">"Thread No. %d, of %d\n"</span>, i, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">gint <span class="title">main</span><span class="params">(gint argc, gchar* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GThread *my_thread[MAX_THREAD];</span><br><span class="line">gint i;</span><br><span class="line"></span><br><span class="line">g_printf(<span class="string">"Create thread.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX_THREAD; i++)</span><br><span class="line">&#123;</span><br><span class="line">my_thread[i] = g_thread_new(<span class="literal">NULL</span>, gthread_func,</span><br><span class="line">GINT_TO_POINTER(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_printf(<span class="string">"End create thread.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; MAX_THREAD; i++)</span><br><span class="line">&#123;</span><br><span class="line">g_thread_join(my_thread[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_printf(<span class="string">"End join thread.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参照<a href="http://www.d3.dion.ne.jp/~fut_nis/Other/GLib_program_04.pdf" target="_blank" rel="external">http://www.d3.dion.ne.jp/~fut_nis/Other/GLib_program_04.pdf</a>进行实现，并对其中已经废弃的函数进行修改。</p><p>对应的makefile文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test:test.c</span><br><span class="line">gcc -Wdeprecated-declarations -g -c test.c -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  -lglib-2.0</span><br><span class="line">gcc -o test test.o -pthread -lgthread-2.0 -lglib-2.0</span><br></pre></td></tr></table></figure><p>其中由于使用到gthread模块，因此需要单独添加。</p><h2 id="3、任务多线程实现demo"><a href="#3、任务多线程实现demo" class="headerlink" title="3、任务多线程实现demo"></a>3、任务多线程实现demo</h2><p>Demo的链接<a href="https://github.com/dolphinsboy/code_for_c/blob/master/glib/gthread_multi_job.c" target="_blank" rel="external">https://github.com/dolphinsboy/code_for_c/blob/master/glib/gthread_multi_job.c</a></p><p>主要包含三个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 处理队列中的任务</span><br><span class="line">process_queue</span><br><span class="line"></span><br><span class="line"># 添加任务</span><br><span class="line">add_job</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="4、静态库编译"><a href="#4、静态库编译" class="headerlink" title="4、静态库编译"></a>4、静态库编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnome.org/pub/gnome/sources/glib/2.22/glib-2.22.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf glib-2.22.5.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> glib-2.22.5</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/glib --<span class="built_in">enable</span>-static --<span class="built_in">disable</span>-shared CFLAGS=<span class="string">"-static"</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>说明：</p><p>–prefix指定安装到目录，不要与系统中已安装的glib混淆。</p><p>–enable-static –disable-shared CFLAGS=”-static”使得编译出静态库.a文件。</p><p>重点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=/usr/<span class="built_in">local</span>/glib/lib/pkgconfig:<span class="variable">$PKG_CONFIG_PATH</span></span><br><span class="line"></span><br><span class="line">pkg-config --libs glib-2.0 gthread-2.0</span><br><span class="line"></span><br><span class="line">pkg-config --cflags glib-2.0 gthread-2.0</span><br></pre></td></tr></table></figure><p>说明：</p><p>第一句使用是让pkg-config找到新编译的glib库及头文件，后两句是通过pkg-config分别获取头文件地址和库地址。</p><p>此外，也可将–prefix/lib/pkgconfig下的文件拷贝到/lib/pkgconfig下，让pkg-config自动搜索到，但会覆盖之前已安装在标准目录下的的glib的相关文件。</p>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Graphite</title>
      <link href="/2015-11-10-graphite/"/>
      <url>/2015-11-10-graphite/</url>
      <content type="html"><![CDATA[<h2 id="1、Graphite安装"><a href="#1、Graphite安装" class="headerlink" title="1、Graphite安装"></a>1、Graphite安装</h2><p>主要是参考<a href="http://graphite.wikidot.com/installation" target="_blank" rel="external">http://graphite.wikidot.com/installation</a>，不过中间遇到很多问题，主要列出这些问题。</p><p>使用源码安装，安装AWS EC2上，python版本为2.6，话说在AWS上安装软件还是非常方便的，至少不应考虑被墙的问题。</p><a id="more"></a><ul><li>Django版本：安装Django版本过高，而使用的python2.6版本，最终安装1.5.0版本</li><li>忘记执行check-dependencies.py进行环境检查了，中间装了一堆的python包</li><li>安装最新版没有manage.py脚本，在/opt/graphite/webapp/graphite目录下没有找到这个脚本，通过pip安装获取到</li><li><p>apache的配置问题，在apachep配置目录/etc/httpd/conf.d/下，单独创建一个graphite-vhost.conf，内容是从原始配置中拷贝过来，只修改VirtualHost，其他都没有修改：</p></li><li><p>Django的错误：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey</span><br><span class="line">ImportError: No module named fields</span><br><span class="line"></span><br><span class="line"> 修改源码：</span><br><span class="line">/usr/local/lib/python2<span class="number">.7</span>/site-packages/django_tagging<span class="number">-0.4</span>-py2<span class="number">.7</span>.egg/tagging/models.py</span><br><span class="line"></span><br><span class="line"> <span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.generic <span class="keyword">import</span> GenericForeignKey</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:9090&gt;</span><br><span class="line">ServerName  10.30.xx.xx:9090</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>一开始发现访问不了，原来还需要在/etc/httpd/conf/httpd.conf 文件，添加一行<strong>Listen 9090</strong>才可以。</p><ul><li>运行如下命令发现无法找到django-admin.py文件，处理方法是在~/.bashrc中设置PATH：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/run-graphite-devel-server.py --port=9000 /opt/graphite/</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/lib/python2.6/site-packages/django/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ul><li>配置过程中出现错误的话，可以多参照日志/opt/graphite/storage/log/webapp/error.log，这个路径在</li></ul><h2 id="2、Graphite入门介绍"><a href="#2、Graphite入门介绍" class="headerlink" title="2、Graphite入门介绍"></a>2、Graphite入门介绍</h2><p>推荐如下<a href="http://www.infoq.com/cn/articles/graphite-intro" target="_blank" rel="external">DevOps实战：Graphite监控上手指南</a></p><h2 id="3-Grafana"><a href="#3-Grafana" class="headerlink" title="3. Grafana"></a>3. Grafana</h2><p><img src="/images/grafana_demo.png" alt="demo"></p><p><strong>没有权限访问graphite</strong><br><a href="http://docs.grafana.org/installation/installation/" target="_blank" rel="external">http://docs.grafana.org/installation/installation/</a></p><p>修改权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header <span class="built_in">set</span> Access-Control-Allow-Origin <span class="string">"*"</span></span><br><span class="line">Header <span class="built_in">set</span> Access-Control-Allow-Methods <span class="string">"GET, OPTIONS"</span></span><br><span class="line">Header <span class="built_in">set</span> Access-Control-Allow-Headers <span class="string">"origin, authorization, accept"</span></span><br></pre></td></tr></table></figure><p>更好解决方案参照上面的链接。</p><h2 id="4-DEV-00"><a href="#4-DEV-00" class="headerlink" title="4. DEV-00"></a>4. DEV-00</h2><ul><li>启动graphite-carbon</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-00 graphite]# pwd</span><br><span class="line">/opt/graphite</span><br><span class="line">[root@dev-00 graphite]# ./bin/carbon-cache.py start</span><br></pre></td></tr></table></figure><ul><li>启动graphite-web</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-00 graphite]# pwd</span><br><span class="line">/opt/graphite</span><br><span class="line">[root@dev-00 graphite]# ./bin/run-graphite-devel-server.py --port=9000 /opt/graphite/</span><br></pre></td></tr></table></figure><ul><li>启动grafana</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-00 dashboards]# service grafan-server restart</span><br></pre></td></tr></table></figure><ul><li>grafana和MySQL结合</li></ul><p><a href="https://www.percona.com/blog/2016/02/29/graphing-mysql-performance-with-prometheus-and-grafana/" target="_blank" rel="external">https://www.percona.com/blog/2016/02/29/graphing-mysql-performance-with-prometheus-and-grafana/</a><br><a href="https://github.com/percona/grafana-dashboards" target="_blank" rel="external">https://github.com/percona/grafana-dashboards</a></p><h2 id="5-Grafana和Metric对应关系"><a href="#5-Grafana和Metric对应关系" class="headerlink" title="5. Grafana和Metric对应关系"></a>5. Grafana和Metric对应关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;service&#125;.&#123;p_name&#125;.&#123;port&#125;.&#123;role&#125;.&#123;node_id&#125;.&#123;metric&#125; &#123;value&#125; &#123;timestamp&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Graphite-web问题汇总"><a href="#6-Graphite-web问题汇总" class="headerlink" title="6. Graphite-web问题汇总"></a>6. Graphite-web问题汇总</h2><ul><li>perSecond函数bug导致图片无法显示</li></ul><p><a href="https://github.com/graphite-project/graphite-web/pull/1626" target="_blank" rel="external">https://github.com/graphite-project/graphite-web/pull/1626</a></p><p><code>这个问题的原因在于采集脚本出现问题，导致数据无法显示，准备使用tcollector进行改造(agent采集的方式进行)。</code></p><p>Grafana也是调用graphite的接口实现的，通过下面的graphite API接口可以看到问题所在:</p><p><a href="http://kan.culiu.org:9090/render/?width=1602&amp;height=745&amp;from=-15mins&amp;target=perSecond(mysql.shop.4000.m.rds.shangcheng-m1.com_select" target="_blank" rel="external">http://kan.culiu.org:9090/render/?width=1602&amp;height=745&amp;from=-15mins&amp;target=perSecond(mysql.shop.4000.m.rds.shangcheng-m1.com_select)</a>)</p>]]></content>
      
      <categories>
          
          <category> Graphite </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>redis内存使用情况统计</title>
      <link href="/2015-10-22-redisnei-cun-shi-yong-qing-kuang-tong-ji/"/>
      <url>/2015-10-22-redisnei-cun-shi-yong-qing-kuang-tong-ji/</url>
      <content type="html"><![CDATA[<h2 id="redis-rdb文件内存使用情况分析"><a href="#redis-rdb文件内存使用情况分析" class="headerlink" title="redis rdb文件内存使用情况分析"></a>redis rdb文件内存使用情况分析</h2><h3 id="生成rdb文件"><a href="#生成rdb文件" class="headerlink" title="生成rdb文件"></a>生成rdb文件</h3><p>通过bgsave命令生成rdb文件，如果存在rdb，则跳过此步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h xxx -p xxx bgsave</span><br></pre></td></tr></table></figure><h3 id="分析rdb文件"><a href="#分析rdb文件" class="headerlink" title="分析rdb文件"></a>分析rdb文件</h3><p>需安装rdb：点击此处连接<br><a href="https://github.com/sripathikrishnan/redis-rdb-tools#generate-memory-report" target="_blank" rel="external">redis-rdb-tools</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdb -c memory /var/redis/6379/dump.rdb &gt; memory.csv</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用上面的工具进行分析，分析结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">database,type,key,size_in_bytes,encoding,num_elements,len_largest_element</span><br><span class="line">0,set,&quot;uv_filter_151020_10005138312&quot;,1440523,hashtable,13975,32</span><br><span class="line">0,set,&quot;uv_filter_151021_100117706&quot;,1360332,hashtable,13074,32</span><br><span class="line">0,set,&quot;uv_filter_151020_1000329580&quot;,1284149,hashtable,12218,32</span><br><span class="line">0,set,&quot;uv_filter_151020_100030831&quot;,1228394,hashtable,11591,32</span><br><span class="line">0,set,&quot;uv_filter_151020_10007780250&quot;,1194260,hashtable,11208,32</span><br></pre></td></tr></table></figure><p>基于第4列进行汇总。按照上面的例子，前缀都是相同的，故需要进行合并。<br>线上的业务总共6个分片，每个rdb文件完后的结果为1G+，将这些文件上传到AWS S3上面。</p><h3 id="使用map-reduce服务数据分析"><a href="#使用map-reduce服务数据分析" class="headerlink" title="使用map-reduce服务数据分析"></a>使用map-reduce服务数据分析</h3><p>将如下程序（mapper.py、reducer.py、run.sh）放在hadoop服务器（data-dev-00）</p><p>map程序，分析上面的csv文件，获取k-v。</p><p>mapper.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> coding:utf8</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    qps_dic = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        infs = line[:<span class="number">-1</span>].split(<span class="string">','</span>)</span><br><span class="line">        _key =  infs[<span class="number">2</span>]</span><br><span class="line">        _key = _key.replace(<span class="string">"\""</span>, <span class="string">''</span>)</span><br><span class="line">        _key = <span class="string">''</span>.join(_key.split(<span class="string">':'</span>)[<span class="number">0</span>])</span><br><span class="line">        _key = <span class="string">'_'</span>.join(_key.split(<span class="string">'_'</span>)[:<span class="number">-1</span>])</span><br><span class="line">        _key = re.sub(<span class="string">r"\d+"</span>,<span class="string">"N"</span>, _key)</span><br><span class="line">        _value = int(infs[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">if</span> _key <span class="keyword">not</span> <span class="keyword">in</span> qps_dic:</span><br><span class="line">            qps_dic[_key] = <span class="number">0</span></span><br><span class="line">            qps_dic[_key] += _value</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> qps_dic.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s\t%d"</span>%(k,v)</span><br></pre></td></tr></table></figure><p>处理点：</p><ul><li>按照逗号分隔，对前缀进行处理，将数字类转换成特殊字符N</li><li>内部进行汇总，故构建一个字典统计</li><li>输出按照tab键分隔</li></ul><p>reduce程序进行结果合并</p><p>reducer.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> coding:utf8</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(_key, _value)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> _key + <span class="string">"\t"</span> + <span class="string">"\t"</span>.join(map(str,_value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    current_key = <span class="keyword">None</span></span><br><span class="line">    current_vals = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">        infs = line[:<span class="number">-1</span>].split(<span class="string">'\t'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> len(infs) == <span class="number">1</span>:</span><br><span class="line">            (_key,_value) = (infs[<span class="number">0</span>],<span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            (_key, _value) = infs</span><br><span class="line">        <span class="keyword">if</span> _key != current_key <span class="keyword">and</span> current_key != <span class="keyword">None</span>:</span><br><span class="line">            emit(current_key, current_vals)</span><br><span class="line">        current_vals = []</span><br><span class="line">        current_key = _key</span><br><span class="line">        _values = map(float,_value.split(<span class="string">'\t'</span>))</span><br><span class="line">        <span class="keyword">if</span> len(current_vals) == <span class="number">0</span>:</span><br><span class="line">            current_vals = _values</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current_vals = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(_values, current_vals)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> current_key != <span class="keyword">None</span>:</span><br><span class="line">            emit(current_key, current_vals)</span><br></pre></td></tr></table></figure><p>通过hadoop的streaming进行分析:</p><p>run.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> !/bin/sh</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/latest</span><br><span class="line">/home/hadoop/bin/hadoop jar /home/hadoop/contrib/streaming/hadoop-streaming.jar \</span><br><span class="line">-D mapred.reduce.tasks=5 \</span><br><span class="line">-D  mapred.job.map.capacity=100 \</span><br><span class="line">-input s3://logs.culiu.org/redis_analysis/\ <span class="comment">#s3 路径，这个可以自己上传路径修改</span></span><br><span class="line">-output s3://forall/yangyh/redis_analysis \ <span class="comment">#s3 路径，分析后保存路径</span></span><br><span class="line">-mapper <span class="string">"python mapper.py"</span> \</span><br><span class="line">-reducer <span class="string">"python reducer.py"</span> \</span><br><span class="line">-file <span class="string">"mapper.py"</span> \</span><br><span class="line">-file <span class="string">"reducer.py"</span> \</span><br></pre></td></tr></table></figure><h3 id="下载并分析结果"><a href="#下载并分析结果" class="headerlink" title="下载并分析结果"></a>下载并分析结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 cp s3://xx.xx ./ --recursive</span><br></pre></td></tr></table></figure><p>分析完得到的结果是5个部分： (自己汇总即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part-00000  part-00001  part-00002  part-00003  part-00004  _SUCCESS</span><br></pre></td></tr></table></figure><p>得到memory排序结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -rn -k2 part-0000*|awk &apos;&#123;print $1,$2/1024/1024,&quot;M&quot;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="针对购物车的统计"><a href="#针对购物车的统计" class="headerlink" title="针对购物车的统计"></a>针对购物车的统计</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>根据购物车里面的商品数目，按照100为步长给出如下统计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@dev-00 ~]$ aws s3 ls s3://forall/guosong/redis_analysis/users/</span><br><span class="line">2016-05-03 12:01:30          0</span><br><span class="line">2016-05-03 12:03:28     627442 user_100_200.log</span><br><span class="line">2016-05-03 12:03:48     136347 user_200_300.log</span><br><span class="line">2016-05-03 12:03:55      50394 user_300_400.log</span><br><span class="line">2016-05-03 12:04:01      23317 user_400_500.log</span><br><span class="line">2016-05-03 12:04:07      12995 user_500_600.log</span><br><span class="line">2016-05-03 12:04:13       7649 user_600_700.log</span><br><span class="line">2016-05-03 12:04:19       4831 user_700_800.log</span><br><span class="line">2016-05-03 12:04:25       3305 user_800_900.log</span><br><span class="line">2016-05-03 12:04:43       2318 user_900_1000.log</span><br></pre></td></tr></table></figure><p>user_100_200是指购物车里面的商品数据超过100且小于200的</p><h3 id="使用HIVE来进行操作"><a href="#使用HIVE来进行操作" class="headerlink" title="使用HIVE来进行操作"></a>使用HIVE来进行操作</h3><p>构建userid的表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show create table temp_user_id;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> <span class="string">`temp_user_id`</span>(</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">bigint</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> INPUTFORMAT</span><br><span class="line"><span class="string">'org.apache.hadoop.mapred.TextInputFormat'</span></span><br><span class="line">OUTPUTFORMAT</span><br><span class="line"><span class="string">'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'</span></span><br><span class="line">LOCATION</span><br><span class="line"><span class="string">'s3://XA:C....@forall/weihl/u/m'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>数据存放在S3上</strong></p><p>构建userid和内存之间的映射表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show create table temp_user_memory;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> <span class="string">`temp_user_memory`</span>(</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">bigint</span>,</span><br><span class="line"><span class="string">`msize`</span> <span class="keyword">double</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> INPUTFORMAT</span><br><span class="line"><span class="string">'org.apache.hadoop.mapred.TextInputFormat'</span></span><br><span class="line">OUTPUTFORMAT</span><br><span class="line"><span class="string">'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'</span></span><br><span class="line">LOCATION</span><br><span class="line"><span class="string">'s3://AKI....APiN@forall/weihl/u/i'</span>;</span><br></pre></td></tr></table></figure><p><strong>写HiveSQL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@bd-master-00 guosong]$ more r.sql</span><br><span class="line"><span class="keyword">use</span> tmp;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">sum</span>(t2.msize)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">distinct</span></span><br><span class="line">t1.user_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">temp_user_id t1) t3</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">temp_user_memory t2</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">t3.user_id = t2.user_id;</span><br></pre></td></tr></table></figure><p><strong>运行HiveSQL</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive -f sum.sql</span><br></pre></td></tr></table></figure><p>hive输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@bd-master-00 guosong]$ hive -f sum.sql</span><br><span class="line"></span><br><span class="line">Logging initialized using configuration in file:/etc/hive/conf.dist/hive-log4j.properties</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.043 seconds</span><br><span class="line">Query ID = hadoop_20160503181212_571d477d-2610-4a50-abf6-779eeb7b026a</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Starting Job = job_1460542469374_69993, Tracking URL = http://ip-10-30-24-68.cn-north-1.compute.internal:20888/proxy/application_1460542469374_69993/</span><br><span class="line">Kill Command = /usr/lib/hadoop/bin/hadoop job  -kill job_1460542469374_69993</span><br><span class="line">Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 1</span><br><span class="line">2016-05-03 18:12:46,948 Stage-1 map = 0%,  reduce = 0%</span><br><span class="line">2016-05-03 18:12:59,349 Stage-1 map = 13%,  reduce = 0%, Cumulative CPU 8.03 sec</span><br><span class="line">2016-05-03 18:13:02,455 Stage-1 map = 27%,  reduce = 0%, Cumulative CPU 11.29 sec</span><br><span class="line">2016-05-03 18:13:05,600 Stage-1 map = 40%,  reduce = 0%, Cumulative CPU 14.51 sec</span><br><span class="line">2016-05-03 18:13:07,666 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 16.76 sec</span><br><span class="line">2016-05-03 18:13:15,947 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 18.58 sec</span><br><span class="line">MapReduce Total cumulative CPU time: 18 seconds 580 msec</span><br><span class="line">Ended Job = job_1460542469374_69993</span><br><span class="line">MapReduce Jobs Launched:</span><br><span class="line">Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 18.58 sec   HDFS Read: 692 HDFS Write: 16 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 18 seconds 580 msec</span><br><span class="line">OK</span><br><span class="line">9.8070625201E10</span><br><span class="line">Time taken: 39.05 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>模拟MySQL IO线程</title>
      <link href="/2015-10-15-mo-ni-mysql-ioxian-cheng/"/>
      <url>/2015-10-15-mo-ni-mysql-ioxian-cheng/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>近期在看mydumper以及mysqlbinlog api的代码，发现MySQL从库同步这块也不是想象中那么复杂，故将其中的代码抽离出来，完成此篇博文。</p><p>在网上搜到沃趣科技的博客<a href="http://www.woqutech.com/?p=1757" target="_blank" rel="external">MYSQL BINLOG相关源码浅析</a>，值得推荐，本文重点在于IO线程这块。</p><a id="more"></a><h2 id="2-REGISTER-SLAVE"><a href="#2-REGISTER-SLAVE" class="headerlink" title="2. REGISTER_SLAVE"></a>2. REGISTER_SLAVE</h2><p>从库注册流程，需要发送包信息包括如下:<br><a href="http://dev.mysql.com/doc/internals/en/com-register-slave.html" target="_blank" rel="external">http://dev.mysql.com/doc/internals/en/com-register-slave.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1              [15] COM_REGISTER_SLAVE</span><br><span class="line">4              server-id</span><br><span class="line">1              slaves hostname length</span><br><span class="line">string[$len]   slaves hostname</span><br><span class="line">1              slaves user len</span><br><span class="line">string[$len]   slaves user</span><br><span class="line">1              slaves password len</span><br><span class="line">string[$len]   slaves password</span><br><span class="line">2              slaves mysql-port</span><br><span class="line">4              replication rank</span><br><span class="line">4              master-id</span><br></pre></td></tr></table></figure><p>对应的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_slave</span><span class="params">(MYSQL *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">uchar buf[<span class="number">1024</span>];</span><br><span class="line">uchar *pos = buf;</span><br><span class="line">uchar *unix_sock = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> default_start_pos = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> server_id = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//4bytes server-id</span></span><br><span class="line">int4store(pos, server_id); pos+= <span class="number">4</span>;</span><br><span class="line">pos= net_store_data(pos, (uchar*) hostname, <span class="built_in">strlen</span>(hostname));</span><br><span class="line">pos= net_store_data(pos, (uchar*) username, <span class="built_in">strlen</span>(username));</span><br><span class="line">pos= net_store_data(pos, (uchar*) passwd, <span class="built_in">strlen</span>(passwd));</span><br><span class="line">int2store(pos, (uint16) port);</span><br><span class="line"></span><br><span class="line">pos += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">int4store(pos, <span class="comment">/* rpl_recovery_rank */</span> <span class="number">0</span>);</span><br><span class="line">pos += <span class="number">4</span>;</span><br><span class="line">int4store(pos, <span class="number">0</span>);</span><br><span class="line">pos += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (simple_command(conn, COM_REGISTER_SLAVE, buf, (<span class="keyword">size_t</span>)(pos - buf), <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> ERR_FAIL;</span><br><span class="line"><span class="keyword">return</span> ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这步执行之后，只能在主库上看到一个连接。</p><h2 id="3-BinlogDUMP"><a href="#3-BinlogDUMP" class="headerlink" title="3.BinlogDUMP"></a>3.BinlogDUMP</h2><p>发起BinlogDump命令，需要包括如下信息：<br><a href="http://dev.mysql.com/doc/internals/en/com-binlog-dump.html" target="_blank" rel="external">http://dev.mysql.com/doc/internals/en/com-binlog-dump.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1              [12] COM_BINLOG_DUMP</span><br><span class="line">4              binlog-pos</span><br><span class="line">2              flags</span><br><span class="line">4              server-id</span><br><span class="line">string[EOF]    binlog-filename</span><br></pre></td></tr></table></figure><p>对应的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_dump</span><span class="params">(MYSQL *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *binlog_name = <span class="string">"mysql-bin.000002"</span>;</span><br><span class="line"><span class="keyword">size_t</span> offset = <span class="number">107</span>;</span><br><span class="line"></span><br><span class="line">uchar buf[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">char</span> *binlog_pos;</span><br><span class="line">ushort binlog_flags = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> server_id = mysql_thread_id(conn) <span class="number">-1000</span>;</span><br><span class="line"><span class="keyword">size_t</span> binlog_name_length;</span><br><span class="line">conn-&gt;status = MYSQL_STATUS_READY;</span><br><span class="line">int4store(buf, offset);</span><br><span class="line">int2store(buf + <span class="number">4</span>, binlog_flags);</span><br><span class="line">int4store(buf + <span class="number">6</span>, server_id);</span><br><span class="line"></span><br><span class="line">binlog_name_length = <span class="built_in">strlen</span>(binlog_name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(buf + <span class="number">10</span>, binlog_name, binlog_name_length);</span><br><span class="line"></span><br><span class="line">simple_command(conn, COM_BINLOG_DUMP, buf, binlog_name_length + <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面比较简单，设置固定的binlog同步点。</p><h2 id="4-读取EVENT"><a href="#4-读取EVENT" class="headerlink" title="4.读取EVENT"></a>4.读取EVENT</h2><h2 id="5-Demo"><a href="#5-Demo" class="headerlink" title="5.Demo"></a>5.Demo</h2><p>代码已经放在Git上<a href="https://github.com/dolphinsboy/code_for_c/blob/master/glib/binlog.c" target="_blank" rel="external"><strong>binlog.c</strong></a>，编译放在<a href="https://github.com/dolphinsboy/code_for_c/blob/master/glib/makefile" target="_blank" rel="external"><strong>makefile</strong></a>中。</p>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mydumper源码分析</title>
      <link href="/2015-10-13-mydumperyuan-ma-fen-xi/"/>
      <url>/2015-10-13-mydumperyuan-ma-fen-xi/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录和研究mydumper的过程，包括使用方法、源码研究以及源码中涉及的模块库函数。</p><a id="more"></a><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>使用的版本是<a href="https://launchpadlibrarian.net/185032423/mydumper-0.6.2.tar.gz" target="_blank" rel="external"><strong>mydumper-0.6.2</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Debug .</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>根据README需要安装一些依赖<br>遇到找不到hash.h头文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 mydumper_sina]<span class="comment"># make</span></span><br><span class="line">[ 20%] Building C object CMakeFiles/mydumper.dir/binlog.c.o</span><br><span class="line">In file included from /data1/mydumper_sina/binlog.c:27:</span><br><span class="line">/data1/guosong/mysql5616/include/sql_common.h:26:18: error: hash.h: No such file or directory</span><br><span class="line">In file included from /data1/mydumper_sina/binlog.c:27:</span><br><span class="line">/data1/guosong/mysql5616/include/sql_common.h:37: error: expected specifier-qualifier-list before ‘HASH’</span><br><span class="line">make[2]: *** [CMakeFiles/mydumper.dir/binlog.c.o] Error 1</span><br><span class="line">make[1]: *** [CMakeFiles/mydumper.dir/all] Error 2</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure><p>参照这个buglist解决这个问题：<br><a href="http://bugs.mysql.com/bug.php?id=70672" target="_blank" rel="external">http://bugs.mysql.com/bug.php?id=70672</a></p><p><strong>测试实例</strong><br>运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mydumper -h 10.75.19.81 -P 9001 -u <span class="built_in">test</span> -p test123 -B dbtest1 -T tb1 -o ./backup --lock-all-tables -L mydumper.test.log -v 3</span><br></pre></td></tr></table></figure><p>日志输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 mydumper-0.6.2]# more mydumper.test.log</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Connected to a MySQL server</span><br><span class="line">2015-10-13 16:33:26 [INFO] - TokuDB detected, creating dummy table for CS</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Started dump at: 2015-10-13 16:33:26</span><br><span class="line"></span><br><span class="line">2015-10-13 16:33:26 [INFO] - Written master status</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Written slave status</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 1 connected using MySQL connection ID 2368486</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 2 connected using MySQL connection ID 2368487</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 3 connected using MySQL connection ID 2368488</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 4 connected using MySQL connection ID 2368489</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 1 dumping schema for `dbtest1`.`tb1`</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 3 shutting down</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 1 shutting down</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Thread 2 shutting down</span><br><span class="line">2015-10-13 16:33:26 [INFO] - Finished dump at: 2015-10-13 16:33:26</span><br></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 mydumper-0.6.2]<span class="comment"># ll backup/</span></span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 181 Oct 13 16:33 dbtest1.tb1-schema.sql</span><br><span class="line">-rw-r--r-- 1 root root 525 Oct 13 16:33 dbtest1.tb1.sql</span><br><span class="line">-rw-r--r-- 1 root root 183 Oct 13 16:33 metadata</span><br></pre></td></tr></table></figure><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>使用glib库的g_option_context_parse进行参数解析，分为两个部分的参数，common_entries包括host、port、user、passwd等，entries包括其他的，例如output_dir等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g_option_group_add_entries(main_group, entries);</span><br><span class="line">g_option_group_add_entries(main_group, common_entries);</span><br><span class="line">g_option_context_set_main_group(context, main_group);</span><br><span class="line"><span class="keyword">if</span> (!g_option_context_parse(context, &amp;argc, &amp;argv, &amp;error)) &#123;</span><br><span class="line">    g_print (<span class="string">"option parsing failed: %s, try --help\n"</span>, error-&gt;message);</span><br><span class="line">    <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用glib解析参数的简单例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Programe options */</span></span><br><span class="line"><span class="keyword">char</span> *hostname = <span class="literal">NULL</span>;</span><br><span class="line">guint port = <span class="number">3306</span>;</span><br><span class="line"></span><br><span class="line">GOptionEntry common_entries[] =&#123;</span><br><span class="line">    &#123;<span class="string">"host"</span>, <span class="string">'h'</span>, <span class="number">0</span>, G_OPTION_ARG_STRING, &amp;hostname, <span class="string">"The host to connect to"</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"port"</span>, <span class="string">'P'</span>, <span class="number">0</span>, G_OPTION_ARG_INT, &amp;port, <span class="string">"TCP/IP port to connect to"</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    GError *error = <span class="literal">NULL</span>;</span><br><span class="line">    GOptionContext *context;</span><br><span class="line">    context = g_option_context_new(<span class="string">"glib option test"</span>);</span><br><span class="line">    </span><br><span class="line">    GOptionGroup *main_group = g_option_group_new(<span class="string">"main"</span>,</span><br><span class="line">        <span class="string">"Main options"</span>,</span><br><span class="line">        <span class="string">"Main options"</span>,<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    g_option_group_add_entries(main_group, common_entries);</span><br><span class="line">    g_option_context_set_main_group(context, main_group);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!g_option_context_parse(context, &amp;argc, &amp;argv, &amp;error))&#123;</span><br><span class="line">        g_print (<span class="string">"option parsing failed: %s, try --help\n"</span>, error-&gt;message);</span><br><span class="line">        <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    g_option_context_free(context);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makfile文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test:test.c</span><br><span class="line">gcc -g -c test.c -I/usr/include/glib<span class="number">-2.0</span> -I/usr/lib64/glib<span class="number">-2.0</span>/include</span><br><span class="line">gcc -o test test.o -lglib<span class="number">-2.0</span></span><br></pre></td></tr></table></figure><p>依赖的库以及包通过pkg-config命令获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 20151013]<span class="comment"># pkg-config --cflags --libs glib-2.0</span></span><br><span class="line">-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include  -lglib-2.0</span><br></pre></td></tr></table></figure><p>GLib主要参照这个博客<a href="https://www.ibm.com/developerworks/cn/linux/l-glib/" target="_blank" rel="external">浅析GLib</a></p><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>main函数除了参数解析部分以及根据参数创建相关目录外，核心功能如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (daemon_mode) &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> WITH_BINLOG</span></span><br><span class="line">        GThread *bthread= g_thread_create(binlog_thread, GINT_TO_POINTER(<span class="number">1</span>), FALSE, &amp;terror);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        start_scheduled_dump= g_async_queue_new();</span><br><span class="line">        GThread *ethread= g_thread_create(exec_thread, GINT_TO_POINTER(<span class="number">1</span>), FALSE, &amp;terror);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Run initial snapshot</span></span><br><span class="line">    run_snapshot(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    m1= g_main_loop_new(<span class="literal">NULL</span>, TRUE);</span><br><span class="line">    g_main_loop_run(m1);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    MYSQL *conn= create_main_connection();</span><br><span class="line">    start_dump(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="start-dump"><a href="#start-dump" class="headerlink" title="start_dump"></a>start_dump</h3><p>create_main_connection()函数是创建连接，并进行perl正则表达式的一些检测。<br>PCRE - Perl-compatible regular expressions, 因此关键还在于start_dump。</p><p>设置timeout时间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION wait_timeout = 2147483</span><br><span class="line">SET SESSION net_write_timeout = 2147483</span><br></pre></td></tr></table></figure><h4 id="长连接处理"><a href="#长连接处理" class="headerlink" title="长连接处理"></a>长连接处理</h4><blockquote><p>/<em> We check SHOW PROCESSLIST,<br>and if there’re queries larger than preset value,<br>we terminate the process.<br>This avoids stalling whole server with flush </em>/</p></blockquote><p>通过show processlist来判断是否有长查询，如果有长查询则退出dump，可以通过–long-query-guard加长时间，或者使用–kill-long-queries杀掉长查询。<br>大概代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> longquery= <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> killqueries= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (row[tcol] &amp;&amp; atoi(row[tcol])&gt;longquery) &#123;</span><br><span class="line">    <span class="keyword">if</span> (killqueries) &#123;</span><br><span class="line">        mysql_query(conn,p3=g_strdup_printf(<span class="string">"KILL %lu"</span>,atol(row[icol])))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//报错退出</span></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 指定<span class="keyword">lock</span>参数以及指定表参数</span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> %s <span class="keyword">READ</span></span><br><span class="line"></span><br><span class="line"> 没有指定<span class="keyword">lock</span>参数</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span></span><br></pre></td></tr></table></figure><h4 id="记录同步点"><a href="#记录同步点" class="headerlink" title="记录同步点"></a>记录同步点</h4><p>write_snapshot_info函数,执行SHOW MASTER STATUS 以及SHOW SLAVE STATUS</p><h4 id="产生3个消息队列"><a href="#产生3个消息队列" class="headerlink" title="产生3个消息队列"></a>产生3个消息队列</h4><p>(线程ready队列、任务队列、myisam表处理完毕队列)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conf.<span class="built_in">queue</span> = g_async_queue_new();</span><br><span class="line">conf.ready = g_async_queue_new();</span><br><span class="line">conf.unlock_tables= g_async_queue_new();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (n=<span class="number">0</span>; n&lt;num_threads; n++) &#123;</span><br><span class="line">    td[n].conf= &amp;conf;</span><br><span class="line">    td[n].thread_id= n+<span class="number">1</span>;</span><br><span class="line">    threads[n] = g_thread_create((GThreadFunc)process_queue,&amp;td[n],TRUE,<span class="literal">NULL</span>);</span><br><span class="line">    g_async_queue_pop(conf.ready);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dump-database"><a href="#dump-database" class="headerlink" title="dump_database"></a>dump_database</h4><p>两个GList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">innodb_tables :保存Innodb以及Tokudb的表</span><br><span class="line">non_innodb_table： 保存非Innodb表</span><br></pre></td></tr></table></figure><h4 id="4-6-dump-table"><a href="#4-6-dump-table" class="headerlink" title="4.6 dump_table"></a>4.6 dump_table</h4><h4 id="4-7-dump-schema"><a href="#4-7-dump-schema" class="headerlink" title="4.7 dump_schema"></a>4.7 dump_schema</h4><h4 id="4-8-process-queue"><a href="#4-8-process-queue" class="headerlink" title="4.8 process_queue"></a>4.8 process_queue</h4><p>线程的处理函数是process_queue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">threads[n] = g_thread_create((GThreadFunc)process_queue,&amp;td[n],TRUE,NULL);</span><br><span class="line"></span><br><span class="line">dump_table_data_file(MYSQL *conn, char *database, char *table, char *where, char *filename)</span><br><span class="line"></span><br><span class="line">guint64 rows_count = dump_table_data(conn, (FILE *)outfile, database, table, where, filename);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    ....</span><br><span class="line">    job=(struct job *)g_async_queue_pop(conf-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">switch</span> (job-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> JOB_DUMP:</span><br><span class="line">        ....</span><br><span class="line">        dump_table_data_file(thrconn, tj-&gt;database, tj-&gt;table, tj-&gt;where, tj-&gt;filename);</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">case</span> JOB_DUMP_NON_INNODB:</span><br><span class="line">        ....</span><br><span class="line">        dump_table_data_file(thrconn, tj-&gt;database, tj-&gt;table, tj-&gt;where, tj-&gt;filename);</span><br><span class="line">        <span class="keyword">case</span> JOB_SCHEMA:</span><br><span class="line">        ....</span><br><span class="line">        dump_schema_data(thrconn, sj-&gt;database, sj-&gt;table, sj-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型的生产者（主线程）消费者（子线程）模式，子线程会从任务队列里读取需要处理的表名字和表类型，再通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT /*!40001 SQL_NO_CACHE */ * FROM `dbtest1`.`tb1`</span><br></pre></td></tr></table></figure></p><p>读入数据各自写入到各自的文件。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><a href="http://www.hoterran.info/mydumper_usage" target="_blank" rel="external">MYDUMPER的使用和源代码分析</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-glib/" target="_blank" rel="external">浅析GLib</a></li><li><a href="http://gtk-doc-cn.googlecode.com/svn/docs/glib/index.html" target="_blank" rel="external">GLIB参考手册</a></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL-replication-listener</title>
      <link href="/2015-10-08-mysql-replication-listener/"/>
      <url>/2015-10-08-mysql-replication-listener/</url>
      <content type="html"><![CDATA[<h2 id="1-mysql-replication-listener背景介绍"><a href="#1-mysql-replication-listener背景介绍" class="headerlink" title="1. mysql-replication-listener背景介绍"></a>1. mysql-replication-listener背景介绍</h2><p>同步binlog的C++ API，最开始发现是在MHA作者的博客看到的<a href="http://yoshinorimatsunobu.blogspot.jp/2011/10/making-slave-pre-fetching-work-better.html" target="_blank" rel="external">Making slave pre-fetching work better with SSD</a> 加速SQL线程预取数据的作用。</p><p>本文记录自己测试过程以及一些源码分析。<br><a href="https://code.launchpad.net/mysql-replication-listener" target="_blank" rel="external">mysql-replication-listener代码位置</a></p><a id="more"></a><h2 id="2-安装编译"><a href="#2-安装编译" class="headerlink" title="2. 安装编译"></a>2. 安装编译</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>参照README文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MYSQL_DIR=&lt;path of mysql directory or libmysql&gt;</span><br><span class="line">cmake .</span><br><span class="line"> cmake -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line"> 便于熟悉代码进行调试，编译的时候可以加上这个参数</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>前提是已经装好cmake以及boost</p><h3 id="2-2-安装遇到的问题"><a href="#2-2-安装遇到的问题" class="headerlink" title="2.2 安装遇到的问题"></a>2.2 安装遇到的问题</h3><ul><li>error: ‘MYSQL_TYPE_TIME2’ was not declared in this scope<br>参照这个链接解决:<br><a href="https://bugs.mysql.com/bug.php?id=71681" target="_blank" rel="external">https://bugs.mysql.com/bug.php?id=71681</a></li></ul><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 examples]<span class="comment"># ./basic-1 file:///data1/guosong/mysql5616/data/mysql-bin.000001</span></span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Found event of <span class="built_in">type</span> 116 at 889193472</span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Endif</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> include <span class="string">"binlog_api.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> mysql::Binary_log;</span><br><span class="line"><span class="keyword">using</span> mysql::system::create_transport;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage: basic-2 &lt;uri&gt;"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Binary_log binlog(create_transport(argv[1]));</span><br><span class="line">binlog.connect();</span><br><span class="line">binlog.set_position(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">Binary_log_event *event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Start read event"</span>&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> result = binlog.wait_for_next_event(&amp;event);</span><br><span class="line"><span class="keyword">if</span> (result != ERR_OK)&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Endif"</span></span><br><span class="line">&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found event of type "</span></span><br><span class="line">&lt;&lt; event-&gt;get_event_type()</span><br><span class="line">&lt;&lt; <span class="string">" at "</span>&lt;&lt; binlog.get_position()</span><br><span class="line">&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑问: binlog.get_position()函数获取的位置输出太大，和实际位置不符合。</p><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h2><p><a href="http://backend.blog.163.com/blog/static/20229412620126311032126/" target="_blank" rel="external">MySQL binlog API 实现过程解析   http://backend.blog.163.com/blog/static/20229412620126311032126/</a></p><p><a href="https://docs.google.com/document/d/1kZt5qcAflc8aORC7SEly-LdPz0n1t-dXlTEu1_zO8vI/edit" target="_blank" rel="external">Google Doc Binlog API High-Level Description </a></p><p><a href="https://dev.mysql.com/worklog/task/?id=3283" target="_blank" rel="external">官方文档 WL#3283: C/C++ API to binary log</a><br>以下分析基于这篇博客，主要工作是格式化一下以及补充自己的理解。</p><h3 id="3-1-代码分析"><a href="#3-1-代码分析" class="headerlink" title="3.1 代码分析"></a>3.1 代码分析</h3><p>由<a href="https://code.launchpad.net/~mkindahl" target="_blank" rel="external">Mats Kindahl</a>开发的mysql Replication Listener是一个基于STL/Boost的C++动态库，它提供了一组api函数可以从本地的binlog文件，或则通过网络方式获取binlog文件的具体内容。 mysql Replication Listener获取到的最小单位是binlog event，即mysql执行各种操作所产生的事件：</p><ul><li>Query event</li><li>Rotate event</li><li>Format event</li><li>Table map event</li></ul><p>使用binlog api之前首先需要创建一个连接，输入的参数有两种类型：</p><ul><li>1、本地binlog文件，形如：file:///path/to/binlog/file</li><li>2、mysql的服务器：形如：mysql://username[:password]@ip:port<br>两类参数分别使用了不同的过程来获取binlog event。分别对这两种实现进行说明.</li></ul><h4 id="3-1-1-读取本地binlog文件的实现"><a href="#3-1-1-读取本地binlog文件的实现" class="headerlink" title="3.1.1 读取本地binlog文件的实现"></a>3.1.1 读取本地binlog文件的实现</h4><p>src/file_driver.cpp文件中封装了对本地文件的全部操作过程。</p><ul><li><strong>1.connect()</strong></li></ul><p>连接过程的原理是，通过判断文件的头四个个字节是不是{0xfe, 0x62, 0x69, 0x6e}来判断输入的文件是不是一个binary log文件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Binlog_file_driver::connect()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> magic[]= &#123;<span class="number">0xfe</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> magic_buf[MAGIC_NUMBER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the file can be opened for reading.</span></span><br><span class="line">m_binlog_file.open(m_binlog_file_name.c_str(), ios::in | ios::binary);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a valid MySQL binlog file is provided, BINLOG_MAGIC.</span></span><br><span class="line">m_binlog_file.read(magic_buf, MAGIC_NUMBER_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(magic, magic_buf, MAGIC_NUMBER_SIZE))</span><br><span class="line"><span class="keyword">return</span> ERR_FAIL;                        <span class="comment">// Not a valid binlog file.</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>2.disconnect()</strong></li></ul><p>直接关闭binlog文件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Binlog_file_driver::disconnect()</span><br><span class="line">&#123;</span><br><span class="line">m_binlog_file.close();</span><br><span class="line"><span class="keyword">return</span> ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>3.set_position()</strong></li></ul><p>通过seek函数将读写指针设置到指定的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_binlog_file.seekg(position, ios::beg );</span><br></pre></td></tr></table></figure><ul><li><strong>4.get_position()</strong></li></ul><p>返回binlong文件当前的读写位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Binlog_file_driver::get_position(<span class="built_in">string</span> *str, ulong *position)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(position)</span><br><span class="line">*position= m_binlog_file.tellg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>5.wait_for_next_event()</strong></li></ul><p>该函数首先从binlog文件中读取一个event_log header长度的数据块，hearder的数据结构是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> define LOG_EVENT_HEADER_SIZE <span class="number">20</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log_event_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">uint8_t</span>  marker; <span class="comment">// always 0 or 0xFF</span></span><br><span class="line"><span class="keyword">uint32_t</span> timestamp;</span><br><span class="line"><span class="keyword">uint8_t</span>  type_code;</span><br><span class="line"><span class="keyword">uint32_t</span> server_id;</span><br><span class="line"><span class="keyword">uint32_t</span> event_length;</span><br><span class="line"><span class="keyword">uint32_t</span> next_position;</span><br><span class="line"><span class="keyword">uint16_t</span> flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>读取方式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(m_bytes_read &lt; m_binlog_file_size &amp;&amp; m_binlog_file.good())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Protocol_chunk&lt;uint8_t&gt; prot_marker(m_event_log_header.marker);</span></span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint32_t</span>&gt; prot_timestamp(m_event_log_header.timestamp);</span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint8_t</span>&gt; prot_type_code(m_event_log_header.type_code);</span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint32_t</span>&gt; prot_server_id(m_event_log_header.server_id);</span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint32_t</span>&gt;</span><br><span class="line">prot_event_length(m_event_log_header.event_length);</span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint32_t</span>&gt;</span><br><span class="line">prot_next_position(m_event_log_header.next_position);</span><br><span class="line">Protocol_chunk&lt;<span class="keyword">uint16_t</span>&gt; prot_flags(m_event_log_header.flags);</span><br><span class="line"></span><br><span class="line">m_binlog_file &gt;&gt; prot_timestamp</span><br><span class="line">&gt;&gt; prot_type_code</span><br><span class="line">&gt;&gt; prot_server_id</span><br><span class="line">&gt;&gt; prot_event_length</span><br><span class="line">&gt;&gt; prot_next_position</span><br><span class="line">&gt;&gt; prot_flags;</span><br><span class="line">*event= parse_event(* <span class="keyword">static_cast</span>&lt;<span class="built_in">std</span>::istream*&gt; (&amp;m_binlog_file),</span><br><span class="line">&amp;m_event_log_header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>m_event_log_header是Log_event_header类型，具体结构上面已经给出。</p><p>根据type_code的值来判断是什么样的event事件，然后根据不同event事件读取不同长度的文件内容，同时构造一个相应事件的数据结构填充其内容并返回。读完一个事件长度的内容后将文件的读写指针置于该事件内容的末尾，开始下一个事件的读取，直到文件的末尾。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_binlog_file.seekg(m_bytes_read + m_event_log_header.event_length,ios::beg);</span><br></pre></td></tr></table></figure><p><strong>函数的调用层次关系如下</strong>:</p><ul><li>create_transport(argv[1]) -&gt; parse_file_url(const char *body, size_t length) -&gt; Binlog_file_driver(body + 2)</li><li>binlog.connect() -&gt; Binlog_file_driver::connect(const std::string &amp;filename, ulong position)</li><li>binlog.wait_for_next_event(&amp;event) -&gt; int Binlog_file_driver::wait_for_next_event(mysql::Binary_log_event **event)</li></ul><h4 id="3-1-2-读取mysql服务器binlog文件的实现"><a href="#3-1-2-读取mysql服务器binlog文件的实现" class="headerlink" title="3.1.2 读取mysql服务器binlog文件的实现"></a>3.1.2 读取mysql服务器binlog文件的实现</h4><p>该实现采用网络通信的方式来获取mysql服务器上的binlog信息，通信过程完全采用了mysql网络通信协议的格式，并且使用的是boost::asio::io_servie服务作为通信的基础。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus81 <span class="built_in">test</span>]<span class="comment"># ./basic-1 mysql://test:test123@10.75.19.81:9001</span></span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Found event of <span class="built_in">type</span> 4 at 0</span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Found event of <span class="built_in">type</span> 15 at 107</span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Found event of <span class="built_in">type</span> 2 at 246</span><br><span class="line">Start <span class="built_in">read</span> event</span><br><span class="line">Found event of <span class="built_in">type</span> 2 at 314</span><br></pre></td></tr></table></figure><p>对应的MySQL实例可以看到一个BinlogDump线程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*************************** 3. row ***************************</span><br><span class="line">Id: 2284460</span><br><span class="line">User: test</span><br><span class="line">Host: 10.75.19.81:33253</span><br><span class="line">db: NULL</span><br><span class="line">Command: Binlog Dump</span><br><span class="line">Time: 13</span><br><span class="line">State: Master has sent all binlog to slave; waiting for binlog to be updated</span><br><span class="line">Info: NULL</span><br></pre></td></tr></table></figure><p>在create_transport(const char *url)函数返回是Binlog_tcp_driver对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Port number is stored in portno, either the default, or a parsed one */</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Binlog_tcp_driver(<span class="built_in">std</span>::<span class="built_in">string</span>(user, user_end - user),</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>(pass, pass_end - pass),</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>(host, host_end - host),</span><br><span class="line">portno);</span><br></pre></td></tr></table></figure><p>Binlog_tcp_driver类中封装了整个操作过程的实现。src/tcp_driver.h文件中定义了所有的对外接口。下面分别对比较重要的接口进行说明。</p><p><strong>1. connect()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Binlog_tcp_driver::connect(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; user,</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; passwd,</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; host, uint port,</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; binlog_filename,</span><br><span class="line"><span class="keyword">size_t</span> offset)</span><br></pre></td></tr></table></figure><p>该函数封装了另一个网络连接函数connect(user, passwd, host,  port, binlog_filename, offset)。从字面意思可以看出6个参数的含义。</p><p>也支持指定binlog_filename以及offset</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;binlog_filename, ulong offset)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>(1) mysql_init创建连接</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_mysql= mysql_init(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>mysql_init文档说明<a href="https://dev.mysql.com/doc/refman/5.6/en/mysql-init.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/mysql-init.html</a></p><p>&gt;<br>Allocates or initializes a MYSQL object suitable for mysql_real_connect(). If mysql is a NULL pointer, the function allocates, initializes, and returns a new object. Otherwise, the object is initialized and the address of the object is returned.</p><ul><li>(2) sync_connect_and_authenticate<br>将相关信息封装在buf内，然后进行身份验证，验证完成发送一个COM_REGISTER_SLAVE命令。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simple_command(conn, COM_REGISTER_SLAVE, buf, (<span class="keyword">size_t</span>) (pos - buf), <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>(3) start_binlog_dump(binlog_file, m_binlog_offset)<br>这个函数核心是下面这个函数：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simple_command(m_mysql, COM_BINLOG_DUMP, buf, binlog_name_length + <span class="number">10</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这个函数在include/sql_common.h文件中有宏定义, 是MySQL源生态的函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> define simple_command(mysql, command, arg, length, skip_check) \</span><br><span class="line">(*(mysql)-&gt;methods-&gt;advanced_command)(mysql, command, <span class="number">0</span>,  \</span><br><span class="line"><span class="number">0</span>, arg, length, skip_check, <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><p><strong>2. setposition()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Binary_log::set_position(ulong position)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> filename;</span><br><span class="line">m_driver-&gt;get_position(&amp;filename, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;set_position(filename, position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过get_position调用fetch_master_status函数执行show master status获取当前的binlog位置点，然后再执行本身对象的set_position。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Binlog_tcp_driver::set_position(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str, ulong position)</span><br><span class="line">&#123;</span><br><span class="line">MYSQL *mysql= mysql_init(<span class="literal">NULL</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> err= sync_connect_and_authenticate(mysql, m_user, m_passwd, m_host, m_port);</span><br><span class="line"><span class="comment">//权限认证成功之后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行show binary logs获取所有binlog点</span></span><br><span class="line"><span class="keyword">if</span> (fetch_binlog_name_and_size(mysql, &amp;binlog_map))</span><br><span class="line"><span class="keyword">return</span> ERR_MYSQL_QUERY_FAIL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据这个map进行判断请求点是否正确，否则错误</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::iterator binlog_itr= binlog_map.find(str);</span><br><span class="line"><span class="keyword">if</span> (binlog_itr == binlog_map.end())</span><br><span class="line"><span class="keyword">return</span> ERR_FAIL;</span><br><span class="line"><span class="keyword">if</span> (position &gt; binlog_itr-&gt;second)</span><br><span class="line"><span class="keyword">return</span> ERR_FAIL;</span><br><span class="line"><span class="comment">//断开当前的连接</span></span><br><span class="line">disconnect();</span><br><span class="line"><span class="comment">//根据实际点再重新连接一下</span></span><br><span class="line"><span class="keyword">if</span> (connect(m_user, m_passwd, m_host, m_port, str, position))</span><br><span class="line"><span class="keyword">return</span> ERR_CONNECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.get_position()</strong><br>该函数获取mysql服务器当前正在使用的binlog文件名和当前的偏移量。<br>实现步骤如下：</p><ol><li>连接mysql服务端，并进行身份验证。调用的函数是sync_connect_and_authenticate。</li><li>获取mysql服务端当前使用的binlog文件名和偏移量。调用的函数为fetch_master_status。</li></ol><p>fetch_master_status是执行show master status获取当前的binlog位置点，然后赋值driver类的两个变量。</p><p><strong>4.start_binlog_dump()</strong><br>发送给主库COM_BINLOG_DUMP命令，主库开启BinlogDump线程。<br>buf中封装同步点以及server_id信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simple_command(m_mysql, COM_BINLOG_DUMP, buf, binlog_name_length + 10, 1);</span><br></pre></td></tr></table></figure><p><strong>5.wait_for_next_event()</strong><br>构建完成binlogdump线程之后，就可以从server中读取一个数据包，通过下面的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len= cli_safe_read(m_mysql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个函数功能如下：</span></span><br><span class="line"><span class="comment">//Read a packet from server. Give error message if socket was down</span></span><br><span class="line"><span class="comment">//or packet is an error message</span></span><br></pre></td></tr></table></figure><p>先接收到的是数据包的头部，根据头部中的长度信息读取整个包体的内容。</p><p>一个完整的包体对应的是一个binlog event，所以可以分析它是属于一个什么事件，并构造一个对应的event数据结构，使用包体中的信息填充其各个字段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*event_ptr= parse_event(is, m_waiting_event);</span><br></pre></td></tr></table></figure><p><strong><font color="red">这里面还需要细化,还没有看懂</font></strong></p><h4 id="3-1-3-目录结构"><a href="#3-1-3-目录结构" class="headerlink" title="3.1.3 目录结构"></a>3.1.3 目录结构</h4><p>参照这个文档<a href="https://docs.google.com/document/d/1kZt5qcAflc8aORC7SEly-LdPz0n1t-dXlTEu1_zO8vI/edit" target="_blank" rel="external">https://docs.google.com/document/d/1kZt5qcAflc8aORC7SEly-LdPz0n1t-dXlTEu1_zO8vI/edit</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Listener user interface</span></span><br><span class="line">binlog_api.h</span><br><span class="line">binary_log.cpp</span><br><span class="line">binlog_driver.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># Transport factory</span></span><br><span class="line">access_method_factory.cpp</span><br><span class="line">access_method_factory.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># Content handlers</span></span><br><span class="line">basic_content_handler.h</span><br><span class="line">basic_content_handler.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Binlog interfaces</span></span><br><span class="line">binlog_event.cpp</span><br><span class="line">binlog_event.h</span><br><span class="line">field_iterator.cpp</span><br><span class="line">field_iterator.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># Row set and value interfaces</span></span><br><span class="line">value.cpp</span><br><span class="line">value.h</span><br><span class="line">row_of_fields.cpp</span><br><span class="line">row_of_fields.h</span><br><span class="line">rowset.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL interfaces</span></span><br><span class="line">protocol.cpp</span><br><span class="line">protocol.h</span><br><span class="line">resultset_iterator.cpp</span><br><span class="line">resultset_iterator.h</span><br><span class="line">tcp_driver.cpp</span><br><span class="line">tcp_driver.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># Misc utilities</span></span><br><span class="line">bounded_buffer.h</span><br></pre></td></tr></table></figure><h4 id="3-3备注"><a href="#3-3备注" class="headerlink" title="3.3备注"></a>3.3备注</h4><ul><li>存在一个python版本的<a href="https://code.launchpad.net/~mkindahl/mysql-replicant-python/trunk" target="_blank" rel="external">https://code.launchpad.net/~mkindahl/mysql-replicant-python/trunk</a></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>工具类</title>
      <link href="/2015-09-06-gong-ju-lei/"/>
      <url>/2015-09-06-gong-ju-lei/</url>
      <content type="html"><![CDATA[<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><p><strong>Linux常用性能调优工具索引</strong> <a href="http://blog.yufeng.info/archives/category/tools" target="_blank" rel="external">http://blog.yufeng.info/archives/category/tools</a></p>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>重启SaltMinion导致MySQL Crash</title>
      <link href="/2015-08-28-zhong-qi-saltminiondao-zhi-mysql-crash/"/>
      <url>/2015-08-28-zhong-qi-saltminiondao-zhi-mysql-crash/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>分析重启SaltMinon导致MySQL Crash原因，包括SaltMinion重启过程、KillThread导致对应进程Crash原因分析以及验证、pid和ThreadId分配规则以及最后给出原因解释。</p></blockquote><a id="more"></a><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><font size="4"><sup><a href="#saltrestart">1. SaltMinion重启过程</a></sup></font></li><li><font size="4"><sup><a href="#killthread">2. Kill Thread导致对应的进程Crash</a></sup></font></li><li><font size="4"><sup><a href="#pid_threadid">3. Pid和Thread_id分配规则</a></sup></font></li><li><font size="4"><sup><a href="#conclusion">4. SaltMinion重启为什么和MySQL的thread相重合呢？？</a></sup></font></li></ul><h2 id="1-Salt-Minion重启过程"><a href="#1-Salt-Minion重启过程" class="headerlink" title="1.Salt-Minion重启过程"></a><a name="saltrestart">1.Salt-Minion重启过程</a></h2><h2 id="2-Kill-Thread导致对应的进程Crash"><a href="#2-Kill-Thread导致对应的进程Crash" class="headerlink" title="2.Kill Thread导致对应的进程Crash"></a><a name="killthread">2.Kill Thread导致对应的进程Crash</a></h2><h3 id="2-1-kill-和-kill-9方式"><a href="#2-1-kill-和-kill-9方式" class="headerlink" title="2.1 kill  和 kill -9方式"></a>2.1 kill  和 kill -9方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pstree -n -p |grep mysql|less</span><br><span class="line">|-mysqld_safe(18573)---mysqld(20122)-+-&#123;mysqld&#125;(20134)</span><br><span class="line">|                                    |-&#123;mysqld&#125;(20135)</span><br><span class="line">|                                    |-&#123;mysqld&#125;(20136)</span><br><span class="line">|                                    |-&#123;mysqld&#125;(20137)</span><br><span class="line">|                                    |-&#123;mysqld&#125;(20138)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>进行两种kill的模拟</p><h3 id="2-2-mysqld-safe作用"><a href="#2-2-mysqld-safe作用" class="headerlink" title="2.2 mysqld_safe作用"></a>2.2 mysqld_safe作用</h3><h3 id="2-3-验证"><a href="#2-3-验证" class="headerlink" title="2.3 验证"></a>2.3 验证</h3><p>将下面的代码保存在test.c文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> include &lt;stdio.h&gt;</span><br><span class="line"> include &lt;stdlib.h&gt;</span><br><span class="line"> include &lt;signal.h&gt;</span><br><span class="line"> include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_func</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"thread create\n"</span>);</span><br><span class="line">sleep(<span class="number">100000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"thread ended\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rc = pthread_create(&amp;tid, <span class="literal">NULL</span>, thread_func, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">pthread_join(tid, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pthread_id = %d\n"</span>, tid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -c test.c</span><br><span class="line">gcc -o test test.o -lpthread</span><br></pre></td></tr></table></figure><p>模拟发现kill 和kill -9输出结果</p><h2 id="3-Pid和Thread-id分配规则"><a href="#3-Pid和Thread-id分配规则" class="headerlink" title="3.Pid和Thread_id分配规则"></a><a name="pid_threadid">3.Pid和Thread_id分配规则</a></h2><h2 id="4-SaltMinion重启为什么和MySQL的thread相重合呢？？"><a href="#4-SaltMinion重启为什么和MySQL的thread相重合呢？？" class="headerlink" title="4.SaltMinion重启为什么和MySQL的thread相重合呢？？"></a><a name="conclusion">4.SaltMinion重启为什么和MySQL的thread相重合呢？？</a></h2>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>服务器负载那些事</title>
      <link href="/2015-08-26-fu-wu-qi-fu-zai-na-xie-shi/"/>
      <url>/2015-08-26-fu-wu-qi-fu-zai-na-xie-shi/</url>
      <content type="html"><![CDATA[<h3 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1. CPU"></a>1. CPU</h3><p>你不一定懂的cpu显示信息 <a href="http://www.cnblogs.com/yjf512/p/3383915.html" target="_blank" rel="external">http://www.cnblogs.com/yjf512/p/3383915.html</a></p>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL优化</title>
      <link href="/2015-08-25-mysqlyou-hua/"/>
      <url>/2015-08-25-mysqlyou-hua/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>汇总各种比较好的优化博客，便于在遇到实际问题的时候查看，包括优化准则、美团的索引博文、Join优化。</p><a id="more"></a><h3 id="1、优化准则"><a href="#1、优化准则" class="headerlink" title="1、优化准则"></a>1、优化准则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">L1 cache reference <span class="number">0.5</span> ns</span><br><span class="line">Branch mispredict <span class="number">5</span> ns</span><br><span class="line">L2 cache reference <span class="number">7</span> ns</span><br><span class="line">Mutex lock/unlock <span class="number">100</span> ns</span><br><span class="line">Main memory reference <span class="number">100</span> ns</span><br><span class="line">Compress <span class="number">1</span>K bytes <span class="keyword">with</span> Zippy <span class="number">10</span>,<span class="number">000</span> ns</span><br><span class="line">Send <span class="number">2</span>K bytes over <span class="number">1</span> Gbps network <span class="number">20</span>,<span class="number">000</span> ns</span><br><span class="line">Read <span class="number">1</span> MB sequentially <span class="keyword">from</span> memory <span class="number">250</span>,<span class="number">000</span> ns</span><br><span class="line">Round trip within same datacenter <span class="number">500</span>,<span class="number">000</span> ns</span><br><span class="line">Disk seek <span class="number">10</span>,<span class="number">000</span>,<span class="number">000</span> ns</span><br><span class="line">Read <span class="number">1</span> MB sequentially <span class="keyword">from</span> network <span class="number">10</span>,<span class="number">000</span>,<span class="number">000</span> ns</span><br><span class="line">Read <span class="number">1</span> MB sequentially <span class="keyword">from</span> disk <span class="number">30</span>,<span class="number">000</span>,<span class="number">000</span> ns</span><br><span class="line">Send packet CA-&gt;Netherlands-&gt;CA 150,000,000 ns</span><br></pre></td></tr></table></figure><p><a href="http://highscalability.com/numbers-everyone-should-know" target="_blank" rel="external">http://highscalability.com/numbers-everyone-should-know</a></p><h3 id="2、美团《MySQL索引原理及慢查询优化》"><a href="#2、美团《MySQL索引原理及慢查询优化》" class="headerlink" title="2、美团《MySQL索引原理及慢查询优化》"></a>2、美团《MySQL索引原理及慢查询优化》</h3><p><a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="external">http://tech.meituan.com/mysql-index.html</a></p><h3 id="3、MySQL索引背后的数据结构及算法原理"><a href="#3、MySQL索引背后的数据结构及算法原理" class="headerlink" title="3、MySQL索引背后的数据结构及算法原理"></a>3、MySQL索引背后的数据结构及算法原理</h3><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><h3 id="4、Join优化"><a href="#4、Join优化" class="headerlink" title="4、Join优化"></a>4、Join优化</h3><p>Join优化原则<br>&gt;</p><ol><li>查询所返回的结果集，通常查询返回的结果集很少，是有信心进行优化的；</li><li>驱动表的选择至关重要，通过查看执行计划，可以看到优化器选择的驱动表<br>,从执行计划中的rows可以大致反映出问题的所在；</li><li>理清各表之间的关联关系，注意关联字段上是否有合适的索引；</li><li>使用straight_join关键词来强制表之间的关联顺序，可以方便我们验证某些猜想；</li></ol><p>主要参照这篇博客<a href="http://hidba.org/?p=974" target="_blank" rel="external">复杂关联SQL的优化</a></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>阿里数据库相关视频分享</title>
      <link href="/2015-08-24-a-li-shu-ju-ku-xiang-guan-shi-pin-fen-xiang/"/>
      <url>/2015-08-24-a-li-shu-ju-ku-xiang-guan-shi-pin-fen-xiang/</url>
      <content type="html"><![CDATA[<h3 id="1-阿里分布式数据库-DRDS-TDDL-实践"><a href="#1-阿里分布式数据库-DRDS-TDDL-实践" class="headerlink" title="1. 阿里分布式数据库(DRDS\TDDL)实践"></a>1. 阿里分布式数据库(DRDS\TDDL)实践</h3><ul><li>视频链接<br><a href="http://v.youku.com/v_show/id_XODMyMzk2OTUy.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XODMyMzk2OTUy.html</a></li><li>pdf链接<br><a href="http://vdisk.weibo.com/s/CW6y_n6-bJqB/1416312608" target="_blank" rel="external">http://vdisk.weibo.com/s/CW6y_n6-bJqB/1416312608</a></li></ul><h3 id="2-DBFree-阿里数据库自动化运维平台"><a href="#2-DBFree-阿里数据库自动化运维平台" class="headerlink" title="2. DBFree-阿里数据库自动化运维平台"></a>2. DBFree-阿里数据库自动化运维平台</h3><ul><li>视频链接<br><a href="http://v.youku.com/v_show/id_XNjUyNzExNjky.html?from=s1.8-1-1.2" target="_blank" rel="external">http://v.youku.com/v_show/id_XNjUyNzExNjky.html?from=s1.8-1-1.2</a></li><li>ppt链接<br><a href="http://wenku.baidu.com/view/6237edf8960590c69ec3765a.html" target="_blank" rel="external">http://wenku.baidu.com/view/6237edf8960590c69ec3765a.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 业界技术分享汇总 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python模块汇总</title>
      <link href="/2015-08-12-pythonmo-kuai-hui-zong/"/>
      <url>/2015-08-12-pythonmo-kuai-hui-zong/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>汇总在开发过程中使用到所有Python模块，记录起来方便日后使用。</p><ul><li><font size="5"><sup><a href="#prettytable">prettytable</a></sup></font></li><li><font size="5"><sup><a href="#ascii_graph">ascii_graph</a></sup></font></li></ul></blockquote><h2 id="1、prettytable"><a href="#1、prettytable" class="headerlink" title="1、prettytable"></a><a name="prettytable">1、prettytable</a></h2><h3 id="1-1-功能"><a href="#1-1-功能" class="headerlink" title="1.1 功能"></a>1.1 功能</h3><p>实现python console的数据格式化，按照表格的方式输出。</p><h3 id="1-2-演示"><a href="#1-2-演示" class="headerlink" title="1.2 演示"></a>1.2 演示</h3><p><img src="/images/prettytable3.jpg =500x400" alt="pretty table3"></p><a id="more"></a><h3 id="1-3-代码demo"><a href="#1-3-代码demo" class="headerlink" title="1.3 代码demo"></a>1.3 代码demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> !/usr/bin/env python2<span class="number">.7</span></span><br><span class="line"> -*- coding:utf8 -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line">table = PrettyTable([<span class="string">"animal"</span>, <span class="string">"ferocity"</span>])</span><br><span class="line">table.add_row([<span class="string">"wolverine"</span>, <span class="number">100</span>])</span><br><span class="line">table.add_row([<span class="string">"grizzly"</span>, <span class="number">87</span>])</span><br><span class="line">table.add_row([<span class="string">"Rabbit of Caerbannog"</span>, <span class="number">110</span>])</span><br><span class="line">table.add_row([<span class="string">"cat"</span>, <span class="string">"中文中文中文中文中文中"</span>])</span><br><span class="line">table.add_row([<span class="string">"platypus"</span>, <span class="number">23</span>])</span><br><span class="line">table.add_row([<span class="string">"dolphin"</span>, <span class="number">63</span>])</span><br><span class="line">table.add_row([<span class="string">"albatross"</span>, <span class="number">44</span>])</span><br><span class="line">table.sort_key(<span class="string">"ferocity"</span>)</span><br><span class="line">table.reversesort = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> table</span><br></pre></td></tr></table></figure><p>如果使用颜色的话，得使用shell的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">color = <span class="string">"\033[94m&#123;value&#125;\033[0m"</span></span><br><span class="line">value = <span class="string">"中文"</span></span><br><span class="line">value = color.format(value=value)</span><br></pre></td></tr></table></figure><h3 id="2、ascii-graph"><a href="#2、ascii-graph" class="headerlink" title="2、ascii_graph "></a><a name="ascii_graph">2、ascii_graph </a></h3><h2 id="2-1-功能"><a href="#2-1-功能" class="headerlink" title="2.1 功能"></a>2.1 功能</h2><p>将数据打印输出成直方图的形式</p><h3 id="2-2-演示"><a href="#2-2-演示" class="headerlink" title="2.2 演示"></a>2.2 演示</h3><p><img src="/images/python_graph.png =500x400" alt="python_graph"></p><h3 id="2-3-代码Demo"><a href="#2-3-代码Demo" class="headerlink" title="2.3 代码Demo"></a>2.3 代码Demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ascii_graph <span class="keyword">import</span> Pyasciigraph</span><br><span class="line"><span class="keyword">from</span> ascii_graph.colors <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">  Simple coloring</span><br><span class="line">test = [(<span class="string">'testval0'</span>, <span class="number">600</span>),</span><br><span class="line">(<span class="string">'testval1'</span>, <span class="number">500</span>, Pur),</span><br><span class="line">(<span class="string">'testval2'</span>, <span class="number">400</span>, Red),</span><br><span class="line">(<span class="string">'testval3'</span>, <span class="number">400</span>, Red),</span><br><span class="line">(<span class="string">'testval4'</span>, <span class="number">300</span>, Gre),</span><br><span class="line">(<span class="string">'testval5'</span>, <span class="number">200</span>, Yel),</span><br><span class="line">(<span class="string">'testval6'</span>, <span class="number">100</span>, Cya),</span><br><span class="line">(<span class="string">'testval7'</span>, <span class="number">50</span>,  Blu) ]</span><br><span class="line"></span><br><span class="line">graph = Pyasciigraph()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> graph.graph(<span class="string">'test graph'</span>, test):</span><br><span class="line">print(line)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="http://code.google.com/p/prettytable/" target="_blank" rel="external">http://code.google.com/p/prettytable/</a></li><li><a href="https://py-ascii-graph.readthedocs.org/en/latest/" target="_blank" rel="external">https://py-ascii-graph.readthedocs.org/en/latest/</a></li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL GroupCommit</title>
      <link href="/2015-08-11-mysql-groupcommit/"/>
      <url>/2015-08-11-mysql-groupcommit/</url>
      <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="http://www.orczhou.com/index.php/2010/08/time-to-group-commit-1/" target="_blank" rel="external">MySQL/InnoDB和Group Commit(1)</a><br>2、<a href="http://www.orczhou.com/index.php/2011/12/time-to-group-commit-2/" target="_blank" rel="external">MySQL/InnoDB和Group Commit(2)</a><br>3、<a href="http://hedengcheng.com/?p=112" target="_blank" rel="external">MariaDB &amp; Percona XtraDB Group Commit实现简要分析</a></p>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL内存使用情况</title>
      <link href="/2015-08-10-mysqlnei-cun-shi-yong-qing-kuang/"/>
      <url>/2015-08-10-mysqlnei-cun-shi-yong-qing-kuang/</url>
      <content type="html"><![CDATA[<h2 id="内存使用情况统计"><a href="#内存使用情况统计" class="headerlink" title="内存使用情况统计"></a>内存使用情况统计</h2><p>MySQL内存有两个组成部分，全局和线程级别的。<br>下图是一个示例：<br><img src="/images/mysql_memory.png =500x600" alt="/images/mysql_memory.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://dev.mysql.com/doc/refman/5.5/en/memory-use.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.5/en/memory-use.html</a><br>2、<a href="https://www.percona.com/blog/2006/05/17/mysql-server-memory-usage/" target="_blank" rel="external">https://www.percona.com/blog/2006/05/17/mysql-server-memory-usage/</a><br>3、<a href="https://www.percona.com/blog/2014/01/24/mysql-server-memory-usage-2/" target="_blank" rel="external">https://www.percona.com/blog/2014/01/24/mysql-server-memory-usage-2/</a></p>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Epoll模型</title>
      <link href="/2015-08-04-epollmo-xing/"/>
      <url>/2015-08-04-epollmo-xing/</url>
      <content type="html"><![CDATA[<h2 id="1、Epoll模型讲解（转）"><a href="#1、Epoll模型讲解（转）" class="headerlink" title="1、Epoll模型讲解（转）"></a>1、Epoll模型讲解（转）</h2><p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。不管是文件，还是套接字，还是管道，我们都可以把他们看作流。</p><p>之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？</p><a id="more"></a><p><strong><font color="red">阻塞 Epoll</font></strong>：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）,那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你)。</p><p><strong><font color="red">非阻塞忙轮询 select </font></strong>: 接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：”你到了没?”</p><p><strong><font color="red">结论</font></strong>:<br>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。<br>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p><p><strong><font color="red">缓冲区</font></strong><br>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p><p><strong><font color="red">例子</font></strong></p><p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。<br>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“<strong><font color="green">缓冲区非空</font></strong>”。</p><p>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“<strong><font color="green">缓冲区满</font></strong>”。</p><p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“<strong><font color="green">缓冲区非满</font></strong>”。</p><p>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“<strong><font color="green">缓冲区空</font></strong>”。</p><p>这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。</p><p>然后我们来说说阻塞I/O的缺点。但是<strong><font color="red">阻塞I/O模式下，一个线程只能处理一个流的I/O事件</font></strong>。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。<br>于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> true &#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stream[]; &#123;</span><br><span class="line"><span class="keyword">if</span> i has data</span><br><span class="line">read until unavailable</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但<font color="red">这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU</font>。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。</p><p>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。<font color="red">这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流</font>（于是我们可以把“忙”字去掉了）。代码长这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> true &#123;</span><br><span class="line">select(streams[])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> streams[] &#123;</span><br><span class="line"><span class="keyword">if</span> i has data</span><br><span class="line">read until unavailable</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。<br>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次说了这么多，终于能好好解释epoll了。</p><p>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">epoll_create 创建一个epoll对象，一般epollfd = epoll_create()</span><br><span class="line"></span><br><span class="line">epoll_ctl （epoll_add/epoll_del的合体），往epoll对象中增加/删除某一个流的某一个事件</span><br><span class="line">比如</span><br><span class="line">epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);<span class="comment">//注册缓冲区非空事件，即有数据流入</span></span><br><span class="line">epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);<span class="comment">//注册缓冲区非满事件，即流可以被写入</span></span><br><span class="line">epoll_wait(epollfd,...)等待直到注册的事件发生</span><br><span class="line">（注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write/read会返回<span class="number">-1</span>，并设置errno=EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。</span><br></pre></td></tr></table></figure><p>一个epoll模式的代码大概的样子是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">active_stream[] = epoll_wait(epollfd)</span><br><span class="line"><span class="keyword">for</span> i in active_stream[] &#123;</span><br><span class="line">read <span class="keyword">or</span> write till</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、结合APUE上介绍"><a href="#2、结合APUE上介绍" class="headerlink" title="2、结合APUE上介绍"></a>2、结合APUE上介绍</h2><font color="red"> 待更新…..</font><h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><p>1、<a href="http://blog.csdn.net/mango_song/article/details/42643971" target="_blank" rel="external">我读过最好的Epoll模型讲解</a></p><p>2、<a href="http://blog.csdn.net/ctthuangcheng/article/details/9332655" target="_blank" rel="external">UNIX环境高级编程——epoll函数使用详解</a></p>]]></content>
      
      <categories>
          
          <category> Unix </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Innodb内部结构</title>
      <link href="/2015-07-30-innodbnei-bu-jie-gou/"/>
      <url>/2015-07-30-innodbnei-bu-jie-gou/</url>
      <content type="html"><![CDATA[<h2 id="1、资料来源"><a href="#1、资料来源" class="headerlink" title="1、资料来源"></a>1、资料来源</h2><ul><li><p>逐篇阅读Jeremy Cole大拿的blog<a href="http://blog.jcole.us/innodb/" target="_blank" rel="external">http://blog.jcole.us/innodb/</a>进行记录汇总。</p></li><li><p>官方的Internals <a href="https://dev.mysql.com/doc/internals/en/index.html" target="_blank" rel="external">https://dev.mysql.com/doc/internals/en/index.html</a></p></li></ul><p>两个结合在一起看。</p><a id="more"></a><h2 id="2、Innodb记录结构"><a href="#2、Innodb记录结构" class="headerlink" title="2、Innodb记录结构"></a>2、Innodb记录结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test4`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`data`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span>,</span><br><span class="line"><span class="string">`data2`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>表t包括6个列，而不是3个列，额外的看不到的列是row ID、transaction ID以及rollback pointer。</p><p>插入如下记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-------+------+--------+</span></span><br><span class="line">| id    | data | data2  |</span><br><span class="line">+<span class="comment">-------+------+--------+</span></span><br><span class="line">|     1 |    0 | NULL   |</span><br><span class="line">|     2 |    0 | b      |</span><br><span class="line">|     3 |    0 | b      |</span><br><span class="line">|     4 |    0 | b      |</span><br><span class="line">|    10 |    1 | NULL   |</span><br><span class="line">|    11 |    2 | TTTTT  |</span><br><span class="line">+<span class="comment">-------+------+--------+</span></span><br></pre></td></tr></table></figure><p>使用hexdump -C 读取ibd文件，下面一个片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0000c000  8e 35 7e a9 00 00 00 03  ff ff ff ff ff ff ff ff  |.5~.............|</span><br><span class="line">0000c010  00 00 00 00 69 d8 c7 00  45 bf 00 00 00 00 00 00  |....i...E.......|</span><br><span class="line">0000c020  00 00 00 00 01 1a 00 02  01 26 80 08 00 00 00 00  |.........&amp;......|</span><br><span class="line">0000c030  01 0c 00 02 00 05 00 06  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">0000c040  00 00 00 00 00 00 00 00  01 f7 00 00 01 1a 00 00  |................|</span><br><span class="line">0000c050  00 02 00 f2 00 00 01 1a  00 00 00 02 00 32 01 00  |.............2..|</span><br><span class="line">0000c060  02 00 1b 69 6e 66 69 6d  75 6d 00 07 00 0b 00 00  |...infimum......|</span><br><span class="line">0000c070  73 75 70 72 65 6d 75 6d  01 00 00 10 00 1c 80 00  |supremum........|</span><br><span class="line">0000c080  00 01 00 00 00 00 82 6b  99 00 00 01 40 00 84 80  |.......k....@...|</span><br><span class="line">0000c090  00 00 00 01 00 00 00 18  00 1d 80 00 00 02 00 00  |................|</span><br><span class="line">0000c0a0  00 00 82 6b 99 00 00 01  40 00 91 80 00 00 00 62  |...k....@......b|</span><br><span class="line">0000c0b0  01 00 00 00 20 00 1d 80  00 00 03 00 00 00 00 82  |.... ...........|</span><br><span class="line">0000c0c0  6b 99 00 00 01 40 00 9e  80 00 00 00 62 01 00 00  |k....@......b...|</span><br><span class="line">0000c0d0  00 28 00 1c 80 00 00 04  00 00 00 00 82 6b 99 00  |.(...........k..|</span><br><span class="line">0000c0e0  00 01 40 00 ab 80 00 00  00 62 01 00 00 30 00 1c  |..@......b...0..|</span><br><span class="line">0000c0f0  80 00 00 0a 00 00 00 00  82 91 ae 00 00 01 9b 00  |................|</span><br><span class="line">0000c100  84 80 00 00 01 05 00 00  00 38 ff 64 80 00 00 0b  |.........8.d....|</span><br><span class="line">0000c110  00 00 00 00 82 93 b0 00  00 01 9d 00 84 80 00 00  |................|</span><br><span class="line">0000c120  02 54 54 54 54 54 00 00  00 00 00 00 00 00 00 00  |.TTTTT..........|</span><br><span class="line">0000c130  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br></pre></td></tr></table></figure><p>如何找到记录的开始位置：</p><font color="red"> infimum和supremum是两个具体的英文单词 </font><br>对应的16个进制为<br>infimum <font color="green"> 69 6e 66 69 6d 75 6d </font><br>supremum  <font color="green"> 73 75 70 72 65 6d 75 6d</font><p>28个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> binascii</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'i'</span>)</span><br><span class="line"><span class="string">'69'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'n'</span>)</span><br><span class="line"><span class="string">'6e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'f'</span>)</span><br><span class="line"><span class="string">'66'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'i'</span>)</span><br><span class="line"><span class="string">'69'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'m'</span>)</span><br><span class="line"><span class="string">'6d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>binascii.b2a_hex(<span class="string">'u'</span>)</span><br><span class="line"><span class="string">'75'</span></span><br><span class="line">&gt;&gt;&gt;hex(<span class="number">1024</span>*<span class="number">3</span>)</span><br><span class="line"><span class="string">'0xc00'</span></span><br></pre></td></tr></table></figure><p>使用姜承尧的脚本进行分析<a href="http://code.google.com/p/david-mysql-tools/source/browse/trunk/py_innodb_page_type/" target="_blank" rel="external">http://code.google.com/p/david-mysql-tools/source/browse/trunk/py_innodb_page_type/</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">page offset 00000000, page type <span class="tag">&lt;<span class="name">File</span> <span class="attr">Space</span> <span class="attr">Header</span>&gt;</span></span><br><span class="line">page offset 00000001, page type <span class="tag">&lt;<span class="name">Insert</span> <span class="attr">Buffer</span> <span class="attr">Bitmap</span>&gt;</span></span><br><span class="line">page offset 00000002, page type <span class="tag">&lt;<span class="name">File</span> <span class="attr">Segment</span> <span class="attr">inode</span>&gt;</span></span><br><span class="line">page offset 00000003, page type <span class="tag">&lt;<span class="name">B-tree</span> <span class="attr">Node</span>&gt;</span>, page level <span class="tag">&lt;<span class="name">0000</span>&gt;</span></span><br><span class="line">page offset 00000000, page type <span class="tag">&lt;<span class="name">Freshly</span> <span class="attr">Allocated</span> <span class="attr">Page</span>&gt;</span></span><br><span class="line">page offset 00000000, page type <span class="tag">&lt;<span class="name">Freshly</span> <span class="attr">Allocated</span> <span class="attr">Page</span>&gt;</span></span><br><span class="line">Total number of page: 6:</span><br><span class="line">Freshly Allocated Page: 2</span><br><span class="line">Insert Buffer Bitmap: 1</span><br><span class="line">File Space Header: 1</span><br><span class="line">B-tree Node: 1</span><br><span class="line">File Segment inode: 1</span><br></pre></td></tr></table></figure><p>总共6个page，文件大小是96KB，innodb单个页面大小为16KB，故也是6个page</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="http://www.cnblogs.com/zhoujinyi/archive/2012/10/17/2726462.html" target="_blank" rel="external">http://www.cnblogs.com/zhoujinyi/archive/2012/10/17/2726462.html</a></p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac快捷键图标</title>
      <link href="/2015-07-29-mackuai-jie-jian-tu-biao/"/>
      <url>/2015-07-29-mackuai-jie-jian-tu-biao/</url>
      <content type="html"><![CDATA[<h2 id="Mac图标"><a href="#Mac图标" class="headerlink" title="Mac图标"></a>Mac图标</h2><p>对于mac的图标总是记不太住，在这里记录一下，便于查找。<br><img src="/images/mac1.png" alt="mac"></p><p>更多图标参照参考的<a href="https://support.apple.com/kb/PH18802?locale=zh_CN&amp;viewlocale=zh_CN" target="_blank" rel="external">第2个链接</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">https://support.apple.com/zh-cn/HT201236</a></p><p>2、<a href="https://support.apple.com/kb/PH18802?locale=zh_CN&amp;viewlocale=zh_CN" target="_blank" rel="external">https://support.apple.com/kb/PH18802?locale=zh_CN&amp;viewlocale=zh_CN</a></p>]]></content>
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>在Intellij IDEA中配置golang</title>
      <link href="/2015-07-22-zai-intellij-ideazhong-pei-zhi-golang/"/>
      <url>/2015-07-22-zai-intellij-ideazhong-pei-zhi-golang/</url>
      <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参照下面的博客完成在Intellij IDEA中配置golang<br><a href="http://aigo.iteye.com/blog/2214136" target="_blank" rel="external">IntelliJ IDEA 14安装Golang插件go-lang-idea-plugin</a>。</p><p>由于系统上之前已经安装好go和IDEA，现在将两者结合起来，本博客记录整个配置的过程。</p><a id="more"></a><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>在<a href="https://github.com/go-lang-plugin-org/go-lang-idea-plugin" target="_blank" rel="external">https://github.com/go-lang-plugin-org/go-lang-idea-plugin</a>上下载插件。</p><h3 id="配置生成intellij-go-jar包"><a href="#配置生成intellij-go-jar包" class="headerlink" title="配置生成intellij-go.jar包"></a>配置生成intellij-go.jar包</h3><p>1、将下载的go-lang-idea-plugin压缩包解压，IDEA点击File -&gt; open 打开该工程。</p><p>2、点击File -&gt; Project Structure 打开项目结构配置窗口：<br><img src="/images/go_plugin1.png" alt="go_plugin1"></p><!-- more --><p>3、设置Project SDK<br>点击File -&gt; Project Structure -&gt;Project，设置Project SDK为刚刚设置好的IDEA sdk<br><img src="/images/go_plugin2.png" alt="go_plugin2"></p><p>4、编译生成jar包<br>点击Build-&gt;Prepare All Plugins For Deployment，选择intellij-go.jar包<br><img src="/images/go_plugin3.png" alt="go_plugin3"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在Perference中选择Plugins<br><img src="/images/go_plugin4.png" alt="go_plugin4"></p><p>手动安装intellij-go.jar包</p><h3 id="设置Go-SDK"><a href="#设置Go-SDK" class="headerlink" title="设置Go SDK"></a>设置Go SDK</h3><p><img src="/images/go_plugin5.png" alt="go_plugin5"><br>选择go的HOME</p><p><img src="/images/go_plugin6.png" alt="go_plugin6"></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><img src="/images/go_plugin7.png" alt="go_plugin7"></p><h3 id="命令行运行Go程序"><a href="#命令行运行Go程序" class="headerlink" title="命令行运行Go程序"></a>命令行运行Go程序</h3><p><img src="/images/go_plugin8.png" alt="go_plugin8"></p>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Using MySQL with java</title>
      <link href="/2015-07-20-using-mysql-with-java/"/>
      <url>/2015-07-20-using-mysql-with-java/</url>
      <content type="html"><![CDATA[<h2 id="1-Using-MySQL-with-Java-Percona-Live-2015"><a href="#1-Using-MySQL-with-Java-Percona-Live-2015" class="headerlink" title="1. Using MySQL with Java [Percona Live 2015]"></a>1. Using MySQL with Java [Percona Live 2015]</h2><a id="more"></a><h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h2><figure class="highlight java"><figcaption><span>使用文件的方式进行访问</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> SQLException, ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(Main.class.getClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>));</span><br><span class="line">Connection conn = DriverManager.getConnection(</span><br><span class="line">prop.getProperty(<span class="string">"mysql.url"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"mysql.user"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"mysql.password"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">ResultSet rs = st.executeQuery(</span><br><span class="line"><span class="string">"SELECT concat('Hello from mysql', version()) As msg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(<span class="string">"msg"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-IDEA配置"><a href="#3-IDEA配置" class="headerlink" title="3. IDEA配置"></a>3. IDEA配置</h2><p>添加jdbc的jar包：</p><p><img src="/images/idea_jar.png =600x600" alt="jdbc"></p><p>代码是使用IntelliJ IDEA编写的，遇到找不到文件的情况，解决方案是将db.properties和java代码放置在同一个目录，并且进行下图设置：</p><p><img src="/images/ResourceRoot.png =300x100" alt="ResourceRoot"></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>信号量扑捉</title>
      <link href="/2015-07-14-xin-hao-liang-bu-zhuo/"/>
      <url>/2015-07-14-xin-hao-liang-bu-zhuo/</url>
      <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>多个平台共同使用一台中控机，由于某个部门运行python脚本的bug，导致机器压缩过大无法登陆，解决的方案就是重启机器，由于是部署的crontab任务，机器启动之后很快有不行了。其他部门的同学在没有通知的情况，使用一个死循序kill掉所有和python相关的运行程序。由于没有周知其他部门的同学，其他部门同学随便运行一个python脚本都会被kill。</p><p>由此引发一个问题就是如何找出被kill程序对应的源程序呢？</p><h3 id="2、信号量"><a href="#2、信号量" class="headerlink" title="2、信号量"></a>2、信号量</h3><blockquote><p>kill -9 和 kill -15的区别？？</p></blockquote><p>kill -9 对应的信号量是SIGKILL， kill -15对应的信号量是SIGTERM</p><a id="more"></a><h4 id="SIGKILL是否可以扑捉？"><a href="#SIGKILL是否可以扑捉？" class="headerlink" title=" SIGKILL是否可以扑捉？"></a><font color="red"> SIGKILL是否可以扑捉？</font></h4><figure class="highlight python"><figcaption><span>测试信号量SIGKILL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ! /usr/bin/env python2<span class="number">.6</span></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> time, os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(signum, frame)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Signum = %d'</span> % signum</span><br><span class="line">ret = signal.getsignal(signum)</span><br><span class="line"><span class="keyword">print</span> os.getpid(),os.getppid()</span><br><span class="line"></span><br><span class="line">signal.signal(signal.SIGKILL, handler)</span><br><span class="line">signal.pause()</span><br></pre></td></tr></table></figure><p>运行的时候会出现如下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus79 20150714]# python2.6 signal.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;signal.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">signal.signal(signal.SIGKILL, handler)</span><br><span class="line">RuntimeError: (22, &apos;Invalid argument&apos;)</span><br></pre></td></tr></table></figure><p>从这个链接中可以看到SIGKILL的说明，<a href="http://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html" target="_blank" rel="external">http://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html</a></p><p>The SIGKILL signal is used to cause immediate program termination. It cannot be handled or ignored, and is therefore always fatal. It is also not possible to block this signal.<br>SIGKILL和SIGSTOP是不能被捕获以及忽略的信号，是向管理员提供可以杀死任一进程的可靠方法。</p><h4 id="SIGTERM"><a href="#SIGTERM" class="headerlink" title=" SIGTERM"></a><font color="red"> SIGTERM</font></h4><p>默认会将未关闭的IO流关闭之后再退出。<br>将上面的代码改成捕捉SIGTERM，输出结果为：<br>[root@typhoeus79 20150714]# python2.6 signal.py<br>Signum = 15<br>14412 24840</p><p>根据ppid查看对应的进程为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@typhoeus79 20150714]# readlink /proc/24840/exe</span><br><span class="line">/bin/bash</span><br><span class="line">[root@typhoeus79 20150714]# readlink /proc/24840/cwd/</span><br><span class="line">[root@typhoeus79 20150714]# readlink /proc/24840/cwd</span><br><span class="line">/data1/guosong/opdir/20150714</span><br></pre></td></tr></table></figure><h3 id="进行kill进程的话，还是使用kill-15的方式。"><a href="#进行kill进程的话，还是使用kill-15的方式。" class="headerlink" title="进行kill进程的话，还是使用kill -15的方式。"></a><font color="red">进行kill进程的话，还是使用kill -15的方式。</font></h3>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL的server_id出现相同情况的案例分析</title>
      <link href="/2015-07-08-mysqlde-server-idfen-xi/"/>
      <url>/2015-07-08-mysqlde-server-idfen-xi/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>经常会问到主从server_id相同会怎么样？从库之间server_id相同会怎么样？A-&gt;B-&gt;C结构下，如果A和C的server_id相同又会怎么样？</p><h4 id="主从server-id相同"><a href="#主从server-id相同" class="headerlink" title="主从server_id相同"></a>主从server_id相同</h4><p>启动start slave 之后，出现错误：</p><blockquote><p>Last_IO_Errno: 1593<br>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the –replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</p></blockquote><h4 id="两个从库之间存在server-id相同"><a href="#两个从库之间存在server-id相同" class="headerlink" title="两个从库之间存在server_id相同"></a>两个从库之间存在server_id相同</h4><p>主库上的Binlog Dump线程会替换成新的从库ip，且Binlog Dump的Time时间是变化，主库没有任何写入。<br><img src="/images/binlogdump.png" alt="存在相同的server_id的Binlog Dump状态"></p><a id="more"></a><p>另一个从库的状态是出现一个<font color="red">非常大的延迟</font>。<br><img src="/images/slaveinfo.png" alt="从库的状态"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="从库server-id相同的情况"><a href="#从库server-id相同的情况" class="headerlink" title="从库server_id相同的情况"></a>从库server_id相同的情况</h4><p>彭立勋的博客<a href="http://www.penglixun.com/tech/database/mysql_multi_slave_same_serverid.html" target="_blank" rel="external">MySQL多个Slave同一server_id的冲突原因分析</a> ，这里给出代码的解释，如果从库之间的server_id出现相同的情况，从库进行COM_REGISTER_SLAVE的时候会到hash表中按照server_id为key进行先删除已经存在的slave，然后再重新注册。由于从库都有重试的机制，故其中断又重新导致其他的被kill掉，然后再反复，故我们看到的现象就是出现server_id的两个从库同步状态是时断时续的。</p><h4 id="主从server-id相同的情况"><a href="#主从server-id相同的情况" class="headerlink" title="主从server_id相同的情况"></a>主从server_id相同的情况</h4><p>sql/sql_parse.cc</p><figure class="highlight c"><figcaption><span>解析start slave的命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3101</span>   <span class="keyword">case</span> SQLCOM_SLAVE_START:</span><br><span class="line"><span class="number">3102</span>   &#123;</span><br><span class="line"><span class="number">3103</span>     mysql_mutex_lock(&amp;LOCK_active_mi);</span><br><span class="line"><span class="number">3104</span>     <span class="keyword">if</span> (active_mi != <span class="literal">NULL</span>)</span><br><span class="line"><span class="number">3105</span>       res= start_slave(thd, active_mi, <span class="number">1</span> <span class="comment">/* net report*/</span>);</span><br><span class="line"><span class="number">3106</span>     <span class="keyword">else</span></span><br><span class="line"><span class="number">3107</span>       my_message(ER_SLAVE_CONFIGURATION, ER(ER_SLAVE_CONFIGURATION),</span><br><span class="line"><span class="number">3108</span>                  MYF(<span class="number">0</span>));</span><br><span class="line"><span class="number">3109</span>     mysql_mutex_unlock(&amp;LOCK_active_mi);</span><br><span class="line"><span class="number">3110</span>     <span class="keyword">break</span>;</span><br><span class="line"><span class="number">3111</span>   &#125;</span><br></pre></td></tr></table></figure><p>sql/rpl_slave.cc中的get_master_version_and_clock函数</p><blockquote><p>start_slave() -&gt; start_slave_threads() -&gt; handle_slave_io() -&gt; get_master_version_and_clock()</p></blockquote><figure class="highlight c"><figcaption><span>判断主从server_id是否相同的地方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1919</span>   <span class="keyword">if</span> (!mysql_real_query(mysql,</span><br><span class="line"><span class="number">1920</span>                         STRING_WITH_LEN(<span class="string">"SHOW VARIABLES LIKE 'SERVER_ID'"</span>)) &amp;&amp;</span><br><span class="line"><span class="number">1921</span>       (master_res= mysql_store_result(mysql)) &amp;&amp;</span><br><span class="line"><span class="number">1922</span>       (master_row= mysql_fetch_row(master_res)))</span><br><span class="line"><span class="number">1923</span>   &#123;</span><br><span class="line"><span class="number">1924</span>     <span class="keyword">if</span> ((::server_id == (mi-&gt;master_id= strtoul(master_row[<span class="number">1</span>], <span class="number">0</span>, <span class="number">10</span>))) &amp;&amp;</span><br><span class="line"><span class="number">1925</span>         !mi-&gt;rli-&gt;replicate_same_server_id)</span><br><span class="line"><span class="number">1926</span>     &#123;</span><br><span class="line"><span class="number">1927</span>       errmsg= <span class="string">"The slave I/O thread stops because master and slave have equal \</span></span><br><span class="line"><span class="string">1928 MySQL server ids; these ids must be different for replication to work (or \</span></span><br><span class="line"><span class="string">1929 the --replicate-same-server-id option must be used on slave but this does \</span></span><br><span class="line"><span class="string">1930 not always make sense; please check the manual before using it)."</span>;</span><br><span class="line"><span class="number">1931</span>       err_code= ER_SLAVE_FATAL_ERROR;</span><br><span class="line"><span class="number">1932</span>       <span class="built_in">sprintf</span>(err_buff, ER(err_code), errmsg);</span><br><span class="line"><span class="number">1933</span>       <span class="keyword">goto</span> err;</span><br><span class="line"><span class="number">1934</span>     &#125;</span><br></pre></td></tr></table></figure><h3 id="gdb调试MySQL"><a href="#gdb调试MySQL" class="headerlink" title="gdb调试MySQL"></a>gdb调试MySQL</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>安装的时候使用 -DWITH_DEBUG=bool, 参照这个<a href="https://dev.mysql.com/doc/refman/5.5/en/compiling-for-debugging.html" target="_blank" rel="external">Compiling MySQL for Debugging</a></p><p>gdb运行的时候，需要指定特定的配置文件，使用的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args ./bin/mysqld --defaults-file=/data1/guosong/mysql5616/etc/my5616.cnf</span><br></pre></td></tr></table></figure><p>更多参照这个链接<a href="https://dev.mysql.com/doc/refman/5.5/en/debugging-server.html" target="_blank" rel="external">Debugging a MySQL Server</a></p><h4 id="打印临时变量出现"><a href="#打印临时变量出现" class="headerlink" title="打印临时变量出现"></a>打印临时变量出现<optimized out=""></optimized></h4><p>添加编译选项-O0，意思是不进行编译优化，gdb在默认情况下会使用-O2。<br>使用-O0选项调试的时候就会顺畅了,发布项目的时候不用再使用 -O0参数项，gcc 默认编译或加上-O2优化编译会提高程序运行速度。</p><p>查看CMakeLists.txt文件中发现大量使用-O1参数，故修改所有-O1为-O0就可以打印完整的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p next_rec</span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">const</span> <span class="keyword">rec_t</span> *) <span class="number">0x4</span> &lt;Address <span class="number">0x4</span> out of bounds&gt;</span><br><span class="line">(gdb) p next_rec</span><br><span class="line">$<span class="number">2</span> = (<span class="keyword">const</span> <span class="keyword">rec_t</span> *) <span class="number">0x7fff6e000070</span> <span class="string">"supremum"</span></span><br><span class="line">(gdb) p next_rec_heap_no</span><br><span class="line">$<span class="number">3</span> = <span class="number">1</span></span><br><span class="line">(gdb) c</span><br></pre></td></tr></table></figure><h3 id="待补充"><a href="#待补充" class="headerlink" title="(待补充)"></a><font color="red">(待补充)</font></h3>]]></content>
      
      <categories>
          
          <category> MySQL内核 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>线程安全</title>
      <link href="/2015-06-23-xian-cheng-an-quan/"/>
      <url>/2015-06-23-xian-cheng-an-quan/</url>
      <content type="html"><![CDATA[<h2 id="1、线程安全概念"><a href="#1、线程安全概念" class="headerlink" title="1、线程安全概念"></a>1、线程安全概念</h2><blockquote><p>If a function can be safely called by multiple threads at the same time, we say that the function is thread-safe.</p><p>如果一个函数在同一时刻可以被多个线程安全地调用，就称该函数是线程安全的。</p></blockquote><a id="more"></a><h2 id="2、-POSIX-1中不能保证线程安全的函数"><a href="#2、-POSIX-1中不能保证线程安全的函数" class="headerlink" title="2、 POSIX.1中不能保证线程安全的函数"></a>2、 POSIX.1中不能保证线程安全的函数</h2><p><img src="/images/thread_not_safe.png =700x500" alt="thread\_not\_safe"></p>]]></content>
      
      <categories>
          
          <category> Unix </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>octopress的git问题</title>
      <link href="/2015-06-12-octopressde-gitwen-ti/"/>
      <url>/2015-06-12-octopressde-gitwen-ti/</url>
      <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>对于octopress来说常用的命令是:</p><figure class="highlight html"><figcaption><span>octoprocess常用命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rake new_post['xxxx']</span><br><span class="line">rake preview</span><br><span class="line">rake deploy</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m 'xxxx'</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><a id="more"></a><p>但是今天缺遇到一个问题：</p><figure class="highlight html"><figcaption><span>rake deploy的问题</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  Pushing generated _deploy website</span><br><span class="line">To git@github.com:dolphinsboy/dolphinsboy.github.io.git</span><br><span class="line">! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to 'git@github.com:dolphinsboy/dolphinsboy.github.io.git'</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: 'git pull ...') before pushing again.</span><br><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></table></figure><p>怎么git rebase –HEAD xxx都不行，也不哪里有冲突，如果直接git pull的话，会将master中无关的代码全部拉下来了，污染source分支。</p><h2 id="2-问题解决方案"><a href="#2-问题解决方案" class="headerlink" title="2. 问题解决方案"></a>2. 问题解决方案</h2><p>各种google也没解决，最后发现一篇blog解决我的问题:<br><a href="http://weishi.github.io/blog/2013/07/24/setup-an-existing-octopress-repository-after-git-clone/" target="_blank" rel="external">Setup an Existing Octopress Repository After Git Clone</a></p><h2 id="3-处理过程"><a href="#3-处理过程" class="headerlink" title="3.处理过程"></a>3.处理过程</h2><h3 id="3-1-重新拉源代码"><a href="#3-1-重新拉源代码" class="headerlink" title="3.1 重新拉源代码"></a>3.1 重新拉源代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:dolphinsboy/dolphinsboy.github.io.git octopress</span><br><span class="line">cd octopress/</span><br><span class="line">git checkout source</span><br></pre></td></tr></table></figure><h3 id="3-2-手动从master再拉一份deploy文件"><a href="#3-2-手动从master再拉一份deploy文件" class="headerlink" title="3.2 手动从master再拉一份deploy文件"></a>3.2 手动从master再拉一份deploy文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir _deploy</span><br><span class="line">cd _deploy/</span><br><span class="line">git init</span><br><span class="line">git remote add -t master -f origin https://github.com/dolphinsboy/dolphinsboy.github.io</span><br></pre></td></tr></table></figure><h3 id="3-3-重新deploy"><a href="#3-3-重新deploy" class="headerlink" title="3.3 重新deploy"></a>3.3 重新deploy</h3><p>上面完成之后重新rake gen_deploy发现如下问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#  Pushing generated _deploy website</span><br><span class="line">remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed for 'https://github.com/dolphinsboy/dolphinsboy.github.io/'</span><br></pre></td></tr></table></figure><p>原因是3.2步骤设置成通过http访问的了，修改_deploy/.git/config中url参数为ssh方式即可。<br>至此解决我的问题。</p>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>supervisord配置使用总结</title>
      <link href="/2015-06-12-supervisordpei-zhi-shi-yong-zong-jie/"/>
      <url>/2015-06-12-supervisordpei-zhi-shi-yong-zong-jie/</url>
      <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>之前搭建公司内部的API系统，tornado server的守护进程使用supervisord进行管理，故当时就supervisord进行学习，并整理成相关文档。</p><h3 id="2-supervisord总结文档"><a href="#2-supervisord总结文档" class="headerlink" title="2. supervisord总结文档"></a>2. supervisord总结文档</h3><p>这里不在重复贴出，给出个百度网盘的链接:<br><a href="http://pan.baidu.com/s/1qWoPFm0" target="_blank" rel="external">使用supervisor守护Python进程.pdf</a></p><a id="more"></a><p>Slideshare上的链接：</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python单元测试</title>
      <link href="/2015-06-08-pythondan-yuan-ce-shi/"/>
      <url>/2015-06-08-pythondan-yuan-ce-shi/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司内部使用Salt进行配置管理工作，通过Salt-master的client执行相关命令，鉴于内部其他系统会使用到Salt服务，为了避免每个都ssh到Salt-master执行命令，故之前负责Salt的同学使用django框架对这些常用的命令进行HTTP API的封装。</p><p>目前总共32个接口，现在由于各种问题，需要迁移到Tornado的框架中。32个接口手动测试有点麻烦，故此研究一下python单元测试，这些可以为了后续对代码的改进，避免重复手动测试工作。</p><a id="more"></a><h3 id="Python单元测试"><a href="#Python单元测试" class="headerlink" title="Python单元测试"></a>Python单元测试</h3><p>主要是看了如下几个博客：</p><p>(1). <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00140137128705556022982cfd844b38d050add8565dcb9000" target="_blank" rel="external">廖雪峰博客的单元测试</a></p><p>(2). <a href="http://pyunit.sourceforge.net/pyunit_cn.html" target="_blank" rel="external">Python单元测试框架</a></p><p>(3). <a href="https://docs.python.org/2/library/unittest.html" target="_blank" rel="external">python2.7手册</a></p><p>(4). <a href="https://www.ibm.com/developerworks/cn/linux/l-pyunit/" target="_blank" rel="external">Python自动单元测试框架</a></p><p>(5). <a href="http://www.drdobbs.com/testing/unit-testing-with-python/240165163" target="_blank" rel="external">Unit Testing with Python</a></p><h4 id="Demo1——来自博客1"><a href="#Demo1——来自博客1" class="headerlink" title="Demo1——来自博客1"></a>Demo1——来自博客1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> !/usr/bin/env python</span><br><span class="line"> -*- coding:utf8 -*-</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super(Dict, self).__init__(**kw)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> self[key]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">r"'Dict' object has no attribute '%s'"</span> % key);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br></pre></td></tr></table></figure><p>Dict类，这个类的行为和dict一致，但是可以通过属性来访问，保存为mydict.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> !/usr/bin/env python</span><br><span class="line"> -*-coding:utf8 -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mydict <span class="keyword">import</span> Dict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDict</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">测试类，从unittest.TestCase继承</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以test开头的方法就是测试方法，</span></span><br><span class="line"><span class="string">不以test开头的方法不被认为是测试方法，</span></span><br><span class="line"><span class="string">测试的时候不会被执行。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict(a=<span class="number">1</span>, b= <span class="string">'test'</span>);</span><br><span class="line">        self.assertEquals(d.a, <span class="number">1</span>)</span><br><span class="line">        self.assertEquals(d.b, <span class="string">'test'</span>)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict()</span><br><span class="line">        d[<span class="string">'key'</span>] = <span class="string">'value'</span></span><br><span class="line">        self.assertEquals(d.key, <span class="string">'value'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_attr</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict()</span><br><span class="line">        d.key = <span class="string">'value'</span></span><br><span class="line">        self.assertTrue(<span class="string">'key'</span> <span class="keyword">in</span> d)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_keyerror</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(KeyError):</span><br><span class="line">            value = d[<span class="string">'empty'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_attrerror</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(AttributeError):</span><br><span class="line">            value = d.empty</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><p>unitest.TestCase提供很多内置的条件判断，如下图，只需要调用这些方法就可以断言输出是否符合预期。<br><img src="/images/test_assert.png" alt="TestCase的断言表达式"></p><p>另一种重要的断言就是期望抛出指定类型的Error，例如上面的后面两个测试用例。<br><img src="/images/test_exception.png" alt="TestCase的异常断言判断"></p><p>两个截图都来自<a href="https://docs.python.org/2/library/unittest.html" target="_blank" rel="external">链接3</a></p><p>可以将这个test.py当做正常的脚本使用main进行操作。<br>另一种更常见的方法是通过命令行参数-m unittest直接运行单元测试：</p><figure class="highlight html"><figcaption><span>通过命令行参数运行单元测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guosongdeMacBook-Air:20150608 guosong$ python -m unittest test</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>注意：脚本名称后面不同加.py后缀，否则出现错误。</strong></p><p><strong>setUp 和 tearDown</strong><br>如果想在执行每个测试用例的时候，在开始和结束的时候，执行一些操作，可以使用setUp和tearDown两个函数来实现，具体代码如下：</p><figure class="highlight python"><figcaption><span>TestDict类中重写setUp和tearDown函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line"> 打印当前执行测试case的方法名</span><br><span class="line"><span class="keyword">print</span> <span class="string">'setUp..., test_case_name = %s'</span> % self._testMethodName</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'tearDown..., done'</span></span><br></pre></td></tr></table></figure><p>如果setUp执行成功，那么无论runTest是否成功，tearDown方法都将被执行。<br>上面的实现方式称为固件。</p><p>在<a href="http://pyunit.sourceforge.net/pyunit_cn.html" target="_blank" rel="external">博客2</a>中介绍通过覆盖runTest 方法实现的方式，不过一般都不常用，具体可以参照<a href="http://pyunit.sourceforge.net/pyunit_cn.html" target="_blank" rel="external">博客2</a>。</p><h3 id="测试套件-test-unit"><a href="#测试套件-test-unit" class="headerlink" title="测试套件(test unit)"></a>测试套件(test unit)</h3><p><strong>测试Widget类</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, x=<span class="number">50</span>, y=<span class="number">50</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br></pre></td></tr></table></figure></p><p><strong>测试用例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> widget <span class="keyword">import</span> Widget</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.widget = Widget(<span class="string">"The widget"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.widget.dispose()</span><br><span class="line">        self.widget = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testDefaultSize</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> self.widget.size() == (<span class="number">50</span>,<span class="number">50</span>), <span class="string">'incorrect default size'</span></span><br><span class="line">        size = self.widget.size()</span><br><span class="line">        self.assertEquals(size,</span><br><span class="line">                        (<span class="number">50</span>,<span class="number">50</span>),<span class="string">'incorrect default size'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testResize</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.widget.resize(<span class="number">100</span>, <span class="number">150</span>)</span><br><span class="line">        size = self.widget.size()</span><br><span class="line">    </span><br><span class="line">        self.assertEquals(size,</span><br><span class="line">                        (<span class="number">100</span>,<span class="number">150</span>),<span class="string">'wrong size after resize'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>测试组件</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    测试用例实例可以根据它们所测试的特性组合起来,</span></span><br><span class="line"><span class="string">    这个机制称为测试套件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(WidgetTestCase(<span class="string">"testDefaultSize"</span>))</span><br><span class="line">    suite.addTest(WidgetTestCase(<span class="string">"testResize"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    makeSuite方法创建一个由测试用例类内所有测试用例组成的测试套件</span></span><br><span class="line"><span class="string">    makeSuite(testCaseClass, prefix='test',</span></span><br><span class="line"><span class="string">    sortUsing=&lt;built-in function cmp&gt;,</span></span><br><span class="line"><span class="string">    suiteClass=&lt;class 'unittest.suite.TestSuite'&gt;)</span></span><br><span class="line"><span class="string">    makeSuite会做排序，基于内置的cmp函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">suite = unittest.makeSuit(WidgetTestCase, <span class="string">'test'</span>)</span><br><span class="line"><span class="keyword">return</span> suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    suite = suite()</span><br><span class="line">    runner = unittest.TextTestRunner()</span><br><span class="line">    runner.run(suite)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ELK搭建过程</title>
      <link href="/2015-06-03-elkda-jian-guo-cheng/"/>
      <url>/2015-06-03-elkda-jian-guo-cheng/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>内部系统MySQL API 每天都产生大量的日志，需要从这些日志分析接口的调用时间、请求超时、错误等趋势以及具体的接口，便于抓住重点进行分析。目前公司内部主要使用ELK进行日志分析，故在此也使用ELK进行API日志的分析。</p><h3 id="ELK搭建过程文档"><a href="#ELK搭建过程文档" class="headerlink" title="ELK搭建过程文档"></a>ELK搭建过程文档</h3><a id="more"></a><p>参照百度网盘上的链接<a href="http://pan.baidu.com/s/1pJKFoE3" target="_blank" rel="external">http://pan.baidu.com/s/1pJKFoE3</a></p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>根据上面的文档就可以搭建出ELK了，其中对于日志分析的重点还是写正则表达式。<br>文档中提供Grok，在线工具非常值得推荐<a href="http://grokdebug.herokuapp.com/" target="_blank" rel="external">http://grokdebug.herokuapp.com/</a></p><p>常用的patterns：<a href="https://github.com/logstash/logstash/tree/v1.4.0/patterns" target="_blank" rel="external">https://github.com/logstash/logstash/tree/v1.4.0/patterns</a></p><p>可以根据的日志格式生成定义的pattern，定义好的变量可以放在${LogstashHOME}/patterns/grok-patterns文件中。</p><h3 id="新浪使用ELK进行日志分析"><a href="#新浪使用ELK进行日志分析" class="headerlink" title="新浪使用ELK进行日志分析"></a>新浪使用ELK进行日志分析</h3><p><a href="http://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;mid=207036526&amp;idx=1&amp;sn=b0de410e0d1026cd100ac2658e093160&amp;scene=5#rd" target="_blank" rel="external">新浪是如何分析处理32亿条实时日志的?</a></p>]]></content>
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>tornado异步非阻塞</title>
      <link href="/2015-06-02-tornadoyi-bu-fei-zu-sai/"/>
      <url>/2015-06-02-tornadoyi-bu-fei-zu-sai/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>内部平台提供HTTP API对日常经常使用的MySQL运维操作进行封装，经过多人积累，目前平台共有 117 个 HTTP 接口,涵盖到 MySQL 操作、MySQL 实例 元数据、授权、MySQL 状态、MySQL 集群拓扑结构、主从复制、DNS、体检巡检、参数变更、短信邮件报警、监控、表结构修改等。在线上实际运行的过程，经常出现API夯住的问题。</p><p>平台的API接口基于Facebook的Tornado实现，Tornado本身是支持异步非阻塞的，但是我们在开发的时候并没有使用这一特性，故进行出现单个端口夯住导致其他请求查询实践过程。</p><a id="more"></a><h3 id="Tornado异步非阻塞调研文档"><a href="#Tornado异步非阻塞调研文档" class="headerlink" title="Tornado异步非阻塞调研文档"></a>Tornado异步非阻塞调研文档</h3><p>基于下面两个博客，对现有的API进行改造，实现支持异步非阻塞功能</p><p><a href="http://www.tuicool.com/articles/36ZzA3" target="_blank" rel="external">tornado异步非阻塞</a></p><p><a href="http://lbolla.info/blog/2013/01/22/blocking-tornado" target="_blank" rel="external">Blocking tasks in Tornado</a></p><p><strong>下面给出之前本人写的《MySQLAPI 阻塞问题解决方案调研》的pdf文档</strong>，参照百度网盘的链接<br><a href="http://pan.baidu.com/s/1sjxA4KP" target="_blank" rel="external">http://pan.baidu.com/s/1sjxA4KP</a></p><p>里面的关于<strong>《Apache+WSGI+Tornado的配置》</strong>文档为内部的链接，外网无法访问，故参照下面的链接<br><a href="http://pan.baidu.com/s/1dDq7yY9" target="_blank" rel="external">http://pan.baidu.com/s/1dDq7yY9</a></p><h3 id="介绍Tornado的资料"><a href="#介绍Tornado的资料" class="headerlink" title="介绍Tornado的资料"></a>介绍Tornado的资料</h3><p>本人学习的Tornado入门资料主要是《Introduction to Tornado》</p><p>英文版本的链接：<a href="http://maemual-share.qiniudn.com/Oreilly.Introduction.to.Tornado.Mar.2012.pdf" target="_blank" rel="external">http://maemual-share.qiniudn.com/Oreilly.Introduction.to.Tornado.Mar.2012.pdf</a></p><p>中文版本的链接:<a href="http://mirrors.segmentfault.com/itt2zh/index.html" target="_blank" rel="external">http://mirrors.segmentfault.com/itt2zh/index.html</a></p><p>中文版本的翻译看过，整体感觉还不错的，值得推荐，主要还是多敲上面的demo吧</p><h3 id="Tornado和Django性能对比"><a href="#Tornado和Django性能对比" class="headerlink" title="Tornado和Django性能对比"></a>Tornado和Django性能对比</h3><p>通过后台Salt执行获取某个ip机器上某个端口的mysql配置文件信息。<br>构造一个测试例子文件：</p><figure class="highlight html"><figcaption><span>siege测试API并发量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">siege -c 100 -r 2 -f salt</span><br><span class="line"></span><br><span class="line">[root@typhoeus81 test]# more salt</span><br><span class="line">http://sinadbp.mars.grid.sina.com.cn/sinasalt/get_mysql_conf/tgt=10.13.2.70</span><br></pre></td></tr></table></figure><h4 id="siege-测试Django-API"><a href="#siege-测试Django-API" class="headerlink" title="siege 测试Django API"></a>siege 测试Django API</h4><p><img src="/images/django.jpg" alt="Django API测试结果"></p><h4 id="siege-测试Tornado-API"><a href="#siege-测试Tornado-API" class="headerlink" title="siege 测试Tornado API"></a>siege 测试Tornado API</h4><p><img src="/images/tornado.jpg" alt="Tornado API测试结果"></p><h4 id="测试结论"><a href="#测试结论" class="headerlink" title="测试结论"></a>测试结论</h4><p>从上面的结果上可以看到tornado的明显更为稳定，响应时间也比较快，django在高并发的情况下完全超时。</p>]]></content>
      
      <categories>
          
          <category> Tornado </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IO统计</title>
      <link href="/2015-05-27-iotong-ji/"/>
      <url>/2015-05-27-iotong-ji/</url>
      <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>线上一台Salt Master的机器压力特别大<br><img src="/images/dstat.jpg" alt="dstat的结果图"></p><p>故需要找出哪个进程在进行写操作，需要按照进程的维度统计出现IOPS的工具，故google的目录3中的一些参考资料</p><h3 id="2、实现方式"><a href="#2、实现方式" class="headerlink" title="2、实现方式"></a>2、实现方式</h3><p>主要参照3节中第一个链接<br><a href="http://www.xaprb.com/blog/2009/08/23/how-to-find-per-process-io-statistics-on-linux/" target="_blank" rel="external">how-to-find-per-process-io-statistics-on-linux</a></p><a id="more"></a><p>下载iodump的脚本，这是perl写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://aspersa.googlecode.com/svn/trunk/iodump</span><br></pre></td></tr></table></figure><p>打开内核有关IO消息的开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/block_dump</span><br></pre></td></tr></table></figure><p>统计相关进程的IOPS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while true; do sleep 1; dmesg -c; done | perl iodump</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="/images/iodump.jpg" alt="iodump效果图"></p><h3 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h3><p>(1)、<a href="http://www.xaprb.com/blog/2009/08/23/how-to-find-per-process-io-statistics-on-linux/" target="_blank" rel="external">http://www.xaprb.com/blog/2009/08/23/how-to-find-per-process-io-statistics-on-linux/</a><br>(2)、<a href="http://www.cnblogs.com/cloudstorage/archive/2012/11/11/2764623.html" target="_blank" rel="external">http://www.cnblogs.com/cloudstorage/archive/2012/11/11/2764623.html</a><br>(3)、<a href="http://www.ibm.com/developerworks/cn/aix/library/au-lsof.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/aix/library/au-lsof.html</a><br>(4)、<a href="http://mp.weixin.qq.com/s?__biz=MzAwODI1NTczOQ==&amp;mid=207783961&amp;idx=1&amp;sn=c3f310f3250cef29a866b15542226305&amp;scene=2#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzAwODI1NTczOQ==&amp;mid=207783961&amp;idx=1&amp;sn=c3f310f3250cef29a866b15542226305&amp;scene=2#rd</a></p>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>tcpdump解析SQL</title>
      <link href="/2015-05-18-tcpdumpjie-xi-sql/"/>
      <url>/2015-05-18-tcpdumpjie-xi-sql/</url>
      <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>公司内部使用到MytriggerQ的自研软件，其主要功能是从MySQL的blackhole从库中读取更新的binlog，将每条更新的SQL转换成一条消息存储到内存中，供其他程序通过GET协议消费。</p><p>由于机房网络调整，涉及到很多MytriggerQ的实例，且这些东西几经转手，需要查看是否存在流量，如果存在，需要给出来源的IP以及相关的命令。MytriggerQ自身不提供任何流量查询功能，没有记录相关日志，故能想到的最直接办法就是tcpdump抓包分析。</p><h2 id="2、tcpdump详解"><a href="#2、tcpdump详解" class="headerlink" title="2、tcpdump详解"></a>2、tcpdump详解</h2><p>神一样的文章，值得推荐<br><a href="http://roclinux.cn/?p=2474" target="_blank" rel="external">http://roclinux.cn/?p=2474</a></p><p>在上面的文章中分析包括UDP包的IP报文，故在此基础上，本人再加上一个TCP包的分析过程，具体参照百度网盘中的pdf文档<a href="http://pan.baidu.com/s/1o6OLcjo" target="_blank" rel="external">http://pan.baidu.com/s/1o6OLcjo</a>。</p><a id="more"></a><p><strong>TCP的分析过程主要涉及导下面几个结构图:</strong></p><h3 id="报文的层次图"><a href="#报文的层次图" class="headerlink" title="报文的层次图"></a>报文的层次图</h3><p><img src="/images/application.png" alt="报文的层次图"></p><p><strong>IP报文包头的结构图</strong></p><p><img src="/images/ip_segment.png =500x500" alt="IP报文包头的结构图"></p><p>图引用来源<a href="http://www.tcpipguide.com/free/t_IPDatagramGeneralFormat.htm" target="_blank" rel="external">http://www.tcpipguide.com/free/t_IPDatagramGeneralFormat.htm</a></p><blockquote><p>记忆点：IP报文包头长度20个字节</p></blockquote><p><strong>TCP报文包头的结构图</strong></p><p><img src="/images/tcp_segment.png =500x500" alt="TCP报文包头的结构图"></p><p>图引用来源<a href="http://www.tcpipguide.com/free/t_TCPMessageSegmentFormat-3.htm" target="_blank" rel="external">http://www.tcpipguide.com/free/t_TCPMessageSegmentFormat-3.htm</a></p><blockquote><p>记忆点：TCP报文中不包括可选项也是20个字节，可选项的长度是由Dataoffset确定，故TCP首部长度 = 20个字节 + Dataoffset</p></blockquote><h2 id="3、SQL解析"><a href="#3、SQL解析" class="headerlink" title="3、SQL解析"></a>3、SQL解析</h2><p>通过上面对于tcpdump分析，如果按照结构进行分析，可能非常麻烦。<br>公司内部之前有同事写的一个分析MySQL流量的情况，其主要也是通过tcpdump抓包分析，分析结果给出来源IP、目标IP以及相关SQL命令。</p><p><a href="https://www.percona.com/blog/2008/11/07/poor-mans-query-logging/" target="_blank" rel="external">https://www.percona.com/blog/2008/11/07/poor-mans-query-logging/</a><br><a href="http://jetpackweb.com/blog/2009/09/16/unobstrusive-viewing-of-mysql-queries-with-tcpdump/" target="_blank" rel="external">http://jetpackweb.com/blog/2009/09/16/unobstrusive-viewing-of-mysql-queries-with-tcpdump/</a></p><h2 id="4、开源分析tcpdump包"><a href="#4、开源分析tcpdump包" class="headerlink" title="4、开源分析tcpdump包"></a>4、开源分析tcpdump包</h2><p>通过强大的Wireshark图形工具可以分析。<br>如果想按照报文结构格式解析报文，应该如何实现呢？</p><h3 id="4-1-pyshark"><a href="#4-1-pyshark" class="headerlink" title="4.1 pyshark"></a>4.1 pyshark</h3><p>通过pyshark的Python包可以分许TCP报文包头的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delta: Delta (difference) time between the current packet and the previous captured packet</span><br><span class="line">destination: The Layer 3 (IP, IPv6) destination address</span><br><span class="line">info: A brief application layer summary (e.g. ‘HTTP GET /resource_folder/page.html’)</span><br><span class="line">ip id: IP Identification field used for uniquely identifying packets from a host</span><br><span class="line">length: Length of the packet in bytes</span><br><span class="line">no: Index number of the packet in the list</span><br><span class="line">protocol: The highest layer protocol recognized in the packet</span><br><span class="line">source:  Layer 3 (IP, IPV6) source address</span><br><span class="line">stream: Index of the TCP stream this packet is a part of (TCP packets only)</span><br><span class="line">summary_line: All the summary attributes in one tab-delimited string</span><br><span class="line">time: Absolute time between the current packet and the first packet</span><br><span class="line">window: The TCP window size (TCP packets only)</span><br></pre></td></tr></table></figure><p>pyshark具体的文档链接：<br><a href="http://thepacketgeek.com/pyshark-using-the-packet-object/" target="_blank" rel="external">http://thepacketgeek.com/pyshark-using-the-packet-object/</a></p><p>但是对于Data的部分找不到对应的属性，故无法满足需求。</p><h3 id="4-2-python分析报文结构过程"><a href="#4-2-python分析报文结构过程" class="headerlink" title="4.2 python分析报文结构过程"></a>4.2 python分析报文结构过程</h3><p>主要是参照github上的源码<br><a href="https://github.com/TimothyFitz/MyPorkDetector" target="_blank" rel="external">https://github.com/TimothyFitz/MyPorkDetector</a></p><p>tcpip.py：给出如果从tcpdump的二进制包中按照结构获取对应的属性信息<br>sql_parser.py：将报文中的数据信息转换成对应的SQL语句</p>]]></content>
      
      <categories>
          
          <category> Linux Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C typedef用法</title>
      <link href="/2015-05-15-c-typedefyong-fa/"/>
      <url>/2015-05-15-c-typedefyong-fa/</url>
      <content type="html"><![CDATA[<h2 id="typedef用法"><a href="#typedef用法" class="headerlink" title="typedef用法"></a>typedef用法</h2><p><a href="http://www.361way.com/typedef/560.html" target="_blank" rel="external">http://www.361way.com/typedef/560.html</a><br><a href="http://www.cnblogs.com/xrcun/archive/2013/05/24/3097149.html" target="_blank" rel="external">http://www.cnblogs.com/xrcun/archive/2013/05/24/3097149.html</a></p><h2 id="C语言执行python脚本"><a href="#C语言执行python脚本" class="headerlink" title="C语言执行python脚本"></a>C语言执行python脚本</h2><a id="more"></a><figure class="highlight c"><figcaption><span>C语言执行python脚本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> include <span class="string">"apue.h"</span></span><br><span class="line"> include &lt;sys/wait.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        err_sys(<span class="string">"fork error"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child pid=%d, parentid=%d\n"</span>, getpid(), getppid());</span><br><span class="line">        <span class="keyword">if</span> (execl(<span class="string">"./echoall.py"</span>, <span class="string">"echoall.py"</span>, <span class="string">"myarg1"</span>,</span><br><span class="line">        <span class="string">"MY ARG2"</span>, (<span class="keyword">char</span> *)<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        err_sys(<span class="string">"execle error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        err_sys(<span class="string">"wait error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execl第1个参数和第二个参数名称必须相同</p>]]></content>
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C宏定义的特殊用法</title>
      <link href="/2015-05-15-chong-ding-yi-de-te-shu-yong-fa/"/>
      <url>/2015-05-15-chong-ding-yi-de-te-shu-yong-fa/</url>
      <content type="html"><![CDATA[<h4 id="APUE-7-8例子出现如下用法"><a href="#APUE-7-8例子出现如下用法" class="headerlink" title="APUE 7-8例子出现如下用法"></a>APUE 7-8例子出现如下用法</h4><figure class="highlight c"><figcaption><span>宏定义的井号用法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> doit(name) pr_limits( name, name)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pr_limits</span><span class="params">(<span class="keyword">char</span> *, <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="更多的特殊使用方法"><a href="#更多的特殊使用方法" class="headerlink" title="更多的特殊使用方法"></a>更多的特殊使用方法</h4><p><a href="http://www.trueeyu.com/?p=494" target="_blank" rel="external">#(井号)在C/C++的#define宏定义中的特殊用法</a></p>]]></content>
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>静态库、共享库、动态库</title>
      <link href="/2015-05-15-cheng-xu-ku/"/>
      <url>/2015-05-15-cheng-xu-ku/</url>
      <content type="html"><![CDATA[<p><a href="http://www.dwheeler.com/program-library/Program-Library-HOWTO/" target="_blank" rel="external">Program-Library-HOWTO</a></p><p><a href="http://bbs.chinaunix.net/thread-2037617-1-1.html" target="_blank" rel="external">静态库、共享库、动态库的创建和使用</a></p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C程序存储空间</title>
      <link href="/2015-05-14-ccheng-xu-cun-chu-kong-jian/"/>
      <url>/2015-05-14-ccheng-xu-cun-chu-kong-jian/</url>
      <content type="html"><![CDATA[<h3 id="1-正文段"><a href="#1-正文段" class="headerlink" title="1. 正文段"></a>1. 正文段</h3><p>CPU执行的机器指令部分。通常，正文段是可共享的。正文段常常是只读的，以防止程序由于意外而修改其自身的指令。</p><h3 id="2-初始化数据段"><a href="#2-初始化数据段" class="headerlink" title="2. 初始化数据段"></a>2. 初始化数据段</h3><p>程序需明确赋值的变量。</p><h3 id="3-非初始化数据段"><a href="#3-非初始化数据段" class="headerlink" title="3. 非初始化数据段"></a>3. 非初始化数据段</h3><p>bss：block started by symbol 由符合开始的地方。</p><a id="more"></a><h3 id="4-栈"><a href="#4-栈" class="headerlink" title="4. 栈"></a>4. 栈</h3><p>自动变量以及每次函数调用时所需保存的信息都存放在此段中。</p><h3 id="5-堆"><a href="#5-堆" class="headerlink" title="5. 堆"></a>5. 堆</h3><p>通常在堆中进行动态存储分配。</p><p><img src="/images/c_program.png" alt="C程序存储空间"></p><h3 id="6、例子"><a href="#6、例子" class="headerlink" title="6、例子"></a>6、例子</h3><p>size命令获取各个段的大小，单位是字节</p><figure class="highlight html"><figcaption><span>size命令获取各个段大小</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ size 7-1</span><br><span class="line">__TEXT__DATA__OBJCothersdechex</span><br><span class="line">40964096042949713924294979584100003000</span><br></pre></td></tr></table></figure><p>第四列和第五列是十进制和十六进制的长度表示。</p>]]></content>
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GDB学习笔记</title>
      <link href="/2015-05-11-learning-gdb/"/>
      <url>/2015-05-11-learning-gdb/</url>
      <content type="html"><![CDATA[<h3 id="GDB概述"><a href="#GDB概述" class="headerlink" title="GDB概述"></a>GDB概述</h3><p>GDB主要帮忙你完成下面四个方面的功能：</p><p>1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。</p><p>2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）</p><p>3、当程序被停住时，可以检查此时你的程序中所发生的事。</p><p>4、动态的改变你程序的执行环境。</p><a id="more"></a><h3 id="GDB分析corefile"><a href="#GDB分析corefile" class="headerlink" title="GDB分析corefile"></a>GDB分析corefile</h3><h4 id="corefile产生系统设置"><a href="#corefile产生系统设置" class="headerlink" title="corefile产生系统设置"></a>corefile产生系统设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@qbj3-op-sre-test-00 guosong]# ulimit -c</span><br><span class="line">1024</span><br><span class="line">[root@qbj3-op-sre-test-00 guosong]# ulimit -a</span><br><span class="line">core file size          (blocks, -c) 1024</span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><ul><li>源码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@qbj3-op-sre-test<span class="number">-00</span> guosong]<span class="meta"># more test.c </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crash</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *xxx = <span class="string">"crash!!"</span>;</span><br><span class="line">    xxx[<span class="number">1</span>] = <span class="string">'D'</span>; <span class="comment">// 写只读存储区!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> crash();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g  -o test test.c</span><br></pre></td></tr></table></figure><p>需要添加-g参数，可以进行debug</p><p>执行test产生core文件。</p><ul><li>分析core</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@qbj3-op-sre-test-00 guosong]# gdb test ./core.21740 </span><br><span class="line">Core was generated by `./test&apos;.</span><br><span class="line">Program terminated with signal 11, Segmentation fault.</span><br><span class="line">#0  0x0000000000400501 in crash () at test.c:7</span><br><span class="line">7           xxx[1] = &apos;D&apos;; // 写只读存储区!</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x0000000000400501 in crash () at test.c:7</span><br><span class="line">#1  0x0000000000400519 in foo () at test.c:13</span><br><span class="line">#2  0x0000000000400529 in main () at test.c:18</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.csdn.net/haoel/article/details/2879" target="_blank" rel="external">陈皓的博客-用GDB调试程序 http://blog.csdn.net/haoel/article/details/2879</a></p>]]></content>
      
      <categories>
          
          <category> GDB </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python类操作符重载</title>
      <link href="/2015-05-04-python-operator-overload/"/>
      <url>/2015-05-04-python-operator-overload/</url>
      <content type="html"><![CDATA[<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><figcaption><span>setattr & getattr</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, n, v)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="string">'age'</span>:</span><br><span class="line">            self.__dict__[n] = v</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'setattr'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="string">'age'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__dict__[n]</span><br><span class="line"></span><br><span class="line">obj = Object()</span><br><span class="line">obj.age = <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> obj.age</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出：</p><figure class="highlight python"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setattr</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、 <a href="http://blog.teamtreehouse.com/operator-overloading-python" target="_blank" rel="external">http://blog.teamtreehouse.com/operator-overloading-python</a></p><p>2、 所有的操作符<br><a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="external">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>个人介绍</title>
      <link href="/2015-05-02-introduction/"/>
      <url>/2015-05-02-introduction/</url>
      <content type="html"><![CDATA[<h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>姓名：郭颂</li><li>微博：@小郭学路</li><li>QQ：253876250</li></ul><h3 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h3><ul><li>2011.4——2013.6     百度MySQL DBA</li><li>2013.6——2015.10    新浪MySQL DBA</li><li>2015.10–至今      楚楚街数据库和运维负责人</li></ul>]]></content>
      
      
    </entry>
    
  
  
</search>
